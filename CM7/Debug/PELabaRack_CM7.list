
PELabaRack_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e42c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800e6c4  0800e6c4  0001e6c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e748  0800e748  0001e748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e750  0800e750  0001e750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e754  0800e754  0001e754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  0800e758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  20000010  0800e768  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  20000070  0800e7c8  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b08  200000d0  0800e828  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bd8  0800e828  00020bd8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00042136  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000518c  00000000  00000000  00062234  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002d20  00000000  00000000  000673c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002b38  00000000  00000000  0006a0e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00043e56  00000000  00000000  0006cc18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00023b40  00000000  00000000  000b0a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001d1418  00000000  00000000  000d45ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002a59c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ca44  00000000  00000000  002a5a44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	200000d0 	.word	0x200000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800e6ac 	.word	0x0800e6ac

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	200000d4 	.word	0x200000d4
 80002d4:	0800e6ac 	.word	0x0800e6ac

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005dc:	4b3f      	ldr	r3, [pc, #252]	; (80006dc <SystemInit+0x104>)
 80005de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e2:	4a3e      	ldr	r2, [pc, #248]	; (80006dc <SystemInit+0x104>)
 80005e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005ec:	4b3b      	ldr	r3, [pc, #236]	; (80006dc <SystemInit+0x104>)
 80005ee:	691b      	ldr	r3, [r3, #16]
 80005f0:	4a3a      	ldr	r2, [pc, #232]	; (80006dc <SystemInit+0x104>)
 80005f2:	f043 0310 	orr.w	r3, r3, #16
 80005f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f8:	4b39      	ldr	r3, [pc, #228]	; (80006e0 <SystemInit+0x108>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f003 030f 	and.w	r3, r3, #15
 8000600:	2b06      	cmp	r3, #6
 8000602:	d807      	bhi.n	8000614 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <SystemInit+0x108>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f023 030f 	bic.w	r3, r3, #15
 800060c:	4a34      	ldr	r2, [pc, #208]	; (80006e0 <SystemInit+0x108>)
 800060e:	f043 0307 	orr.w	r3, r3, #7
 8000612:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000614:	4b33      	ldr	r3, [pc, #204]	; (80006e4 <SystemInit+0x10c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a32      	ldr	r2, [pc, #200]	; (80006e4 <SystemInit+0x10c>)
 800061a:	f043 0301 	orr.w	r3, r3, #1
 800061e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000620:	4b30      	ldr	r3, [pc, #192]	; (80006e4 <SystemInit+0x10c>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000626:	4b2f      	ldr	r3, [pc, #188]	; (80006e4 <SystemInit+0x10c>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	492e      	ldr	r1, [pc, #184]	; (80006e4 <SystemInit+0x10c>)
 800062c:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <SystemInit+0x110>)
 800062e:	4013      	ands	r3, r2
 8000630:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000632:	4b2b      	ldr	r3, [pc, #172]	; (80006e0 <SystemInit+0x108>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f003 030f 	and.w	r3, r3, #15
 800063a:	2b07      	cmp	r3, #7
 800063c:	d907      	bls.n	800064e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063e:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <SystemInit+0x108>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f023 030f 	bic.w	r3, r3, #15
 8000646:	4a26      	ldr	r2, [pc, #152]	; (80006e0 <SystemInit+0x108>)
 8000648:	f043 0307 	orr.w	r3, r3, #7
 800064c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064e:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <SystemInit+0x10c>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000654:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <SystemInit+0x10c>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065a:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <SystemInit+0x10c>)
 800065c:	2200      	movs	r2, #0
 800065e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000660:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <SystemInit+0x10c>)
 8000662:	4a22      	ldr	r2, [pc, #136]	; (80006ec <SystemInit+0x114>)
 8000664:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000666:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemInit+0x10c>)
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <SystemInit+0x118>)
 800066a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <SystemInit+0x10c>)
 800066e:	4a21      	ldr	r2, [pc, #132]	; (80006f4 <SystemInit+0x11c>)
 8000670:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <SystemInit+0x10c>)
 8000674:	2200      	movs	r2, #0
 8000676:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <SystemInit+0x10c>)
 800067a:	4a1e      	ldr	r2, [pc, #120]	; (80006f4 <SystemInit+0x11c>)
 800067c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <SystemInit+0x10c>)
 8000680:	2200      	movs	r2, #0
 8000682:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <SystemInit+0x10c>)
 8000686:	4a1b      	ldr	r2, [pc, #108]	; (80006f4 <SystemInit+0x11c>)
 8000688:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <SystemInit+0x10c>)
 800068c:	2200      	movs	r2, #0
 800068e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <SystemInit+0x10c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a13      	ldr	r2, [pc, #76]	; (80006e4 <SystemInit+0x10c>)
 8000696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <SystemInit+0x10c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <SystemInit+0x120>)
 80006a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a6:	4a14      	ldr	r2, [pc, #80]	; (80006f8 <SystemInit+0x120>)
 80006a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <SystemInit+0x124>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <SystemInit+0x128>)
 80006b4:	4013      	ands	r3, r2
 80006b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006ba:	d202      	bcs.n	80006c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <SystemInit+0x12c>)
 80006be:	2201      	movs	r2, #1
 80006c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <SystemInit+0x130>)
 80006c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006ca:	4b04      	ldr	r3, [pc, #16]	; (80006dc <SystemInit+0x104>)
 80006cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00
 80006e0:	52002000 	.word	0x52002000
 80006e4:	58024400 	.word	0x58024400
 80006e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80006ec:	02020200 	.word	0x02020200
 80006f0:	01ff0000 	.word	0x01ff0000
 80006f4:	01010280 	.word	0x01010280
 80006f8:	580000c0 	.word	0x580000c0
 80006fc:	5c001000 	.word	0x5c001000
 8000700:	ffff0000 	.word	0xffff0000
 8000704:	51008108 	.word	0x51008108
 8000708:	52004000 	.word	0x52004000

0800070c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000712:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000716:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000718:	bf00      	nop
 800071a:	4b39      	ldr	r3, [pc, #228]	; (8000800 <main+0xf4>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000722:	2b00      	cmp	r3, #0
 8000724:	d004      	beq.n	8000730 <main+0x24>
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	1e5a      	subs	r2, r3, #1
 800072a:	607a      	str	r2, [r7, #4]
 800072c:	2b00      	cmp	r3, #0
 800072e:	dcf4      	bgt.n	800071a <main+0xe>
  if ( timeout < 0 )
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2b00      	cmp	r3, #0
 8000734:	da01      	bge.n	800073a <main+0x2e>
  {
  Error_Handler();
 8000736:	f001 fd67 	bl	8002208 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073a:	f002 ffaf 	bl	800369c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073e:	f000 f861 	bl	8000804 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000742:	4b2f      	ldr	r3, [pc, #188]	; (8000800 <main+0xf4>)
 8000744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000748:	4a2d      	ldr	r2, [pc, #180]	; (8000800 <main+0xf4>)
 800074a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000752:	4b2b      	ldr	r3, [pc, #172]	; (8000800 <main+0xf4>)
 8000754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000760:	2000      	movs	r0, #0
 8000762:	f006 f9bd 	bl	8006ae0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000766:	2100      	movs	r1, #0
 8000768:	2000      	movs	r0, #0
 800076a:	f006 f9d3 	bl	8006b14 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800076e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000772:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000774:	bf00      	nop
 8000776:	4b22      	ldr	r3, [pc, #136]	; (8000800 <main+0xf4>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077e:	2b00      	cmp	r3, #0
 8000780:	d104      	bne.n	800078c <main+0x80>
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	1e5a      	subs	r2, r3, #1
 8000786:	607a      	str	r2, [r7, #4]
 8000788:	2b00      	cmp	r3, #0
 800078a:	dcf4      	bgt.n	8000776 <main+0x6a>
if ( timeout < 0 )
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b00      	cmp	r3, #0
 8000790:	da01      	bge.n	8000796 <main+0x8a>
{
Error_Handler();
 8000792:	f001 fd39 	bl	8002208 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000796:	f001 fc59 	bl	800204c <MX_GPIO_Init>
  MX_ADC1_Init();
 800079a:	f000 f959 	bl	8000a50 <MX_ADC1_Init>
  MX_ADC2_Init();
 800079e:	f000 f9cf 	bl	8000b40 <MX_ADC2_Init>
  MX_ETH_Init();
 80007a2:	f000 fb33 	bl	8000e0c <MX_ETH_Init>
  MX_FDCAN1_Init();
 80007a6:	f000 fb83 	bl	8000eb0 <MX_FDCAN1_Init>
  MX_HRTIM_Init();
 80007aa:	f000 fbe5 	bl	8000f78 <MX_HRTIM_Init>
  MX_I2C2_Init();
 80007ae:	f000 fd5f 	bl	8001270 <MX_I2C2_Init>
  MX_LPTIM2_Init();
 80007b2:	f000 fde1 	bl	8001378 <MX_LPTIM2_Init>
  MX_LTDC_Init();
 80007b6:	f000 fe13 	bl	80013e0 <MX_LTDC_Init>
  MX_SPI3_Init();
 80007ba:	f000 fee9 	bl	8001590 <MX_SPI3_Init>
  MX_TIM1_Init();
 80007be:	f000 ff3d 	bl	800163c <MX_TIM1_Init>
  MX_TIM4_Init();
 80007c2:	f000 ffe3 	bl	800178c <MX_TIM4_Init>
  MX_TIM8_Init();
 80007c6:	f001 f90d 	bl	80019e4 <MX_TIM8_Init>
  MX_TIM12_Init();
 80007ca:	f001 f9bf 	bl	8001b4c <MX_TIM12_Init>
  MX_TIM16_Init();
 80007ce:	f001 fa0d 	bl	8001bec <MX_TIM16_Init>
  MX_TIM17_Init();
 80007d2:	f001 fa85 	bl	8001ce0 <MX_TIM17_Init>
  MX_UART5_Init();
 80007d6:	f001 fafd 	bl	8001dd4 <MX_UART5_Init>
  MX_UART7_Init();
 80007da:	f001 fb47 	bl	8001e6c <MX_UART7_Init>
  MX_UART8_Init();
 80007de:	f001 fb91 	bl	8001f04 <MX_UART8_Init>
  MX_USB_OTG_HS_USB_Init();
 80007e2:	f001 fc2b 	bl	800203c <MX_USB_OTG_HS_USB_Init>
  MX_DFSDM1_Init();
 80007e6:	f000 fa3f 	bl	8000c68 <MX_DFSDM1_Init>
  MX_COMP2_Init();
 80007ea:	f000 fa0f 	bl	8000c0c <MX_COMP2_Init>
  MX_I2C3_SMBUS_Init();
 80007ee:	f000 fd7f 	bl	80012f0 <MX_I2C3_SMBUS_Init>
  MX_SDMMC2_SD_Init();
 80007f2:	f000 fea7 	bl	8001544 <MX_SDMMC2_SD_Init>
  MX_TIM5_Init();
 80007f6:	f001 f873 	bl	80018e0 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 80007fa:	f001 fbd3 	bl	8001fa4 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <main+0xf2>
 8000800:	58024400 	.word	0x58024400

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b0cc      	sub	sp, #304	; 0x130
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800080e:	224c      	movs	r2, #76	; 0x4c
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f00d ff41 	bl	800e69a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000818:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800081c:	2220      	movs	r2, #32
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f00d ff3a 	bl	800e69a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000826:	f107 0308 	add.w	r3, r7, #8
 800082a:	4618      	mov	r0, r3
 800082c:	23bc      	movs	r3, #188	; 0xbc
 800082e:	461a      	mov	r2, r3
 8000830:	2100      	movs	r1, #0
 8000832:	f00d ff32 	bl	800e69a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000836:	2002      	movs	r0, #2
 8000838:	f006 fdf2 	bl	8007420 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	4b7f      	ldr	r3, [pc, #508]	; (8000a40 <SystemClock_Config+0x23c>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	4a7e      	ldr	r2, [pc, #504]	; (8000a40 <SystemClock_Config+0x23c>)
 8000848:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800084c:	6193      	str	r3, [r2, #24]
 800084e:	4b7c      	ldr	r3, [pc, #496]	; (8000a40 <SystemClock_Config+0x23c>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	4b7a      	ldr	r3, [pc, #488]	; (8000a44 <SystemClock_Config+0x240>)
 800085c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800085e:	4a79      	ldr	r2, [pc, #484]	; (8000a44 <SystemClock_Config+0x240>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000866:	4b77      	ldr	r3, [pc, #476]	; (8000a44 <SystemClock_Config+0x240>)
 8000868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800086a:	f003 0201 	and.w	r2, r3, #1
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000876:	bf00      	nop
 8000878:	4b71      	ldr	r3, [pc, #452]	; (8000a40 <SystemClock_Config+0x23c>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000884:	d1f8      	bne.n	8000878 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000886:	4b70      	ldr	r3, [pc, #448]	; (8000a48 <SystemClock_Config+0x244>)
 8000888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800088a:	4a6f      	ldr	r2, [pc, #444]	; (8000a48 <SystemClock_Config+0x244>)
 800088c:	f023 0303 	bic.w	r3, r3, #3
 8000890:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000892:	2303      	movs	r3, #3
 8000894:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000898:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800089c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008a0:	2301      	movs	r3, #1
 80008a2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a6:	2340      	movs	r3, #64	; 0x40
 80008a8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ac:	2302      	movs	r3, #2
 80008ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008b2:	2300      	movs	r3, #0
 80008b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008b8:	2304      	movs	r3, #4
 80008ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 80008be:	233c      	movs	r3, #60	; 0x3c
 80008c0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008c4:	2302      	movs	r3, #2
 80008c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008ca:	2302      	movs	r3, #2
 80008cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008d6:	230c      	movs	r3, #12
 80008d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008dc:	2300      	movs	r3, #0
 80008de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80008ec:	4618      	mov	r0, r3
 80008ee:	f006 fdf1 	bl	80074d4 <HAL_RCC_OscConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80008f8:	f001 fc86 	bl	8002208 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fc:	233f      	movs	r3, #63	; 0x3f
 80008fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000902:	2303      	movs	r3, #3
 8000904:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800090e:	2308      	movs	r3, #8
 8000910:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000914:	2340      	movs	r3, #64	; 0x40
 8000916:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800091a:	2340      	movs	r3, #64	; 0x40
 800091c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 8000920:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000924:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000928:	2340      	movs	r3, #64	; 0x40
 800092a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800092e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000932:	2104      	movs	r1, #4
 8000934:	4618      	mov	r0, r3
 8000936:	f007 f9dd 	bl	8007cf4 <HAL_RCC_ClockConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0x140>
  {
    Error_Handler();
 8000940:	f001 fc62 	bl	8002208 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_HRTIM1
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	4a40      	ldr	r2, [pc, #256]	; (8000a4c <SystemClock_Config+0x248>)
 800094a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_FDCAN|RCC_PERIPHCLK_UART8
                              |RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_UART5
                              |RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_LPTIM2|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800094c:	f107 0308 	add.w	r3, r7, #8
 8000950:	2204      	movs	r2, #4
 8000952:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000954:	f107 0308 	add.w	r3, r7, #8
 8000958:	2209      	movs	r2, #9
 800095a:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	2201      	movs	r2, #1
 8000962:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000964:	f107 0308 	add.w	r3, r7, #8
 8000968:	2202      	movs	r2, #2
 800096a:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800096c:	f107 0308 	add.w	r3, r7, #8
 8000970:	2202      	movs	r2, #2
 8000972:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000974:	f107 0308 	add.w	r3, r7, #8
 8000978:	22c0      	movs	r2, #192	; 0xc0
 800097a:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800097c:	f107 0308 	add.w	r3, r7, #8
 8000980:	2220      	movs	r2, #32
 8000982:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800098c:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.PLL3.PLL3M = 32;
 800098e:	f107 0308 	add.w	r3, r7, #8
 8000992:	2220      	movs	r2, #32
 8000994:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3N = 129;
 8000996:	f107 0308 	add.w	r3, r7, #8
 800099a:	2281      	movs	r2, #129	; 0x81
 800099c:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800099e:	f107 0308 	add.w	r3, r7, #8
 80009a2:	2202      	movs	r2, #2
 80009a4:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80009a6:	f107 0308 	add.w	r3, r7, #8
 80009aa:	2202      	movs	r2, #2
 80009ac:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 80009ae:	f107 0308 	add.w	r3, r7, #8
 80009b2:	2202      	movs	r2, #2
 80009b4:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 80009b6:	f107 0308 	add.w	r3, r7, #8
 80009ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009be:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80009c0:	f107 0308 	add.w	r3, r7, #8
 80009c4:	2200      	movs	r2, #0
 80009c6:	63da      	str	r2, [r3, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80009c8:	f107 0308 	add.w	r3, r7, #8
 80009cc:	2200      	movs	r2, #0
 80009ce:	641a      	str	r2, [r3, #64]	; 0x40
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80009d0:	f107 0308 	add.w	r3, r7, #8
 80009d4:	2200      	movs	r2, #0
 80009d6:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80009d8:	f107 0308 	add.w	r3, r7, #8
 80009dc:	2200      	movs	r2, #0
 80009de:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 80009e0:	f107 0308 	add.w	r3, r7, #8
 80009e4:	2200      	movs	r2, #0
 80009e6:	669a      	str	r2, [r3, #104]	; 0x68
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80009e8:	f107 0308 	add.w	r3, r7, #8
 80009ec:	2200      	movs	r2, #0
 80009ee:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80009f0:	f107 0308 	add.w	r3, r7, #8
 80009f4:	2200      	movs	r2, #0
 80009f6:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80009f8:	f107 0308 	add.w	r3, r7, #8
 80009fc:	2200      	movs	r2, #0
 80009fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_D3PCLK1;
 8000a02:	f107 0308 	add.w	r3, r7, #8
 8000a06:	2200      	movs	r2, #0
 8000a08:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a0c:	f107 0308 	add.w	r3, r7, #8
 8000a10:	2200      	movs	r2, #0
 8000a12:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8000a16:	f107 0308 	add.w	r3, r7, #8
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a20:	f107 0308 	add.w	r3, r7, #8
 8000a24:	4618      	mov	r0, r3
 8000a26:	f007 fce9 	bl	80083fc <HAL_RCCEx_PeriphCLKConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <SystemClock_Config+0x230>
  {
    Error_Handler();
 8000a30:	f001 fbea 	bl	8002208 <Error_Handler>
  }
}
 8000a34:	bf00      	nop
 8000a36:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	58024800 	.word	0x58024800
 8000a44:	58000400 	.word	0x58000400
 8000a48:	58024400 	.word	0x58024400
 8000a4c:	3029904a 	.word	0x3029904a

08000a50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a62:	463b      	mov	r3, r7
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
 8000a70:	615a      	str	r2, [r3, #20]
 8000a72:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a74:	4b2f      	ldr	r3, [pc, #188]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000a76:	4a30      	ldr	r2, [pc, #192]	; (8000b38 <MX_ADC1_Init+0xe8>)
 8000a78:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a7a:	4b2e      	ldr	r3, [pc, #184]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a80:	4b2c      	ldr	r3, [pc, #176]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a86:	4b2b      	ldr	r3, [pc, #172]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a8c:	4b29      	ldr	r3, [pc, #164]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000a8e:	2204      	movs	r2, #4
 8000a90:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a92:	4b28      	ldr	r3, [pc, #160]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a98:	4b26      	ldr	r3, [pc, #152]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000a9e:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aa4:	4b23      	ldr	r3, [pc, #140]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aaa:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ab0:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ab6:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000abc:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ad0:	4818      	ldr	r0, [pc, #96]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000ad2:	f003 f843 	bl	8003b5c <HAL_ADC_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000adc:	f001 fb94 	bl	8002208 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4812      	ldr	r0, [pc, #72]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000aec:	f003 fe08 	bl	8004700 <HAL_ADCEx_MultiModeConfigChannel>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000af6:	f001 fb87 	bl	8002208 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <MX_ADC1_Init+0xec>)
 8000afc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000afe:	2306      	movs	r3, #6
 8000b00:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b06:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b0a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b18:	463b      	mov	r3, r7
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_ADC1_Init+0xe4>)
 8000b1e:	f003 f9bd 	bl	8003e9c <HAL_ADC_ConfigChannel>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000b28:	f001 fb6e 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	3728      	adds	r7, #40	; 0x28
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200006f4 	.word	0x200006f4
 8000b38:	40022000 	.word	0x40022000
 8000b3c:	4b840000 	.word	0x4b840000

08000b40 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
 8000b54:	615a      	str	r2, [r3, #20]
 8000b56:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b58:	4b29      	ldr	r3, [pc, #164]	; (8000c00 <MX_ADC2_Init+0xc0>)
 8000b5a:	4a2a      	ldr	r2, [pc, #168]	; (8000c04 <MX_ADC2_Init+0xc4>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b5e:	4b28      	ldr	r3, [pc, #160]	; (8000c00 <MX_ADC2_Init+0xc0>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000b64:	4b26      	ldr	r3, [pc, #152]	; (8000c00 <MX_ADC2_Init+0xc0>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b6a:	4b25      	ldr	r3, [pc, #148]	; (8000c00 <MX_ADC2_Init+0xc0>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b70:	4b23      	ldr	r3, [pc, #140]	; (8000c00 <MX_ADC2_Init+0xc0>)
 8000b72:	2204      	movs	r2, #4
 8000b74:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b76:	4b22      	ldr	r3, [pc, #136]	; (8000c00 <MX_ADC2_Init+0xc0>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b7c:	4b20      	ldr	r3, [pc, #128]	; (8000c00 <MX_ADC2_Init+0xc0>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000b82:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <MX_ADC2_Init+0xc0>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b88:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <MX_ADC2_Init+0xc0>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <MX_ADC2_Init+0xc0>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b94:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <MX_ADC2_Init+0xc0>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <MX_ADC2_Init+0xc0>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ba0:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <MX_ADC2_Init+0xc0>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <MX_ADC2_Init+0xc0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000bac:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <MX_ADC2_Init+0xc0>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000bb4:	4812      	ldr	r0, [pc, #72]	; (8000c00 <MX_ADC2_Init+0xc0>)
 8000bb6:	f002 ffd1 	bl	8003b5c <HAL_ADC_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000bc0:	f001 fb22 	bl	8002208 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000bc4:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <MX_ADC2_Init+0xc8>)
 8000bc6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bc8:	2306      	movs	r3, #6
 8000bca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bd0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000bd4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bd6:	2304      	movs	r3, #4
 8000bd8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4619      	mov	r1, r3
 8000be6:	4806      	ldr	r0, [pc, #24]	; (8000c00 <MX_ADC2_Init+0xc0>)
 8000be8:	f003 f958 	bl	8003e9c <HAL_ADC_ConfigChannel>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000bf2:	f001 fb09 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	3720      	adds	r7, #32
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000300 	.word	0x20000300
 8000c04:	40022100 	.word	0x40022100
 8000c08:	4b840000 	.word	0x4b840000

08000c0c <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <MX_COMP2_Init+0x50>)
 8000c12:	4a13      	ldr	r2, [pc, #76]	; (8000c60 <MX_COMP2_Init+0x54>)
 8000c14:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <MX_COMP2_Init+0x50>)
 8000c18:	4a12      	ldr	r2, [pc, #72]	; (8000c64 <MX_COMP2_Init+0x58>)
 8000c1a:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <MX_COMP2_Init+0x50>)
 8000c1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000c22:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000c24:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <MX_COMP2_Init+0x50>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <MX_COMP2_Init+0x50>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000c30:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <MX_COMP2_Init+0x50>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <MX_COMP2_Init+0x50>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000c3c:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <MX_COMP2_Init+0x50>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <MX_COMP2_Init+0x50>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000c48:	4804      	ldr	r0, [pc, #16]	; (8000c5c <MX_COMP2_Init+0x50>)
 8000c4a:	f003 fe33 	bl	80048b4 <HAL_COMP_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_COMP2_Init+0x4c>
  {
    Error_Handler();
 8000c54:	f001 fad8 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	2000087c 	.word	0x2000087c
 8000c60:	58003810 	.word	0x58003810
 8000c64:	00030004 	.word	0x00030004

08000c68 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000c6c:	4b5f      	ldr	r3, [pc, #380]	; (8000dec <MX_DFSDM1_Init+0x184>)
 8000c6e:	4a60      	ldr	r2, [pc, #384]	; (8000df0 <MX_DFSDM1_Init+0x188>)
 8000c70:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000c72:	4b5e      	ldr	r3, [pc, #376]	; (8000dec <MX_DFSDM1_Init+0x184>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000c78:	4b5c      	ldr	r3, [pc, #368]	; (8000dec <MX_DFSDM1_Init+0x184>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000c7e:	4b5b      	ldr	r3, [pc, #364]	; (8000dec <MX_DFSDM1_Init+0x184>)
 8000c80:	2202      	movs	r2, #2
 8000c82:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000c84:	4b59      	ldr	r3, [pc, #356]	; (8000dec <MX_DFSDM1_Init+0x184>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000c8a:	4b58      	ldr	r3, [pc, #352]	; (8000dec <MX_DFSDM1_Init+0x184>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000c90:	4b56      	ldr	r3, [pc, #344]	; (8000dec <MX_DFSDM1_Init+0x184>)
 8000c92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c96:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000c98:	4b54      	ldr	r3, [pc, #336]	; (8000dec <MX_DFSDM1_Init+0x184>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000c9e:	4b53      	ldr	r3, [pc, #332]	; (8000dec <MX_DFSDM1_Init+0x184>)
 8000ca0:	2204      	movs	r2, #4
 8000ca2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000ca4:	4b51      	ldr	r3, [pc, #324]	; (8000dec <MX_DFSDM1_Init+0x184>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000caa:	4b50      	ldr	r3, [pc, #320]	; (8000dec <MX_DFSDM1_Init+0x184>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000cb0:	4b4e      	ldr	r3, [pc, #312]	; (8000dec <MX_DFSDM1_Init+0x184>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000cb6:	4b4d      	ldr	r3, [pc, #308]	; (8000dec <MX_DFSDM1_Init+0x184>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000cbc:	484b      	ldr	r0, [pc, #300]	; (8000dec <MX_DFSDM1_Init+0x184>)
 8000cbe:	f004 f805 	bl	8004ccc <HAL_DFSDM_ChannelInit>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000cc8:	f001 fa9e 	bl	8002208 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000ccc:	4b49      	ldr	r3, [pc, #292]	; (8000df4 <MX_DFSDM1_Init+0x18c>)
 8000cce:	4a4a      	ldr	r2, [pc, #296]	; (8000df8 <MX_DFSDM1_Init+0x190>)
 8000cd0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000cd2:	4b48      	ldr	r3, [pc, #288]	; (8000df4 <MX_DFSDM1_Init+0x18c>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000cd8:	4b46      	ldr	r3, [pc, #280]	; (8000df4 <MX_DFSDM1_Init+0x18c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000cde:	4b45      	ldr	r3, [pc, #276]	; (8000df4 <MX_DFSDM1_Init+0x18c>)
 8000ce0:	2202      	movs	r2, #2
 8000ce2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000ce4:	4b43      	ldr	r3, [pc, #268]	; (8000df4 <MX_DFSDM1_Init+0x18c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000cea:	4b42      	ldr	r3, [pc, #264]	; (8000df4 <MX_DFSDM1_Init+0x18c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000cf0:	4b40      	ldr	r3, [pc, #256]	; (8000df4 <MX_DFSDM1_Init+0x18c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000cf6:	4b3f      	ldr	r3, [pc, #252]	; (8000df4 <MX_DFSDM1_Init+0x18c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000cfc:	4b3d      	ldr	r3, [pc, #244]	; (8000df4 <MX_DFSDM1_Init+0x18c>)
 8000cfe:	2204      	movs	r2, #4
 8000d00:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000d02:	4b3c      	ldr	r3, [pc, #240]	; (8000df4 <MX_DFSDM1_Init+0x18c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000d08:	4b3a      	ldr	r3, [pc, #232]	; (8000df4 <MX_DFSDM1_Init+0x18c>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000d0e:	4b39      	ldr	r3, [pc, #228]	; (8000df4 <MX_DFSDM1_Init+0x18c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000d14:	4b37      	ldr	r3, [pc, #220]	; (8000df4 <MX_DFSDM1_Init+0x18c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000d1a:	4836      	ldr	r0, [pc, #216]	; (8000df4 <MX_DFSDM1_Init+0x18c>)
 8000d1c:	f003 ffd6 	bl	8004ccc <HAL_DFSDM_ChannelInit>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_DFSDM1_Init+0xc2>
  {
    Error_Handler();
 8000d26:	f001 fa6f 	bl	8002208 <Error_Handler>
  }
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 8000d2a:	4b34      	ldr	r3, [pc, #208]	; (8000dfc <MX_DFSDM1_Init+0x194>)
 8000d2c:	4a34      	ldr	r2, [pc, #208]	; (8000e00 <MX_DFSDM1_Init+0x198>)
 8000d2e:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel3.Init.OutputClock.Activation = ENABLE;
 8000d30:	4b32      	ldr	r3, [pc, #200]	; (8000dfc <MX_DFSDM1_Init+0x194>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000d36:	4b31      	ldr	r3, [pc, #196]	; (8000dfc <MX_DFSDM1_Init+0x194>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel3.Init.OutputClock.Divider = 2;
 8000d3c:	4b2f      	ldr	r3, [pc, #188]	; (8000dfc <MX_DFSDM1_Init+0x194>)
 8000d3e:	2202      	movs	r2, #2
 8000d40:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000d42:	4b2e      	ldr	r3, [pc, #184]	; (8000dfc <MX_DFSDM1_Init+0x194>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000d48:	4b2c      	ldr	r3, [pc, #176]	; (8000dfc <MX_DFSDM1_Init+0x194>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000d4e:	4b2b      	ldr	r3, [pc, #172]	; (8000dfc <MX_DFSDM1_Init+0x194>)
 8000d50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d54:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000d56:	4b29      	ldr	r3, [pc, #164]	; (8000dfc <MX_DFSDM1_Init+0x194>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000d5c:	4b27      	ldr	r3, [pc, #156]	; (8000dfc <MX_DFSDM1_Init+0x194>)
 8000d5e:	2204      	movs	r2, #4
 8000d60:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000d62:	4b26      	ldr	r3, [pc, #152]	; (8000dfc <MX_DFSDM1_Init+0x194>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 8000d68:	4b24      	ldr	r3, [pc, #144]	; (8000dfc <MX_DFSDM1_Init+0x194>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel3.Init.Offset = 0;
 8000d6e:	4b23      	ldr	r3, [pc, #140]	; (8000dfc <MX_DFSDM1_Init+0x194>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel3.Init.RightBitShift = 0x00;
 8000d74:	4b21      	ldr	r3, [pc, #132]	; (8000dfc <MX_DFSDM1_Init+0x194>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
 8000d7a:	4820      	ldr	r0, [pc, #128]	; (8000dfc <MX_DFSDM1_Init+0x194>)
 8000d7c:	f003 ffa6 	bl	8004ccc <HAL_DFSDM_ChannelInit>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_DFSDM1_Init+0x122>
  {
    Error_Handler();
 8000d86:	f001 fa3f 	bl	8002208 <Error_Handler>
  }
  hdfsdm1_channel4.Instance = DFSDM1_Channel4;
 8000d8a:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <MX_DFSDM1_Init+0x19c>)
 8000d8c:	4a1e      	ldr	r2, [pc, #120]	; (8000e08 <MX_DFSDM1_Init+0x1a0>)
 8000d8e:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel4.Init.OutputClock.Activation = ENABLE;
 8000d90:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <MX_DFSDM1_Init+0x19c>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel4.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000d96:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <MX_DFSDM1_Init+0x19c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel4.Init.OutputClock.Divider = 2;
 8000d9c:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <MX_DFSDM1_Init+0x19c>)
 8000d9e:	2202      	movs	r2, #2
 8000da0:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel4.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000da2:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <MX_DFSDM1_Init+0x19c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel4.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000da8:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <MX_DFSDM1_Init+0x19c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel4.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <MX_DFSDM1_Init+0x19c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel4.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000db4:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <MX_DFSDM1_Init+0x19c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel4.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000dba:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <MX_DFSDM1_Init+0x19c>)
 8000dbc:	2204      	movs	r2, #4
 8000dbe:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel4.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000dc0:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <MX_DFSDM1_Init+0x19c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel4.Init.Awd.Oversampling = 1;
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <MX_DFSDM1_Init+0x19c>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel4.Init.Offset = 0;
 8000dcc:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <MX_DFSDM1_Init+0x19c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel4.Init.RightBitShift = 0x00;
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <MX_DFSDM1_Init+0x19c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel4) != HAL_OK)
 8000dd8:	480a      	ldr	r0, [pc, #40]	; (8000e04 <MX_DFSDM1_Init+0x19c>)
 8000dda:	f003 ff77 	bl	8004ccc <HAL_DFSDM_ChannelInit>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_DFSDM1_Init+0x180>
  {
    Error_Handler();
 8000de4:	f001 fa10 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000118 	.word	0x20000118
 8000df0:	40017020 	.word	0x40017020
 8000df4:	20000b4c 	.word	0x20000b4c
 8000df8:	40017040 	.word	0x40017040
 8000dfc:	20000434 	.word	0x20000434
 8000e00:	40017060 	.word	0x40017060
 8000e04:	20000364 	.word	0x20000364
 8000e08:	40017080 	.word	0x40017080

08000e0c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000e10:	4b22      	ldr	r3, [pc, #136]	; (8000e9c <MX_ETH_Init+0x90>)
 8000e12:	4a23      	ldr	r2, [pc, #140]	; (8000ea0 <MX_ETH_Init+0x94>)
 8000e14:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8000e16:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <MX_ETH_Init+0x90>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000e1e:	4b1f      	ldr	r3, [pc, #124]	; (8000e9c <MX_ETH_Init+0x90>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	3301      	adds	r3, #1
 8000e24:	2280      	movs	r2, #128	; 0x80
 8000e26:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000e28:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <MX_ETH_Init+0x90>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	3302      	adds	r3, #2
 8000e2e:	22e1      	movs	r2, #225	; 0xe1
 8000e30:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000e32:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <MX_ETH_Init+0x90>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	3303      	adds	r3, #3
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000e3c:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <MX_ETH_Init+0x90>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	3304      	adds	r3, #4
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <MX_ETH_Init+0x90>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	3305      	adds	r3, #5
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <MX_ETH_Init+0x90>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_ETH_Init+0x90>)
 8000e58:	4a12      	ldr	r2, [pc, #72]	; (8000ea4 <MX_ETH_Init+0x98>)
 8000e5a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <MX_ETH_Init+0x90>)
 8000e5e:	4a12      	ldr	r2, [pc, #72]	; (8000ea8 <MX_ETH_Init+0x9c>)
 8000e60:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MX_ETH_Init+0x90>)
 8000e64:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000e68:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000e6a:	480c      	ldr	r0, [pc, #48]	; (8000e9c <MX_ETH_Init+0x90>)
 8000e6c:	f004 f842 	bl	8004ef4 <HAL_ETH_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000e76:	f001 f9c7 	bl	8002208 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000e7a:	2234      	movs	r2, #52	; 0x34
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	480b      	ldr	r0, [pc, #44]	; (8000eac <MX_ETH_Init+0xa0>)
 8000e80:	f00d fc0b 	bl	800e69a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000e84:	4b09      	ldr	r3, [pc, #36]	; (8000eac <MX_ETH_Init+0xa0>)
 8000e86:	2221      	movs	r2, #33	; 0x21
 8000e88:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000e8a:	4b08      	ldr	r3, [pc, #32]	; (8000eac <MX_ETH_Init+0xa0>)
 8000e8c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e90:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <MX_ETH_Init+0xa0>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000a5c 	.word	0x20000a5c
 8000ea0:	40028000 	.word	0x40028000
 8000ea4:	20000070 	.word	0x20000070
 8000ea8:	20000010 	.word	0x20000010
 8000eac:	20000acc 	.word	0x20000acc

08000eb0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000eb4:	4b2e      	ldr	r3, [pc, #184]	; (8000f70 <MX_FDCAN1_Init+0xc0>)
 8000eb6:	4a2f      	ldr	r2, [pc, #188]	; (8000f74 <MX_FDCAN1_Init+0xc4>)
 8000eb8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000eba:	4b2d      	ldr	r3, [pc, #180]	; (8000f70 <MX_FDCAN1_Init+0xc0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000ec0:	4b2b      	ldr	r3, [pc, #172]	; (8000f70 <MX_FDCAN1_Init+0xc0>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000ec6:	4b2a      	ldr	r3, [pc, #168]	; (8000f70 <MX_FDCAN1_Init+0xc0>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000ecc:	4b28      	ldr	r3, [pc, #160]	; (8000f70 <MX_FDCAN1_Init+0xc0>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000ed2:	4b27      	ldr	r3, [pc, #156]	; (8000f70 <MX_FDCAN1_Init+0xc0>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000ed8:	4b25      	ldr	r3, [pc, #148]	; (8000f70 <MX_FDCAN1_Init+0xc0>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000ede:	4b24      	ldr	r3, [pc, #144]	; (8000f70 <MX_FDCAN1_Init+0xc0>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000ee4:	4b22      	ldr	r3, [pc, #136]	; (8000f70 <MX_FDCAN1_Init+0xc0>)
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000eea:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <MX_FDCAN1_Init+0xc0>)
 8000eec:	2202      	movs	r2, #2
 8000eee:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000ef0:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <MX_FDCAN1_Init+0xc0>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000ef6:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <MX_FDCAN1_Init+0xc0>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000efc:	4b1c      	ldr	r3, [pc, #112]	; (8000f70 <MX_FDCAN1_Init+0xc0>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000f02:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <MX_FDCAN1_Init+0xc0>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000f08:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <MX_FDCAN1_Init+0xc0>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000f0e:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <MX_FDCAN1_Init+0xc0>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000f14:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <MX_FDCAN1_Init+0xc0>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <MX_FDCAN1_Init+0xc0>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000f20:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <MX_FDCAN1_Init+0xc0>)
 8000f22:	2204      	movs	r2, #4
 8000f24:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000f26:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <MX_FDCAN1_Init+0xc0>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f2c:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <MX_FDCAN1_Init+0xc0>)
 8000f2e:	2204      	movs	r2, #4
 8000f30:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000f32:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <MX_FDCAN1_Init+0xc0>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000f38:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <MX_FDCAN1_Init+0xc0>)
 8000f3a:	2204      	movs	r2, #4
 8000f3c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <MX_FDCAN1_Init+0xc0>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000f44:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <MX_FDCAN1_Init+0xc0>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <MX_FDCAN1_Init+0xc0>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f50:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <MX_FDCAN1_Init+0xc0>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <MX_FDCAN1_Init+0xc0>)
 8000f58:	2204      	movs	r2, #4
 8000f5a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000f5c:	4804      	ldr	r0, [pc, #16]	; (8000f70 <MX_FDCAN1_Init+0xc0>)
 8000f5e:	f004 fbdf 	bl	8005720 <HAL_FDCAN_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000f68:	f001 f94e 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000790 	.word	0x20000790
 8000f74:	4000a000 	.word	0x4000a000

08000f78 <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b0a2      	sub	sp, #136	; 0x88
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8000f7e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8000f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f90:	2254      	movs	r2, #84	; 0x54
 8000f92:	2100      	movs	r1, #0
 8000f94:	4618      	mov	r0, r3
 8000f96:	f00d fb80 	bl	800e69a <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2220      	movs	r2, #32
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f00d fb7a 	bl	800e69a <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8000fa6:	4bb0      	ldr	r3, [pc, #704]	; (8001268 <MX_HRTIM_Init+0x2f0>)
 8000fa8:	4ab0      	ldr	r2, [pc, #704]	; (800126c <MX_HRTIM_Init+0x2f4>)
 8000faa:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8000fac:	4bae      	ldr	r3, [pc, #696]	; (8001268 <MX_HRTIM_Init+0x2f0>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8000fb2:	4bad      	ldr	r3, [pc, #692]	; (8001268 <MX_HRTIM_Init+0x2f0>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8000fb8:	48ab      	ldr	r0, [pc, #684]	; (8001268 <MX_HRTIM_Init+0x2f0>)
 8000fba:	f005 f8c9 	bl	8006150 <HAL_HRTIM_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_HRTIM_Init+0x50>
  {
    Error_Handler();
 8000fc4:	f001 f920 	bl	8002208 <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFFD;
 8000fc8:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8000fcc:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	67fb      	str	r3, [r7, #124]	; 0x7c
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 8000fd2:	2305      	movs	r3, #5
 8000fd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8000fd8:	2308      	movs	r3, #8
 8000fda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8000fde:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	48a0      	ldr	r0, [pc, #640]	; (8001268 <MX_HRTIM_Init+0x2f0>)
 8000fe8:	f005 f982 	bl	80062f0 <HAL_HRTIM_TimeBaseConfig>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_HRTIM_Init+0x7e>
  {
    Error_Handler();
 8000ff2:	f001 f909 	bl	8002208 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  pTimerCfg.DMASrcAddress = 0x0000;
 8000ffe:	2300      	movs	r3, #0
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMADstAddress = 0x0000;
 8001002:	2300      	movs	r3, #0
 8001004:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASize = 0x1;
 8001006:	2301      	movs	r3, #1
 8001008:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 800100a:	2300      	movs	r3, #0
 800100c:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 800100e:	2300      	movs	r3, #0
 8001010:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8001012:	2300      	movs	r3, #0
 8001014:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8001016:	2300      	movs	r3, #0
 8001018:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 800101a:	2300      	movs	r3, #0
 800101c:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 800101e:	2300      	movs	r3, #0
 8001020:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8001022:	2300      	movs	r3, #0
 8001024:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8001026:	2300      	movs	r3, #0
 8001028:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 800102a:	2300      	movs	r3, #0
 800102c:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 800102e:	2300      	movs	r3, #0
 8001030:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8001032:	2300      	movs	r3, #0
 8001034:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8001036:	2300      	movs	r3, #0
 8001038:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 800103a:	2300      	movs	r3, #0
 800103c:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 800103e:	2300      	movs	r3, #0
 8001040:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8001042:	2300      	movs	r3, #0
 8001044:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8001046:	2300      	movs	r3, #0
 8001048:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 800104a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104e:	461a      	mov	r2, r3
 8001050:	2100      	movs	r1, #0
 8001052:	4885      	ldr	r0, [pc, #532]	; (8001268 <MX_HRTIM_Init+0x2f0>)
 8001054:	f005 f974 	bl	8006340 <HAL_HRTIM_WaveformTimerConfig>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_HRTIM_Init+0xea>
  {
    Error_Handler();
 800105e:	f001 f8d3 	bl	8002208 <Error_Handler>
  }
  pTimerCfg.DMASrcAddress = 0x0000;
 8001062:	2300      	movs	r3, #0
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMADstAddress = 0x0000;
 8001066:	2300      	movs	r3, #0
 8001068:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASize = 0x1;
 800106a:	2301      	movs	r3, #1
 800106c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 800106e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001072:	461a      	mov	r2, r3
 8001074:	2101      	movs	r1, #1
 8001076:	487c      	ldr	r0, [pc, #496]	; (8001268 <MX_HRTIM_Init+0x2f0>)
 8001078:	f005 f962 	bl	8006340 <HAL_HRTIM_WaveformTimerConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_HRTIM_Init+0x10e>
  {
    Error_Handler();
 8001082:	f001 f8c1 	bl	8002208 <Error_Handler>
  }
  pTimerCfg.DMASrcAddress = 0x0000;
 8001086:	2300      	movs	r3, #0
 8001088:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMADstAddress = 0x0000;
 800108a:	2300      	movs	r3, #0
 800108c:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASize = 0x1;
 800108e:	2301      	movs	r3, #1
 8001090:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8001092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001096:	461a      	mov	r2, r3
 8001098:	2102      	movs	r1, #2
 800109a:	4873      	ldr	r0, [pc, #460]	; (8001268 <MX_HRTIM_Init+0x2f0>)
 800109c:	f005 f950 	bl	8006340 <HAL_HRTIM_WaveformTimerConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_HRTIM_Init+0x132>
  {
    Error_Handler();
 80010a6:	f001 f8af 	bl	8002208 <Error_Handler>
  }
  pTimerCfg.DMASrcAddress = 0x0000;
 80010aa:	2300      	movs	r3, #0
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMADstAddress = 0x0000;
 80010ae:	2300      	movs	r3, #0
 80010b0:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASize = 0x1;
 80010b2:	2301      	movs	r3, #1
 80010b4:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 80010b6:	2300      	movs	r3, #0
 80010b8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 80010ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010be:	461a      	mov	r2, r3
 80010c0:	2103      	movs	r1, #3
 80010c2:	4869      	ldr	r0, [pc, #420]	; (8001268 <MX_HRTIM_Init+0x2f0>)
 80010c4:	f005 f93c 	bl	8006340 <HAL_HRTIM_WaveformTimerConfig>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_HRTIM_Init+0x15a>
  {
    Error_Handler();
 80010ce:	f001 f89b 	bl	8002208 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_NONE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  pTimerCfg.DMASrcAddress = 0x0000;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMADstAddress = 0x0000;
 80010da:	2300      	movs	r3, #0
 80010dc:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASize = 0x1;
 80010de:	2301      	movs	r3, #1
 80010e0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 80010e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e6:	461a      	mov	r2, r3
 80010e8:	2104      	movs	r1, #4
 80010ea:	485f      	ldr	r0, [pc, #380]	; (8001268 <MX_HRTIM_Init+0x2f0>)
 80010ec:	f005 f928 	bl	8006340 <HAL_HRTIM_WaveformTimerConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_HRTIM_Init+0x182>
  {
    Error_Handler();
 80010f6:	f001 f887 	bl	8002208 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8001116:	2300      	movs	r3, #0
 8001118:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	2201      	movs	r2, #1
 800111e:	2100      	movs	r1, #0
 8001120:	4851      	ldr	r0, [pc, #324]	; (8001268 <MX_HRTIM_Init+0x2f0>)
 8001122:	f005 f97f 	bl	8006424 <HAL_HRTIM_WaveformOutputConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_HRTIM_Init+0x1b8>
  {
    Error_Handler();
 800112c:	f001 f86c 	bl	8002208 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	2204      	movs	r2, #4
 8001134:	2101      	movs	r1, #1
 8001136:	484c      	ldr	r0, [pc, #304]	; (8001268 <MX_HRTIM_Init+0x2f0>)
 8001138:	f005 f974 	bl	8006424 <HAL_HRTIM_WaveformOutputConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_HRTIM_Init+0x1ce>
  {
    Error_Handler();
 8001142:	f001 f861 	bl	8002208 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2210      	movs	r2, #16
 800114a:	2102      	movs	r1, #2
 800114c:	4846      	ldr	r0, [pc, #280]	; (8001268 <MX_HRTIM_Init+0x2f0>)
 800114e:	f005 f969 	bl	8006424 <HAL_HRTIM_WaveformOutputConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_HRTIM_Init+0x1e4>
  {
    Error_Handler();
 8001158:	f001 f856 	bl	8002208 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pOutputCfg) != HAL_OK)
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	2240      	movs	r2, #64	; 0x40
 8001160:	2103      	movs	r1, #3
 8001162:	4841      	ldr	r0, [pc, #260]	; (8001268 <MX_HRTIM_Init+0x2f0>)
 8001164:	f005 f95e 	bl	8006424 <HAL_HRTIM_WaveformOutputConfig>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_HRTIM_Init+0x1fa>
  {
    Error_Handler();
 800116e:	f001 f84b 	bl	8002208 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001178:	2104      	movs	r1, #4
 800117a:	483b      	ldr	r0, [pc, #236]	; (8001268 <MX_HRTIM_Init+0x2f0>)
 800117c:	f005 f952 	bl	8006424 <HAL_HRTIM_WaveformOutputConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_HRTIM_Init+0x212>
  {
    Error_Handler();
 8001186:	f001 f83f 	bl	8002208 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	2202      	movs	r2, #2
 800118e:	2100      	movs	r1, #0
 8001190:	4835      	ldr	r0, [pc, #212]	; (8001268 <MX_HRTIM_Init+0x2f0>)
 8001192:	f005 f947 	bl	8006424 <HAL_HRTIM_WaveformOutputConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_HRTIM_Init+0x228>
  {
    Error_Handler();
 800119c:	f001 f834 	bl	8002208 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	2208      	movs	r2, #8
 80011a4:	2101      	movs	r1, #1
 80011a6:	4830      	ldr	r0, [pc, #192]	; (8001268 <MX_HRTIM_Init+0x2f0>)
 80011a8:	f005 f93c 	bl	8006424 <HAL_HRTIM_WaveformOutputConfig>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_HRTIM_Init+0x23e>
  {
    Error_Handler();
 80011b2:	f001 f829 	bl	8002208 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	2220      	movs	r2, #32
 80011ba:	2102      	movs	r1, #2
 80011bc:	482a      	ldr	r0, [pc, #168]	; (8001268 <MX_HRTIM_Init+0x2f0>)
 80011be:	f005 f931 	bl	8006424 <HAL_HRTIM_WaveformOutputConfig>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_HRTIM_Init+0x254>
  {
    Error_Handler();
 80011c8:	f001 f81e 	bl	8002208 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2, &pOutputCfg) != HAL_OK)
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2280      	movs	r2, #128	; 0x80
 80011d0:	2103      	movs	r1, #3
 80011d2:	4825      	ldr	r0, [pc, #148]	; (8001268 <MX_HRTIM_Init+0x2f0>)
 80011d4:	f005 f926 	bl	8006424 <HAL_HRTIM_WaveformOutputConfig>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_HRTIM_Init+0x26a>
  {
    Error_Handler();
 80011de:	f001 f813 	bl	8002208 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE2, &pOutputCfg) != HAL_OK)
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011e8:	2104      	movs	r1, #4
 80011ea:	481f      	ldr	r0, [pc, #124]	; (8001268 <MX_HRTIM_Init+0x2f0>)
 80011ec:	f005 f91a 	bl	8006424 <HAL_HRTIM_WaveformOutputConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_HRTIM_Init+0x282>
  {
    Error_Handler();
 80011f6:	f001 f807 	bl	8002208 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 80011fa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80011fe:	461a      	mov	r2, r3
 8001200:	2101      	movs	r1, #1
 8001202:	4819      	ldr	r0, [pc, #100]	; (8001268 <MX_HRTIM_Init+0x2f0>)
 8001204:	f005 f874 	bl	80062f0 <HAL_HRTIM_TimeBaseConfig>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_HRTIM_Init+0x29a>
  {
    Error_Handler();
 800120e:	f000 fffb 	bl	8002208 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8001212:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001216:	461a      	mov	r2, r3
 8001218:	2102      	movs	r1, #2
 800121a:	4813      	ldr	r0, [pc, #76]	; (8001268 <MX_HRTIM_Init+0x2f0>)
 800121c:	f005 f868 	bl	80062f0 <HAL_HRTIM_TimeBaseConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_HRTIM_Init+0x2b2>
  {
    Error_Handler();
 8001226:	f000 ffef 	bl	8002208 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 800122a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800122e:	461a      	mov	r2, r3
 8001230:	2103      	movs	r1, #3
 8001232:	480d      	ldr	r0, [pc, #52]	; (8001268 <MX_HRTIM_Init+0x2f0>)
 8001234:	f005 f85c 	bl	80062f0 <HAL_HRTIM_TimeBaseConfig>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_HRTIM_Init+0x2ca>
  {
    Error_Handler();
 800123e:	f000 ffe3 	bl	8002208 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8001242:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001246:	461a      	mov	r2, r3
 8001248:	2104      	movs	r1, #4
 800124a:	4807      	ldr	r0, [pc, #28]	; (8001268 <MX_HRTIM_Init+0x2f0>)
 800124c:	f005 f850 	bl	80062f0 <HAL_HRTIM_TimeBaseConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_HRTIM_Init+0x2e2>
  {
    Error_Handler();
 8001256:	f000 ffd7 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 800125a:	4803      	ldr	r0, [pc, #12]	; (8001268 <MX_HRTIM_Init+0x2f0>)
 800125c:	f001 fa50 	bl	8002700 <HAL_HRTIM_MspPostInit>

}
 8001260:	bf00      	nop
 8001262:	3788      	adds	r7, #136	; 0x88
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000934 	.word	0x20000934
 800126c:	40017400 	.word	0x40017400

08001270 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001274:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <MX_I2C2_Init+0x74>)
 8001276:	4a1c      	ldr	r2, [pc, #112]	; (80012e8 <MX_I2C2_Init+0x78>)
 8001278:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 800127a:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <MX_I2C2_Init+0x74>)
 800127c:	4a1b      	ldr	r2, [pc, #108]	; (80012ec <MX_I2C2_Init+0x7c>)
 800127e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001280:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <MX_I2C2_Init+0x74>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001286:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <MX_I2C2_Init+0x74>)
 8001288:	2201      	movs	r2, #1
 800128a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800128c:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <MX_I2C2_Init+0x74>)
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <MX_I2C2_Init+0x74>)
 8001294:	2200      	movs	r2, #0
 8001296:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <MX_I2C2_Init+0x74>)
 800129a:	2200      	movs	r2, #0
 800129c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <MX_I2C2_Init+0x74>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <MX_I2C2_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012aa:	480e      	ldr	r0, [pc, #56]	; (80012e4 <MX_I2C2_Init+0x74>)
 80012ac:	f005 fc46 	bl	8006b3c <HAL_I2C_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80012b6:	f000 ffa7 	bl	8002208 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012ba:	2100      	movs	r1, #0
 80012bc:	4809      	ldr	r0, [pc, #36]	; (80012e4 <MX_I2C2_Init+0x74>)
 80012be:	f005 fccd 	bl	8006c5c <HAL_I2CEx_ConfigAnalogFilter>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80012c8:	f000 ff9e 	bl	8002208 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80012cc:	2100      	movs	r1, #0
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <MX_I2C2_Init+0x74>)
 80012d0:	f005 fd0f 	bl	8006cf2 <HAL_I2CEx_ConfigDigitalFilter>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80012da:	f000 ff95 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	2000039c 	.word	0x2000039c
 80012e8:	40005800 	.word	0x40005800
 80012ec:	307075b1 	.word	0x307075b1

080012f0 <MX_I2C3_SMBUS_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_SMBUS_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hsmbus3.Instance = I2C3;
 80012f4:	4b1d      	ldr	r3, [pc, #116]	; (800136c <MX_I2C3_SMBUS_Init+0x7c>)
 80012f6:	4a1e      	ldr	r2, [pc, #120]	; (8001370 <MX_I2C3_SMBUS_Init+0x80>)
 80012f8:	601a      	str	r2, [r3, #0]
  hsmbus3.Init.Timing = 0x307075B1;
 80012fa:	4b1c      	ldr	r3, [pc, #112]	; (800136c <MX_I2C3_SMBUS_Init+0x7c>)
 80012fc:	4a1d      	ldr	r2, [pc, #116]	; (8001374 <MX_I2C3_SMBUS_Init+0x84>)
 80012fe:	605a      	str	r2, [r3, #4]
  hsmbus3.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8001300:	4b1a      	ldr	r3, [pc, #104]	; (800136c <MX_I2C3_SMBUS_Init+0x7c>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  hsmbus3.Init.OwnAddress1 = 2;
 8001306:	4b19      	ldr	r3, [pc, #100]	; (800136c <MX_I2C3_SMBUS_Init+0x7c>)
 8001308:	2202      	movs	r2, #2
 800130a:	60da      	str	r2, [r3, #12]
  hsmbus3.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 800130c:	4b17      	ldr	r3, [pc, #92]	; (800136c <MX_I2C3_SMBUS_Init+0x7c>)
 800130e:	2201      	movs	r2, #1
 8001310:	611a      	str	r2, [r3, #16]
  hsmbus3.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8001312:	4b16      	ldr	r3, [pc, #88]	; (800136c <MX_I2C3_SMBUS_Init+0x7c>)
 8001314:	2200      	movs	r2, #0
 8001316:	615a      	str	r2, [r3, #20]
  hsmbus3.Init.OwnAddress2 = 0;
 8001318:	4b14      	ldr	r3, [pc, #80]	; (800136c <MX_I2C3_SMBUS_Init+0x7c>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
  hsmbus3.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <MX_I2C3_SMBUS_Init+0x7c>)
 8001320:	2200      	movs	r2, #0
 8001322:	61da      	str	r2, [r3, #28]
  hsmbus3.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <MX_I2C3_SMBUS_Init+0x7c>)
 8001326:	2200      	movs	r2, #0
 8001328:	621a      	str	r2, [r3, #32]
  hsmbus3.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <MX_I2C3_SMBUS_Init+0x7c>)
 800132c:	2200      	movs	r2, #0
 800132e:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus3.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8001330:	4b0e      	ldr	r3, [pc, #56]	; (800136c <MX_I2C3_SMBUS_Init+0x7c>)
 8001332:	2200      	movs	r2, #0
 8001334:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus3.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <MX_I2C3_SMBUS_Init+0x7c>)
 8001338:	2200      	movs	r2, #0
 800133a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus3.Init.SMBusTimeout = 0x000085B8;
 800133c:	4b0b      	ldr	r3, [pc, #44]	; (800136c <MX_I2C3_SMBUS_Init+0x7c>)
 800133e:	f248 52b8 	movw	r2, #34232	; 0x85b8
 8001342:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus3) != HAL_OK)
 8001344:	4809      	ldr	r0, [pc, #36]	; (800136c <MX_I2C3_SMBUS_Init+0x7c>)
 8001346:	f009 ff95 	bl	800b274 <HAL_SMBUS_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_I2C3_SMBUS_Init+0x64>
  {
    Error_Handler();
 8001350:	f000 ff5a 	bl	8002208 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_SMBUS_ConfigDigitalFilter(&hsmbus3, 0) != HAL_OK)
 8001354:	2100      	movs	r1, #0
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_I2C3_SMBUS_Init+0x7c>)
 8001358:	f00a f844 	bl	800b3e4 <HAL_SMBUS_ConfigDigitalFilter>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_I2C3_SMBUS_Init+0x76>
  {
    Error_Handler();
 8001362:	f000 ff51 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000b84 	.word	0x20000b84
 8001370:	40005c00 	.word	0x40005c00
 8001374:	307075b1 	.word	0x307075b1

08001378 <MX_LPTIM2_Init>:
  * @brief LPTIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM2_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 800137c:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <MX_LPTIM2_Init+0x60>)
 800137e:	4a17      	ldr	r2, [pc, #92]	; (80013dc <MX_LPTIM2_Init+0x64>)
 8001380:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <MX_LPTIM2_Init+0x60>)
 8001384:	2200      	movs	r2, #0
 8001386:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001388:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <MX_LPTIM2_Init+0x60>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  hlptim2.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <MX_LPTIM2_Init+0x60>)
 8001390:	2200      	movs	r2, #0
 8001392:	60da      	str	r2, [r3, #12]
  hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8001394:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <MX_LPTIM2_Init+0x60>)
 8001396:	2200      	movs	r2, #0
 8001398:	611a      	str	r2, [r3, #16]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800139a:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <MX_LPTIM2_Init+0x60>)
 800139c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013a0:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80013a2:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <MX_LPTIM2_Init+0x60>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <MX_LPTIM2_Init+0x60>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <MX_LPTIM2_Init+0x60>)
 80013b0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80013b4:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <MX_LPTIM2_Init+0x60>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <MX_LPTIM2_Init+0x60>)
 80013be:	2200      	movs	r2, #0
 80013c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_LPTIM2_Init+0x60>)
 80013c4:	f005 fce2 	bl	8006d8c <HAL_LPTIM_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_LPTIM2_Init+0x5a>
  {
    Error_Handler();
 80013ce:	f000 ff1b 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000758 	.word	0x20000758
 80013dc:	58002400 	.word	0x58002400

080013e0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b09a      	sub	sp, #104	; 0x68
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80013e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013ea:	2234      	movs	r2, #52	; 0x34
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f00d f953 	bl	800e69a <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80013f4:	463b      	mov	r3, r7
 80013f6:	2234      	movs	r2, #52	; 0x34
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f00d f94d 	bl	800e69a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001400:	4b4e      	ldr	r3, [pc, #312]	; (800153c <MX_LTDC_Init+0x15c>)
 8001402:	4a4f      	ldr	r2, [pc, #316]	; (8001540 <MX_LTDC_Init+0x160>)
 8001404:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001406:	4b4d      	ldr	r3, [pc, #308]	; (800153c <MX_LTDC_Init+0x15c>)
 8001408:	2200      	movs	r2, #0
 800140a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800140c:	4b4b      	ldr	r3, [pc, #300]	; (800153c <MX_LTDC_Init+0x15c>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001412:	4b4a      	ldr	r3, [pc, #296]	; (800153c <MX_LTDC_Init+0x15c>)
 8001414:	2200      	movs	r2, #0
 8001416:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001418:	4b48      	ldr	r3, [pc, #288]	; (800153c <MX_LTDC_Init+0x15c>)
 800141a:	2200      	movs	r2, #0
 800141c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800141e:	4b47      	ldr	r3, [pc, #284]	; (800153c <MX_LTDC_Init+0x15c>)
 8001420:	2207      	movs	r2, #7
 8001422:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001424:	4b45      	ldr	r3, [pc, #276]	; (800153c <MX_LTDC_Init+0x15c>)
 8001426:	2203      	movs	r2, #3
 8001428:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800142a:	4b44      	ldr	r3, [pc, #272]	; (800153c <MX_LTDC_Init+0x15c>)
 800142c:	220e      	movs	r2, #14
 800142e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001430:	4b42      	ldr	r3, [pc, #264]	; (800153c <MX_LTDC_Init+0x15c>)
 8001432:	2205      	movs	r2, #5
 8001434:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8001436:	4b41      	ldr	r3, [pc, #260]	; (800153c <MX_LTDC_Init+0x15c>)
 8001438:	f240 228e 	movw	r2, #654	; 0x28e
 800143c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800143e:	4b3f      	ldr	r3, [pc, #252]	; (800153c <MX_LTDC_Init+0x15c>)
 8001440:	f240 12e5 	movw	r2, #485	; 0x1e5
 8001444:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8001446:	4b3d      	ldr	r3, [pc, #244]	; (800153c <MX_LTDC_Init+0x15c>)
 8001448:	f44f 7225 	mov.w	r2, #660	; 0x294
 800144c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 800144e:	4b3b      	ldr	r3, [pc, #236]	; (800153c <MX_LTDC_Init+0x15c>)
 8001450:	f240 12e7 	movw	r2, #487	; 0x1e7
 8001454:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001456:	4b39      	ldr	r3, [pc, #228]	; (800153c <MX_LTDC_Init+0x15c>)
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800145e:	4b37      	ldr	r3, [pc, #220]	; (800153c <MX_LTDC_Init+0x15c>)
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001466:	4b35      	ldr	r3, [pc, #212]	; (800153c <MX_LTDC_Init+0x15c>)
 8001468:	2200      	movs	r2, #0
 800146a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800146e:	4833      	ldr	r0, [pc, #204]	; (800153c <MX_LTDC_Init+0x15c>)
 8001470:	f005 fd2e 	bl	8006ed0 <HAL_LTDC_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800147a:	f000 fec5 	bl	8002208 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800148e:	2300      	movs	r3, #0
 8001490:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800149a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800149e:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80014a0:	2305      	movs	r3, #5
 80014a2:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80014c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014c6:	2200      	movs	r2, #0
 80014c8:	4619      	mov	r1, r3
 80014ca:	481c      	ldr	r0, [pc, #112]	; (800153c <MX_LTDC_Init+0x15c>)
 80014cc:	f005 fdd0 	bl	8007070 <HAL_LTDC_ConfigLayer>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80014d6:	f000 fe97 	bl	8002208 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80014f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014fa:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80014fc:	2305      	movs	r3, #5
 80014fe:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800151e:	463b      	mov	r3, r7
 8001520:	2201      	movs	r2, #1
 8001522:	4619      	mov	r1, r3
 8001524:	4805      	ldr	r0, [pc, #20]	; (800153c <MX_LTDC_Init+0x15c>)
 8001526:	f005 fda3 	bl	8007070 <HAL_LTDC_ConfigLayer>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001530:	f000 fe6a 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001534:	bf00      	nop
 8001536:	3768      	adds	r7, #104	; 0x68
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200005c0 	.word	0x200005c0
 8001540:	50001000 	.word	0x50001000

08001544 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <MX_SDMMC2_SD_Init+0x44>)
 800154a:	4a10      	ldr	r2, [pc, #64]	; (800158c <MX_SDMMC2_SD_Init+0x48>)
 800154c:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_SDMMC2_SD_Init+0x44>)
 8001550:	2200      	movs	r2, #0
 8001552:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <MX_SDMMC2_SD_Init+0x44>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800155a:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <MX_SDMMC2_SD_Init+0x44>)
 800155c:	2200      	movs	r2, #0
 800155e:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_SDMMC2_SD_Init+0x44>)
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <MX_SDMMC2_SD_Init+0x44>)
 8001568:	2200      	movs	r2, #0
 800156a:	615a      	str	r2, [r3, #20]
  hsd2.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_SDMMC2_SD_Init+0x44>)
 800156e:	2201      	movs	r2, #1
 8001570:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd2) != HAL_OK)
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <MX_SDMMC2_SD_Init+0x44>)
 8001574:	f008 fe06 	bl	800a184 <HAL_SD_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_SDMMC2_SD_Init+0x3e>
  {
    Error_Handler();
 800157e:	f000 fe43 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000540 	.word	0x20000540
 800158c:	48022400 	.word	0x48022400

08001590 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001594:	4b27      	ldr	r3, [pc, #156]	; (8001634 <MX_SPI3_Init+0xa4>)
 8001596:	4a28      	ldr	r2, [pc, #160]	; (8001638 <MX_SPI3_Init+0xa8>)
 8001598:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800159a:	4b26      	ldr	r3, [pc, #152]	; (8001634 <MX_SPI3_Init+0xa4>)
 800159c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80015a0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80015a2:	4b24      	ldr	r3, [pc, #144]	; (8001634 <MX_SPI3_Init+0xa4>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80015a8:	4b22      	ldr	r3, [pc, #136]	; (8001634 <MX_SPI3_Init+0xa4>)
 80015aa:	2203      	movs	r2, #3
 80015ac:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015ae:	4b21      	ldr	r3, [pc, #132]	; (8001634 <MX_SPI3_Init+0xa4>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015b4:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <MX_SPI3_Init+0xa4>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80015ba:	4b1e      	ldr	r3, [pc, #120]	; (8001634 <MX_SPI3_Init+0xa4>)
 80015bc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80015c0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80015c2:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <MX_SPI3_Init+0xa4>)
 80015c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015c8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ca:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <MX_SPI3_Init+0xa4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80015d0:	4b18      	ldr	r3, [pc, #96]	; (8001634 <MX_SPI3_Init+0xa4>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <MX_SPI3_Init+0xa4>)
 80015d8:	2200      	movs	r2, #0
 80015da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80015dc:	4b15      	ldr	r3, [pc, #84]	; (8001634 <MX_SPI3_Init+0xa4>)
 80015de:	2200      	movs	r2, #0
 80015e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015e2:	4b14      	ldr	r3, [pc, #80]	; (8001634 <MX_SPI3_Init+0xa4>)
 80015e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015e8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <MX_SPI3_Init+0xa4>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80015f0:	4b10      	ldr	r3, [pc, #64]	; (8001634 <MX_SPI3_Init+0xa4>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015f6:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <MX_SPI3_Init+0xa4>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015fc:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <MX_SPI3_Init+0xa4>)
 80015fe:	2200      	movs	r2, #0
 8001600:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <MX_SPI3_Init+0xa4>)
 8001604:	2200      	movs	r2, #0
 8001606:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001608:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <MX_SPI3_Init+0xa4>)
 800160a:	2200      	movs	r2, #0
 800160c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <MX_SPI3_Init+0xa4>)
 8001610:	2200      	movs	r2, #0
 8001612:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001614:	4b07      	ldr	r3, [pc, #28]	; (8001634 <MX_SPI3_Init+0xa4>)
 8001616:	2200      	movs	r2, #0
 8001618:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <MX_SPI3_Init+0xa4>)
 800161c:	2200      	movs	r2, #0
 800161e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001620:	4804      	ldr	r0, [pc, #16]	; (8001634 <MX_SPI3_Init+0xa4>)
 8001622:	f009 ff27 	bl	800b474 <HAL_SPI_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 800162c:	f000 fdec 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	200004b8 	.word	0x200004b8
 8001638:	40003c00 	.word	0x40003c00

0800163c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b096      	sub	sp, #88	; 0x58
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001642:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800164e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
 800165c:	611a      	str	r2, [r3, #16]
 800165e:	615a      	str	r2, [r3, #20]
 8001660:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	222c      	movs	r2, #44	; 0x2c
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f00d f816 	bl	800e69a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800166e:	4b45      	ldr	r3, [pc, #276]	; (8001784 <MX_TIM1_Init+0x148>)
 8001670:	4a45      	ldr	r2, [pc, #276]	; (8001788 <MX_TIM1_Init+0x14c>)
 8001672:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001674:	4b43      	ldr	r3, [pc, #268]	; (8001784 <MX_TIM1_Init+0x148>)
 8001676:	2200      	movs	r2, #0
 8001678:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167a:	4b42      	ldr	r3, [pc, #264]	; (8001784 <MX_TIM1_Init+0x148>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001680:	4b40      	ldr	r3, [pc, #256]	; (8001784 <MX_TIM1_Init+0x148>)
 8001682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001686:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001688:	4b3e      	ldr	r3, [pc, #248]	; (8001784 <MX_TIM1_Init+0x148>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800168e:	4b3d      	ldr	r3, [pc, #244]	; (8001784 <MX_TIM1_Init+0x148>)
 8001690:	2200      	movs	r2, #0
 8001692:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001694:	4b3b      	ldr	r3, [pc, #236]	; (8001784 <MX_TIM1_Init+0x148>)
 8001696:	2200      	movs	r2, #0
 8001698:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800169a:	483a      	ldr	r0, [pc, #232]	; (8001784 <MX_TIM1_Init+0x148>)
 800169c:	f00a f854 	bl	800b748 <HAL_TIM_PWM_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80016a6:	f000 fdaf 	bl	8002208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016aa:	2300      	movs	r3, #0
 80016ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016ae:	2300      	movs	r3, #0
 80016b0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016ba:	4619      	mov	r1, r3
 80016bc:	4831      	ldr	r0, [pc, #196]	; (8001784 <MX_TIM1_Init+0x148>)
 80016be:	f00b f8b3 	bl	800c828 <HAL_TIMEx_MasterConfigSynchronization>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80016c8:	f000 fd9e 	bl	8002208 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016cc:	2360      	movs	r3, #96	; 0x60
 80016ce:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d4:	2300      	movs	r3, #0
 80016d6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016d8:	2300      	movs	r3, #0
 80016da:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016dc:	2300      	movs	r3, #0
 80016de:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016e0:	2300      	movs	r3, #0
 80016e2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016e4:	2300      	movs	r3, #0
 80016e6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016ec:	2200      	movs	r2, #0
 80016ee:	4619      	mov	r1, r3
 80016f0:	4824      	ldr	r0, [pc, #144]	; (8001784 <MX_TIM1_Init+0x148>)
 80016f2:	f00a f96b 	bl	800b9cc <HAL_TIM_PWM_ConfigChannel>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80016fc:	f000 fd84 	bl	8002208 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001700:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001704:	2204      	movs	r2, #4
 8001706:	4619      	mov	r1, r3
 8001708:	481e      	ldr	r0, [pc, #120]	; (8001784 <MX_TIM1_Init+0x148>)
 800170a:	f00a f95f 	bl	800b9cc <HAL_TIM_PWM_ConfigChannel>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001714:	f000 fd78 	bl	8002208 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001718:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800171c:	2208      	movs	r2, #8
 800171e:	4619      	mov	r1, r3
 8001720:	4818      	ldr	r0, [pc, #96]	; (8001784 <MX_TIM1_Init+0x148>)
 8001722:	f00a f953 	bl	800b9cc <HAL_TIM_PWM_ConfigChannel>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 800172c:	f000 fd6c 	bl	8002208 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001730:	2300      	movs	r3, #0
 8001732:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001744:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001748:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800174e:	2300      	movs	r3, #0
 8001750:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001752:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	4619      	mov	r1, r3
 8001764:	4807      	ldr	r0, [pc, #28]	; (8001784 <MX_TIM1_Init+0x148>)
 8001766:	f00b f8e7 	bl	800c938 <HAL_TIMEx_ConfigBreakDeadTime>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001770:	f000 fd4a 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001774:	4803      	ldr	r0, [pc, #12]	; (8001784 <MX_TIM1_Init+0x148>)
 8001776:	f001 fc55 	bl	8003024 <HAL_TIM_MspPostInit>

}
 800177a:	bf00      	nop
 800177c:	3758      	adds	r7, #88	; 0x58
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000830 	.word	0x20000830
 8001788:	40010000 	.word	0x40010000

0800178c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b094      	sub	sp, #80	; 0x50
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001792:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
 80017a0:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80017a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b0:	f107 0320 	add.w	r3, r7, #32
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
 80017c8:	611a      	str	r2, [r3, #16]
 80017ca:	615a      	str	r2, [r3, #20]
 80017cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017ce:	4b42      	ldr	r3, [pc, #264]	; (80018d8 <MX_TIM4_Init+0x14c>)
 80017d0:	4a42      	ldr	r2, [pc, #264]	; (80018dc <MX_TIM4_Init+0x150>)
 80017d2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80017d4:	4b40      	ldr	r3, [pc, #256]	; (80018d8 <MX_TIM4_Init+0x14c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017da:	4b3f      	ldr	r3, [pc, #252]	; (80018d8 <MX_TIM4_Init+0x14c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80017e0:	4b3d      	ldr	r3, [pc, #244]	; (80018d8 <MX_TIM4_Init+0x14c>)
 80017e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017e6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e8:	4b3b      	ldr	r3, [pc, #236]	; (80018d8 <MX_TIM4_Init+0x14c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ee:	4b3a      	ldr	r3, [pc, #232]	; (80018d8 <MX_TIM4_Init+0x14c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80017f4:	4838      	ldr	r0, [pc, #224]	; (80018d8 <MX_TIM4_Init+0x14c>)
 80017f6:	f009 ffa7 	bl	800b748 <HAL_TIM_PWM_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001800:	f000 fd02 	bl	8002208 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001804:	4834      	ldr	r0, [pc, #208]	; (80018d8 <MX_TIM4_Init+0x14c>)
 8001806:	f009 fff6 	bl	800b7f6 <HAL_TIM_IC_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001810:	f000 fcfa 	bl	8002208 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001814:	2304      	movs	r3, #4
 8001816:	63fb      	str	r3, [r7, #60]	; 0x3c
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8001818:	2360      	movs	r3, #96	; 0x60
 800181a:	643b      	str	r3, [r7, #64]	; 0x40
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800181c:	2302      	movs	r3, #2
 800181e:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001820:	2300      	movs	r3, #0
 8001822:	64bb      	str	r3, [r7, #72]	; 0x48
  sSlaveConfig.TriggerFilter = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001828:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800182c:	4619      	mov	r1, r3
 800182e:	482a      	ldr	r0, [pc, #168]	; (80018d8 <MX_TIM4_Init+0x14c>)
 8001830:	f00a f9dc 	bl	800bbec <HAL_TIM_SlaveConfigSynchro>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800183a:	f000 fce5 	bl	8002208 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800183e:	2300      	movs	r3, #0
 8001840:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001842:	2302      	movs	r3, #2
 8001844:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001846:	2300      	movs	r3, #0
 8001848:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICFilter = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800184e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001852:	2200      	movs	r2, #0
 8001854:	4619      	mov	r1, r3
 8001856:	4820      	ldr	r0, [pc, #128]	; (80018d8 <MX_TIM4_Init+0x14c>)
 8001858:	f00a f824 	bl	800b8a4 <HAL_TIM_IC_ConfigChannel>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8001862:	f000 fcd1 	bl	8002208 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001866:	2302      	movs	r3, #2
 8001868:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800186a:	2301      	movs	r3, #1
 800186c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800186e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001872:	2204      	movs	r2, #4
 8001874:	4619      	mov	r1, r3
 8001876:	4818      	ldr	r0, [pc, #96]	; (80018d8 <MX_TIM4_Init+0x14c>)
 8001878:	f00a f814 	bl	800b8a4 <HAL_TIM_IC_ConfigChannel>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM4_Init+0xfa>
  {
    Error_Handler();
 8001882:	f000 fcc1 	bl	8002208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001886:	2300      	movs	r3, #0
 8001888:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800188e:	f107 0320 	add.w	r3, r7, #32
 8001892:	4619      	mov	r1, r3
 8001894:	4810      	ldr	r0, [pc, #64]	; (80018d8 <MX_TIM4_Init+0x14c>)
 8001896:	f00a ffc7 	bl	800c828 <HAL_TIMEx_MasterConfigSynchronization>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 80018a0:	f000 fcb2 	bl	8002208 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018a4:	2360      	movs	r3, #96	; 0x60
 80018a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	2208      	movs	r2, #8
 80018b8:	4619      	mov	r1, r3
 80018ba:	4807      	ldr	r0, [pc, #28]	; (80018d8 <MX_TIM4_Init+0x14c>)
 80018bc:	f00a f886 	bl	800b9cc <HAL_TIM_PWM_ConfigChannel>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM4_Init+0x13e>
  {
    Error_Handler();
 80018c6:	f000 fc9f 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80018ca:	4803      	ldr	r0, [pc, #12]	; (80018d8 <MX_TIM4_Init+0x14c>)
 80018cc:	f001 fbaa 	bl	8003024 <HAL_TIM_MspPostInit>

}
 80018d0:	bf00      	nop
 80018d2:	3750      	adds	r7, #80	; 0x50
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000228 	.word	0x20000228
 80018dc:	40000800 	.word	0x40000800

080018e0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08c      	sub	sp, #48	; 0x30
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80018e6:	f107 031c 	add.w	r3, r7, #28
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]
 80018f4:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80018f6:	f107 030c 	add.w	r3, r7, #12
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001904:	463b      	mov	r3, r7
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800190e:	4b33      	ldr	r3, [pc, #204]	; (80019dc <MX_TIM5_Init+0xfc>)
 8001910:	4a33      	ldr	r2, [pc, #204]	; (80019e0 <MX_TIM5_Init+0x100>)
 8001912:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001914:	4b31      	ldr	r3, [pc, #196]	; (80019dc <MX_TIM5_Init+0xfc>)
 8001916:	2200      	movs	r2, #0
 8001918:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800191a:	4b30      	ldr	r3, [pc, #192]	; (80019dc <MX_TIM5_Init+0xfc>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001920:	4b2e      	ldr	r3, [pc, #184]	; (80019dc <MX_TIM5_Init+0xfc>)
 8001922:	f04f 32ff 	mov.w	r2, #4294967295
 8001926:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001928:	4b2c      	ldr	r3, [pc, #176]	; (80019dc <MX_TIM5_Init+0xfc>)
 800192a:	2200      	movs	r2, #0
 800192c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192e:	4b2b      	ldr	r3, [pc, #172]	; (80019dc <MX_TIM5_Init+0xfc>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001934:	4829      	ldr	r0, [pc, #164]	; (80019dc <MX_TIM5_Init+0xfc>)
 8001936:	f009 ff5e 	bl	800b7f6 <HAL_TIM_IC_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8001940:	f000 fc62 	bl	8002208 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001944:	2304      	movs	r3, #4
 8001946:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001948:	2350      	movs	r3, #80	; 0x50
 800194a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800194c:	2300      	movs	r3, #0
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001950:	2300      	movs	r3, #0
 8001952:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8001958:	f107 031c 	add.w	r3, r7, #28
 800195c:	4619      	mov	r1, r3
 800195e:	481f      	ldr	r0, [pc, #124]	; (80019dc <MX_TIM5_Init+0xfc>)
 8001960:	f00a f944 	bl	800bbec <HAL_TIM_SlaveConfigSynchro>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 800196a:	f000 fc4d 	bl	8002208 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001972:	2301      	movs	r3, #1
 8001974:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800197e:	f107 030c 	add.w	r3, r7, #12
 8001982:	2200      	movs	r2, #0
 8001984:	4619      	mov	r1, r3
 8001986:	4815      	ldr	r0, [pc, #84]	; (80019dc <MX_TIM5_Init+0xfc>)
 8001988:	f009 ff8c 	bl	800b8a4 <HAL_TIM_IC_ConfigChannel>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_TIM5_Init+0xb6>
  {
    Error_Handler();
 8001992:	f000 fc39 	bl	8002208 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001996:	2302      	movs	r3, #2
 8001998:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800199a:	2302      	movs	r3, #2
 800199c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800199e:	f107 030c 	add.w	r3, r7, #12
 80019a2:	2204      	movs	r2, #4
 80019a4:	4619      	mov	r1, r3
 80019a6:	480d      	ldr	r0, [pc, #52]	; (80019dc <MX_TIM5_Init+0xfc>)
 80019a8:	f009 ff7c 	bl	800b8a4 <HAL_TIM_IC_ConfigChannel>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80019b2:	f000 fc29 	bl	8002208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b6:	2300      	movs	r3, #0
 80019b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80019be:	463b      	mov	r3, r7
 80019c0:	4619      	mov	r1, r3
 80019c2:	4806      	ldr	r0, [pc, #24]	; (80019dc <MX_TIM5_Init+0xfc>)
 80019c4:	f00a ff30 	bl	800c828 <HAL_TIMEx_MasterConfigSynchronization>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 80019ce:	f000 fc1b 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80019d2:	bf00      	nop
 80019d4:	3730      	adds	r7, #48	; 0x30
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	2000046c 	.word	0x2000046c
 80019e0:	40000c00 	.word	0x40000c00

080019e4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b096      	sub	sp, #88	; 0x58
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	60da      	str	r2, [r3, #12]
 8001a04:	611a      	str	r2, [r3, #16]
 8001a06:	615a      	str	r2, [r3, #20]
 8001a08:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	222c      	movs	r2, #44	; 0x2c
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f00c fe42 	bl	800e69a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001a16:	4b4b      	ldr	r3, [pc, #300]	; (8001b44 <MX_TIM8_Init+0x160>)
 8001a18:	4a4b      	ldr	r2, [pc, #300]	; (8001b48 <MX_TIM8_Init+0x164>)
 8001a1a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001a1c:	4b49      	ldr	r3, [pc, #292]	; (8001b44 <MX_TIM8_Init+0x160>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a22:	4b48      	ldr	r3, [pc, #288]	; (8001b44 <MX_TIM8_Init+0x160>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001a28:	4b46      	ldr	r3, [pc, #280]	; (8001b44 <MX_TIM8_Init+0x160>)
 8001a2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a2e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a30:	4b44      	ldr	r3, [pc, #272]	; (8001b44 <MX_TIM8_Init+0x160>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a36:	4b43      	ldr	r3, [pc, #268]	; (8001b44 <MX_TIM8_Init+0x160>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a3c:	4b41      	ldr	r3, [pc, #260]	; (8001b44 <MX_TIM8_Init+0x160>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001a42:	4840      	ldr	r0, [pc, #256]	; (8001b44 <MX_TIM8_Init+0x160>)
 8001a44:	f009 fe80 	bl	800b748 <HAL_TIM_PWM_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001a4e:	f000 fbdb 	bl	8002208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a52:	2300      	movs	r3, #0
 8001a54:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a56:	2300      	movs	r3, #0
 8001a58:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a5e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a62:	4619      	mov	r1, r3
 8001a64:	4837      	ldr	r0, [pc, #220]	; (8001b44 <MX_TIM8_Init+0x160>)
 8001a66:	f00a fedf 	bl	800c828 <HAL_TIMEx_MasterConfigSynchronization>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001a70:	f000 fbca 	bl	8002208 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a74:	2360      	movs	r3, #96	; 0x60
 8001a76:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a80:	2300      	movs	r3, #0
 8001a82:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a84:	2300      	movs	r3, #0
 8001a86:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a94:	2200      	movs	r2, #0
 8001a96:	4619      	mov	r1, r3
 8001a98:	482a      	ldr	r0, [pc, #168]	; (8001b44 <MX_TIM8_Init+0x160>)
 8001a9a:	f009 ff97 	bl	800b9cc <HAL_TIM_PWM_ConfigChannel>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001aa4:	f000 fbb0 	bl	8002208 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001aa8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001aac:	2204      	movs	r2, #4
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4824      	ldr	r0, [pc, #144]	; (8001b44 <MX_TIM8_Init+0x160>)
 8001ab2:	f009 ff8b 	bl	800b9cc <HAL_TIM_PWM_ConfigChannel>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8001abc:	f000 fba4 	bl	8002208 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ac0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ac4:	2208      	movs	r2, #8
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	481e      	ldr	r0, [pc, #120]	; (8001b44 <MX_TIM8_Init+0x160>)
 8001aca:	f009 ff7f 	bl	800b9cc <HAL_TIM_PWM_ConfigChannel>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8001ad4:	f000 fb98 	bl	8002208 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ad8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001adc:	220c      	movs	r2, #12
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4818      	ldr	r0, [pc, #96]	; (8001b44 <MX_TIM8_Init+0x160>)
 8001ae2:	f009 ff73 	bl	800b9cc <HAL_TIM_PWM_ConfigChannel>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_TIM8_Init+0x10c>
  {
    Error_Handler();
 8001aec:	f000 fb8c 	bl	8002208 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b08:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001b20:	1d3b      	adds	r3, r7, #4
 8001b22:	4619      	mov	r1, r3
 8001b24:	4807      	ldr	r0, [pc, #28]	; (8001b44 <MX_TIM8_Init+0x160>)
 8001b26:	f00a ff07 	bl	800c938 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM8_Init+0x150>
  {
    Error_Handler();
 8001b30:	f000 fb6a 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001b34:	4803      	ldr	r0, [pc, #12]	; (8001b44 <MX_TIM8_Init+0x160>)
 8001b36:	f001 fa75 	bl	8003024 <HAL_TIM_MspPostInit>

}
 8001b3a:	bf00      	nop
 8001b3c:	3758      	adds	r7, #88	; 0x58
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	200001dc 	.word	0x200001dc
 8001b48:	40010400 	.word	0x40010400

08001b4c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
 8001b60:	615a      	str	r2, [r3, #20]
 8001b62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001b64:	4b1f      	ldr	r3, [pc, #124]	; (8001be4 <MX_TIM12_Init+0x98>)
 8001b66:	4a20      	ldr	r2, [pc, #128]	; (8001be8 <MX_TIM12_Init+0x9c>)
 8001b68:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001b6a:	4b1e      	ldr	r3, [pc, #120]	; (8001be4 <MX_TIM12_Init+0x98>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b70:	4b1c      	ldr	r3, [pc, #112]	; (8001be4 <MX_TIM12_Init+0x98>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001b76:	4b1b      	ldr	r3, [pc, #108]	; (8001be4 <MX_TIM12_Init+0x98>)
 8001b78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b7c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b7e:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <MX_TIM12_Init+0x98>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b84:	4b17      	ldr	r3, [pc, #92]	; (8001be4 <MX_TIM12_Init+0x98>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001b8a:	4816      	ldr	r0, [pc, #88]	; (8001be4 <MX_TIM12_Init+0x98>)
 8001b8c:	f009 fddc 	bl	800b748 <HAL_TIM_PWM_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001b96:	f000 fb37 	bl	8002208 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b9a:	2360      	movs	r3, #96	; 0x60
 8001b9c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	2200      	movs	r2, #0
 8001bae:	4619      	mov	r1, r3
 8001bb0:	480c      	ldr	r0, [pc, #48]	; (8001be4 <MX_TIM12_Init+0x98>)
 8001bb2:	f009 ff0b 	bl	800b9cc <HAL_TIM_PWM_ConfigChannel>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001bbc:	f000 fb24 	bl	8002208 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	2204      	movs	r2, #4
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4807      	ldr	r0, [pc, #28]	; (8001be4 <MX_TIM12_Init+0x98>)
 8001bc8:	f009 ff00 	bl	800b9cc <HAL_TIM_PWM_ConfigChannel>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8001bd2:	f000 fb19 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001bd6:	4803      	ldr	r0, [pc, #12]	; (8001be4 <MX_TIM12_Init+0x98>)
 8001bd8:	f001 fa24 	bl	8003024 <HAL_TIM_MspPostInit>

}
 8001bdc:	bf00      	nop
 8001bde:	3720      	adds	r7, #32
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20000a10 	.word	0x20000a10
 8001be8:	40001800 	.word	0x40001800

08001bec <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b092      	sub	sp, #72	; 0x48
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
 8001c00:	611a      	str	r2, [r3, #16]
 8001c02:	615a      	str	r2, [r3, #20]
 8001c04:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c06:	463b      	mov	r3, r7
 8001c08:	222c      	movs	r2, #44	; 0x2c
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f00c fd44 	bl	800e69a <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001c12:	4b31      	ldr	r3, [pc, #196]	; (8001cd8 <MX_TIM16_Init+0xec>)
 8001c14:	4a31      	ldr	r2, [pc, #196]	; (8001cdc <MX_TIM16_Init+0xf0>)
 8001c16:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001c18:	4b2f      	ldr	r3, [pc, #188]	; (8001cd8 <MX_TIM16_Init+0xec>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1e:	4b2e      	ldr	r3, [pc, #184]	; (8001cd8 <MX_TIM16_Init+0xec>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001c24:	4b2c      	ldr	r3, [pc, #176]	; (8001cd8 <MX_TIM16_Init+0xec>)
 8001c26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c2a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2c:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <MX_TIM16_Init+0xec>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001c32:	4b29      	ldr	r3, [pc, #164]	; (8001cd8 <MX_TIM16_Init+0xec>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c38:	4b27      	ldr	r3, [pc, #156]	; (8001cd8 <MX_TIM16_Init+0xec>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001c3e:	4826      	ldr	r0, [pc, #152]	; (8001cd8 <MX_TIM16_Init+0xec>)
 8001c40:	f009 fd2b 	bl	800b69a <HAL_TIM_Base_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001c4a:	f000 fadd 	bl	8002208 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001c4e:	4822      	ldr	r0, [pc, #136]	; (8001cd8 <MX_TIM16_Init+0xec>)
 8001c50:	f009 fd7a 	bl	800b748 <HAL_TIM_PWM_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001c5a:	f000 fad5 	bl	8002208 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c5e:	2360      	movs	r3, #96	; 0x60
 8001c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c66:	2300      	movs	r3, #0
 8001c68:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c72:	2300      	movs	r3, #0
 8001c74:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c76:	2300      	movs	r3, #0
 8001c78:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c7e:	2200      	movs	r2, #0
 8001c80:	4619      	mov	r1, r3
 8001c82:	4815      	ldr	r0, [pc, #84]	; (8001cd8 <MX_TIM16_Init+0xec>)
 8001c84:	f009 fea2 	bl	800b9cc <HAL_TIM_PWM_ConfigChannel>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001c8e:	f000 fabb 	bl	8002208 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ca6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001caa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001cb4:	463b      	mov	r3, r7
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4807      	ldr	r0, [pc, #28]	; (8001cd8 <MX_TIM16_Init+0xec>)
 8001cba:	f00a fe3d 	bl	800c938 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001cc4:	f000 faa0 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001cc8:	4803      	ldr	r0, [pc, #12]	; (8001cd8 <MX_TIM16_Init+0xec>)
 8001cca:	f001 f9ab 	bl	8003024 <HAL_TIM_MspPostInit>

}
 8001cce:	bf00      	nop
 8001cd0:	3748      	adds	r7, #72	; 0x48
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000b00 	.word	0x20000b00
 8001cdc:	40014400 	.word	0x40014400

08001ce0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b092      	sub	sp, #72	; 0x48
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ce6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]
 8001cf4:	611a      	str	r2, [r3, #16]
 8001cf6:	615a      	str	r2, [r3, #20]
 8001cf8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cfa:	463b      	mov	r3, r7
 8001cfc:	222c      	movs	r2, #44	; 0x2c
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f00c fcca 	bl	800e69a <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001d06:	4b31      	ldr	r3, [pc, #196]	; (8001dcc <MX_TIM17_Init+0xec>)
 8001d08:	4a31      	ldr	r2, [pc, #196]	; (8001dd0 <MX_TIM17_Init+0xf0>)
 8001d0a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001d0c:	4b2f      	ldr	r3, [pc, #188]	; (8001dcc <MX_TIM17_Init+0xec>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d12:	4b2e      	ldr	r3, [pc, #184]	; (8001dcc <MX_TIM17_Init+0xec>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001d18:	4b2c      	ldr	r3, [pc, #176]	; (8001dcc <MX_TIM17_Init+0xec>)
 8001d1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d1e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d20:	4b2a      	ldr	r3, [pc, #168]	; (8001dcc <MX_TIM17_Init+0xec>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001d26:	4b29      	ldr	r3, [pc, #164]	; (8001dcc <MX_TIM17_Init+0xec>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d2c:	4b27      	ldr	r3, [pc, #156]	; (8001dcc <MX_TIM17_Init+0xec>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001d32:	4826      	ldr	r0, [pc, #152]	; (8001dcc <MX_TIM17_Init+0xec>)
 8001d34:	f009 fcb1 	bl	800b69a <HAL_TIM_Base_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001d3e:	f000 fa63 	bl	8002208 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001d42:	4822      	ldr	r0, [pc, #136]	; (8001dcc <MX_TIM17_Init+0xec>)
 8001d44:	f009 fd00 	bl	800b748 <HAL_TIM_PWM_Init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001d4e:	f000 fa5b 	bl	8002208 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d52:	2360      	movs	r3, #96	; 0x60
 8001d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d66:	2300      	movs	r3, #0
 8001d68:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d72:	2200      	movs	r2, #0
 8001d74:	4619      	mov	r1, r3
 8001d76:	4815      	ldr	r0, [pc, #84]	; (8001dcc <MX_TIM17_Init+0xec>)
 8001d78:	f009 fe28 	bl	800b9cc <HAL_TIM_PWM_ConfigChannel>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8001d82:	f000 fa41 	bl	8002208 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d86:	2300      	movs	r3, #0
 8001d88:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d9e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001da8:	463b      	mov	r3, r7
 8001daa:	4619      	mov	r1, r3
 8001dac:	4807      	ldr	r0, [pc, #28]	; (8001dcc <MX_TIM17_Init+0xec>)
 8001dae:	f00a fdc3 	bl	800c938 <HAL_TIMEx_ConfigBreakDeadTime>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8001db8:	f000 fa26 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001dbc:	4803      	ldr	r0, [pc, #12]	; (8001dcc <MX_TIM17_Init+0xec>)
 8001dbe:	f001 f931 	bl	8003024 <HAL_TIM_MspPostInit>

}
 8001dc2:	bf00      	nop
 8001dc4:	3748      	adds	r7, #72	; 0x48
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200003e8 	.word	0x200003e8
 8001dd0:	40014800 	.word	0x40014800

08001dd4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001dd8:	4b22      	ldr	r3, [pc, #136]	; (8001e64 <MX_UART5_Init+0x90>)
 8001dda:	4a23      	ldr	r2, [pc, #140]	; (8001e68 <MX_UART5_Init+0x94>)
 8001ddc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001dde:	4b21      	ldr	r3, [pc, #132]	; (8001e64 <MX_UART5_Init+0x90>)
 8001de0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001de4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001de6:	4b1f      	ldr	r3, [pc, #124]	; (8001e64 <MX_UART5_Init+0x90>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001dec:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <MX_UART5_Init+0x90>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001df2:	4b1c      	ldr	r3, [pc, #112]	; (8001e64 <MX_UART5_Init+0x90>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001df8:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <MX_UART5_Init+0x90>)
 8001dfa:	220c      	movs	r2, #12
 8001dfc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dfe:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <MX_UART5_Init+0x90>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e04:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <MX_UART5_Init+0x90>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e0a:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <MX_UART5_Init+0x90>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e10:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <MX_UART5_Init+0x90>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e16:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <MX_UART5_Init+0x90>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001e1c:	4811      	ldr	r0, [pc, #68]	; (8001e64 <MX_UART5_Init+0x90>)
 8001e1e:	f00a fe09 	bl	800ca34 <HAL_UART_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001e28:	f000 f9ee 	bl	8002208 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	480d      	ldr	r0, [pc, #52]	; (8001e64 <MX_UART5_Init+0x90>)
 8001e30:	f00b fe0d 	bl	800da4e <HAL_UARTEx_SetTxFifoThreshold>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001e3a:	f000 f9e5 	bl	8002208 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4808      	ldr	r0, [pc, #32]	; (8001e64 <MX_UART5_Init+0x90>)
 8001e42:	f00b fe42 	bl	800daca <HAL_UARTEx_SetRxFifoThreshold>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001e4c:	f000 f9dc 	bl	8002208 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001e50:	4804      	ldr	r0, [pc, #16]	; (8001e64 <MX_UART5_Init+0x90>)
 8001e52:	f00b fdc3 	bl	800d9dc <HAL_UARTEx_DisableFifoMode>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001e5c:	f000 f9d4 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001e60:	bf00      	nop
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000668 	.word	0x20000668
 8001e68:	40005000 	.word	0x40005000

08001e6c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001e70:	4b22      	ldr	r3, [pc, #136]	; (8001efc <MX_UART7_Init+0x90>)
 8001e72:	4a23      	ldr	r2, [pc, #140]	; (8001f00 <MX_UART7_Init+0x94>)
 8001e74:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001e76:	4b21      	ldr	r3, [pc, #132]	; (8001efc <MX_UART7_Init+0x90>)
 8001e78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e7c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001e7e:	4b1f      	ldr	r3, [pc, #124]	; (8001efc <MX_UART7_Init+0x90>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001e84:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <MX_UART7_Init+0x90>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001e8a:	4b1c      	ldr	r3, [pc, #112]	; (8001efc <MX_UART7_Init+0x90>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001e90:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <MX_UART7_Init+0x90>)
 8001e92:	220c      	movs	r2, #12
 8001e94:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e96:	4b19      	ldr	r3, [pc, #100]	; (8001efc <MX_UART7_Init+0x90>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e9c:	4b17      	ldr	r3, [pc, #92]	; (8001efc <MX_UART7_Init+0x90>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ea2:	4b16      	ldr	r3, [pc, #88]	; (8001efc <MX_UART7_Init+0x90>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ea8:	4b14      	ldr	r3, [pc, #80]	; (8001efc <MX_UART7_Init+0x90>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eae:	4b13      	ldr	r3, [pc, #76]	; (8001efc <MX_UART7_Init+0x90>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001eb4:	4811      	ldr	r0, [pc, #68]	; (8001efc <MX_UART7_Init+0x90>)
 8001eb6:	f00a fdbd 	bl	800ca34 <HAL_UART_Init>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001ec0:	f000 f9a2 	bl	8002208 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	480d      	ldr	r0, [pc, #52]	; (8001efc <MX_UART7_Init+0x90>)
 8001ec8:	f00b fdc1 	bl	800da4e <HAL_UARTEx_SetTxFifoThreshold>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8001ed2:	f000 f999 	bl	8002208 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	4808      	ldr	r0, [pc, #32]	; (8001efc <MX_UART7_Init+0x90>)
 8001eda:	f00b fdf6 	bl	800daca <HAL_UARTEx_SetRxFifoThreshold>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001ee4:	f000 f990 	bl	8002208 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001ee8:	4804      	ldr	r0, [pc, #16]	; (8001efc <MX_UART7_Init+0x90>)
 8001eea:	f00b fd77 	bl	800d9dc <HAL_UARTEx_DisableFifoMode>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001ef4:	f000 f988 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001ef8:	bf00      	nop
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000150 	.word	0x20000150
 8001f00:	40007800 	.word	0x40007800

08001f04 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001f08:	4b24      	ldr	r3, [pc, #144]	; (8001f9c <MX_UART8_Init+0x98>)
 8001f0a:	4a25      	ldr	r2, [pc, #148]	; (8001fa0 <MX_UART8_Init+0x9c>)
 8001f0c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001f0e:	4b23      	ldr	r3, [pc, #140]	; (8001f9c <MX_UART8_Init+0x98>)
 8001f10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f14:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001f16:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <MX_UART8_Init+0x98>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001f1c:	4b1f      	ldr	r3, [pc, #124]	; (8001f9c <MX_UART8_Init+0x98>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001f22:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <MX_UART8_Init+0x98>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001f28:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <MX_UART8_Init+0x98>)
 8001f2a:	220c      	movs	r2, #12
 8001f2c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f2e:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <MX_UART8_Init+0x98>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f34:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <MX_UART8_Init+0x98>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f3a:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <MX_UART8_Init+0x98>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f40:	4b16      	ldr	r3, [pc, #88]	; (8001f9c <MX_UART8_Init+0x98>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <MX_UART8_Init+0x98>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart8, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2100      	movs	r1, #0
 8001f52:	4812      	ldr	r0, [pc, #72]	; (8001f9c <MX_UART8_Init+0x98>)
 8001f54:	f00b fcd8 	bl	800d908 <HAL_RS485Ex_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_UART8_Init+0x5e>
  {
    Error_Handler();
 8001f5e:	f000 f953 	bl	8002208 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f62:	2100      	movs	r1, #0
 8001f64:	480d      	ldr	r0, [pc, #52]	; (8001f9c <MX_UART8_Init+0x98>)
 8001f66:	f00b fd72 	bl	800da4e <HAL_UARTEx_SetTxFifoThreshold>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_UART8_Init+0x70>
  {
    Error_Handler();
 8001f70:	f000 f94a 	bl	8002208 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f74:	2100      	movs	r1, #0
 8001f76:	4809      	ldr	r0, [pc, #36]	; (8001f9c <MX_UART8_Init+0x98>)
 8001f78:	f00b fda7 	bl	800daca <HAL_UARTEx_SetRxFifoThreshold>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_UART8_Init+0x82>
  {
    Error_Handler();
 8001f82:	f000 f941 	bl	8002208 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001f86:	4805      	ldr	r0, [pc, #20]	; (8001f9c <MX_UART8_Init+0x98>)
 8001f88:	f00b fd28 	bl	800d9dc <HAL_UARTEx_DisableFifoMode>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_UART8_Init+0x92>
  {
    Error_Handler();
 8001f92:	f000 f939 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	200008a8 	.word	0x200008a8
 8001fa0:	40007c00 	.word	0x40007c00

08001fa4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fa8:	4b22      	ldr	r3, [pc, #136]	; (8002034 <MX_USART3_UART_Init+0x90>)
 8001faa:	4a23      	ldr	r2, [pc, #140]	; (8002038 <MX_USART3_UART_Init+0x94>)
 8001fac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001fae:	4b21      	ldr	r3, [pc, #132]	; (8002034 <MX_USART3_UART_Init+0x90>)
 8001fb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fb4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fb6:	4b1f      	ldr	r3, [pc, #124]	; (8002034 <MX_USART3_UART_Init+0x90>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <MX_USART3_UART_Init+0x90>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fc2:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <MX_USART3_UART_Init+0x90>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <MX_USART3_UART_Init+0x90>)
 8001fca:	220c      	movs	r2, #12
 8001fcc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fce:	4b19      	ldr	r3, [pc, #100]	; (8002034 <MX_USART3_UART_Init+0x90>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd4:	4b17      	ldr	r3, [pc, #92]	; (8002034 <MX_USART3_UART_Init+0x90>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fda:	4b16      	ldr	r3, [pc, #88]	; (8002034 <MX_USART3_UART_Init+0x90>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fe0:	4b14      	ldr	r3, [pc, #80]	; (8002034 <MX_USART3_UART_Init+0x90>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fe6:	4b13      	ldr	r3, [pc, #76]	; (8002034 <MX_USART3_UART_Init+0x90>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fec:	4811      	ldr	r0, [pc, #68]	; (8002034 <MX_USART3_UART_Init+0x90>)
 8001fee:	f00a fd21 	bl	800ca34 <HAL_UART_Init>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001ff8:	f000 f906 	bl	8002208 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	480d      	ldr	r0, [pc, #52]	; (8002034 <MX_USART3_UART_Init+0x90>)
 8002000:	f00b fd25 	bl	800da4e <HAL_UARTEx_SetTxFifoThreshold>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800200a:	f000 f8fd 	bl	8002208 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800200e:	2100      	movs	r1, #0
 8002010:	4808      	ldr	r0, [pc, #32]	; (8002034 <MX_USART3_UART_Init+0x90>)
 8002012:	f00b fd5a 	bl	800daca <HAL_UARTEx_SetRxFifoThreshold>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800201c:	f000 f8f4 	bl	8002208 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002020:	4804      	ldr	r0, [pc, #16]	; (8002034 <MX_USART3_UART_Init+0x90>)
 8002022:	f00b fcdb 	bl	800d9dc <HAL_UARTEx_DisableFifoMode>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800202c:	f000 f8ec 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000274 	.word	0x20000274
 8002038:	40004800 	.word	0x40004800

0800203c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
	...

0800204c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b090      	sub	sp, #64	; 0x40
 8002050:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002052:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	609a      	str	r2, [r3, #8]
 800205e:	60da      	str	r2, [r3, #12]
 8002060:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002062:	4b65      	ldr	r3, [pc, #404]	; (80021f8 <MX_GPIO_Init+0x1ac>)
 8002064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002068:	4a63      	ldr	r2, [pc, #396]	; (80021f8 <MX_GPIO_Init+0x1ac>)
 800206a:	f043 0310 	orr.w	r3, r3, #16
 800206e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002072:	4b61      	ldr	r3, [pc, #388]	; (80021f8 <MX_GPIO_Init+0x1ac>)
 8002074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002078:	f003 0310 	and.w	r3, r3, #16
 800207c:	62bb      	str	r3, [r7, #40]	; 0x28
 800207e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002080:	4b5d      	ldr	r3, [pc, #372]	; (80021f8 <MX_GPIO_Init+0x1ac>)
 8002082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002086:	4a5c      	ldr	r2, [pc, #368]	; (80021f8 <MX_GPIO_Init+0x1ac>)
 8002088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002090:	4b59      	ldr	r3, [pc, #356]	; (80021f8 <MX_GPIO_Init+0x1ac>)
 8002092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800209e:	4b56      	ldr	r3, [pc, #344]	; (80021f8 <MX_GPIO_Init+0x1ac>)
 80020a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a4:	4a54      	ldr	r2, [pc, #336]	; (80021f8 <MX_GPIO_Init+0x1ac>)
 80020a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020ae:	4b52      	ldr	r3, [pc, #328]	; (80021f8 <MX_GPIO_Init+0x1ac>)
 80020b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b8:	623b      	str	r3, [r7, #32]
 80020ba:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020bc:	4b4e      	ldr	r3, [pc, #312]	; (80021f8 <MX_GPIO_Init+0x1ac>)
 80020be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020c2:	4a4d      	ldr	r2, [pc, #308]	; (80021f8 <MX_GPIO_Init+0x1ac>)
 80020c4:	f043 0304 	orr.w	r3, r3, #4
 80020c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020cc:	4b4a      	ldr	r3, [pc, #296]	; (80021f8 <MX_GPIO_Init+0x1ac>)
 80020ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	61fb      	str	r3, [r7, #28]
 80020d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020da:	4b47      	ldr	r3, [pc, #284]	; (80021f8 <MX_GPIO_Init+0x1ac>)
 80020dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020e0:	4a45      	ldr	r2, [pc, #276]	; (80021f8 <MX_GPIO_Init+0x1ac>)
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020ea:	4b43      	ldr	r3, [pc, #268]	; (80021f8 <MX_GPIO_Init+0x1ac>)
 80020ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	61bb      	str	r3, [r7, #24]
 80020f6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f8:	4b3f      	ldr	r3, [pc, #252]	; (80021f8 <MX_GPIO_Init+0x1ac>)
 80020fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020fe:	4a3e      	ldr	r2, [pc, #248]	; (80021f8 <MX_GPIO_Init+0x1ac>)
 8002100:	f043 0302 	orr.w	r3, r3, #2
 8002104:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002108:	4b3b      	ldr	r3, [pc, #236]	; (80021f8 <MX_GPIO_Init+0x1ac>)
 800210a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002116:	4b38      	ldr	r3, [pc, #224]	; (80021f8 <MX_GPIO_Init+0x1ac>)
 8002118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800211c:	4a36      	ldr	r2, [pc, #216]	; (80021f8 <MX_GPIO_Init+0x1ac>)
 800211e:	f043 0308 	orr.w	r3, r3, #8
 8002122:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002126:	4b34      	ldr	r3, [pc, #208]	; (80021f8 <MX_GPIO_Init+0x1ac>)
 8002128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800212c:	f003 0308 	and.w	r3, r3, #8
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002134:	4b30      	ldr	r3, [pc, #192]	; (80021f8 <MX_GPIO_Init+0x1ac>)
 8002136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800213a:	4a2f      	ldr	r2, [pc, #188]	; (80021f8 <MX_GPIO_Init+0x1ac>)
 800213c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002140:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002144:	4b2c      	ldr	r3, [pc, #176]	; (80021f8 <MX_GPIO_Init+0x1ac>)
 8002146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800214a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002152:	4b29      	ldr	r3, [pc, #164]	; (80021f8 <MX_GPIO_Init+0x1ac>)
 8002154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002158:	4a27      	ldr	r2, [pc, #156]	; (80021f8 <MX_GPIO_Init+0x1ac>)
 800215a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800215e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002162:	4b25      	ldr	r3, [pc, #148]	; (80021f8 <MX_GPIO_Init+0x1ac>)
 8002164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002170:	4b21      	ldr	r3, [pc, #132]	; (80021f8 <MX_GPIO_Init+0x1ac>)
 8002172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002176:	4a20      	ldr	r2, [pc, #128]	; (80021f8 <MX_GPIO_Init+0x1ac>)
 8002178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800217c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002180:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <MX_GPIO_Init+0x1ac>)
 8002182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800218a:	607b      	str	r3, [r7, #4]
 800218c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC0 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800218e:	230d      	movs	r3, #13
 8002190:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002192:	2302      	movs	r3, #2
 8002194:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800219a:	2302      	movs	r3, #2
 800219c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 800219e:	230a      	movs	r3, #10
 80021a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021a6:	4619      	mov	r1, r3
 80021a8:	4814      	ldr	r0, [pc, #80]	; (80021fc <MX_GPIO_Init+0x1b0>)
 80021aa:	f003 fe21 	bl	8005df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80021ae:	2328      	movs	r3, #40	; 0x28
 80021b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b2:	2302      	movs	r3, #2
 80021b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021ba:	2302      	movs	r3, #2
 80021bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 80021be:	230a      	movs	r3, #10
 80021c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021c6:	4619      	mov	r1, r3
 80021c8:	480d      	ldr	r0, [pc, #52]	; (8002200 <MX_GPIO_Init+0x1b4>)
 80021ca:	f003 fe11 	bl	8005df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80021ce:	f643 4323 	movw	r3, #15395	; 0x3c23
 80021d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021dc:	2302      	movs	r3, #2
 80021de:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 80021e0:	230a      	movs	r3, #10
 80021e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021e8:	4619      	mov	r1, r3
 80021ea:	4806      	ldr	r0, [pc, #24]	; (8002204 <MX_GPIO_Init+0x1b8>)
 80021ec:	f003 fe00 	bl	8005df0 <HAL_GPIO_Init>

}
 80021f0:	bf00      	nop
 80021f2:	3740      	adds	r7, #64	; 0x40
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	58024400 	.word	0x58024400
 80021fc:	58020800 	.word	0x58020800
 8002200:	58020000 	.word	0x58020000
 8002204:	58020400 	.word	0x58020400

08002208 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800221e:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <HAL_MspInit+0x30>)
 8002220:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002224:	4a08      	ldr	r2, [pc, #32]	; (8002248 <HAL_MspInit+0x30>)
 8002226:	f043 0302 	orr.w	r3, r3, #2
 800222a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <HAL_MspInit+0x30>)
 8002230:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	607b      	str	r3, [r7, #4]
 800223a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	58024400 	.word	0x58024400

0800224c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08c      	sub	sp, #48	; 0x30
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002254:	f107 031c 	add.w	r3, r7, #28
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a39      	ldr	r2, [pc, #228]	; (8002350 <HAL_ADC_MspInit+0x104>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d133      	bne.n	80022d6 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800226e:	4b39      	ldr	r3, [pc, #228]	; (8002354 <HAL_ADC_MspInit+0x108>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	3301      	adds	r3, #1
 8002274:	4a37      	ldr	r2, [pc, #220]	; (8002354 <HAL_ADC_MspInit+0x108>)
 8002276:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002278:	4b36      	ldr	r3, [pc, #216]	; (8002354 <HAL_ADC_MspInit+0x108>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d10e      	bne.n	800229e <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002280:	4b35      	ldr	r3, [pc, #212]	; (8002358 <HAL_ADC_MspInit+0x10c>)
 8002282:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002286:	4a34      	ldr	r2, [pc, #208]	; (8002358 <HAL_ADC_MspInit+0x10c>)
 8002288:	f043 0320 	orr.w	r3, r3, #32
 800228c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002290:	4b31      	ldr	r3, [pc, #196]	; (8002358 <HAL_ADC_MspInit+0x10c>)
 8002292:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002296:	f003 0320 	and.w	r3, r3, #32
 800229a:	61bb      	str	r3, [r7, #24]
 800229c:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800229e:	4b2e      	ldr	r3, [pc, #184]	; (8002358 <HAL_ADC_MspInit+0x10c>)
 80022a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022a4:	4a2c      	ldr	r2, [pc, #176]	; (8002358 <HAL_ADC_MspInit+0x10c>)
 80022a6:	f043 0301 	orr.w	r3, r3, #1
 80022aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022ae:	4b2a      	ldr	r3, [pc, #168]	; (8002358 <HAL_ADC_MspInit+0x10c>)
 80022b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80022bc:	2350      	movs	r3, #80	; 0x50
 80022be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022c0:	2303      	movs	r3, #3
 80022c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c8:	f107 031c 	add.w	r3, r7, #28
 80022cc:	4619      	mov	r1, r3
 80022ce:	4823      	ldr	r0, [pc, #140]	; (800235c <HAL_ADC_MspInit+0x110>)
 80022d0:	f003 fd8e 	bl	8005df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80022d4:	e037      	b.n	8002346 <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a21      	ldr	r2, [pc, #132]	; (8002360 <HAL_ADC_MspInit+0x114>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d132      	bne.n	8002346 <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80022e0:	4b1c      	ldr	r3, [pc, #112]	; (8002354 <HAL_ADC_MspInit+0x108>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	3301      	adds	r3, #1
 80022e6:	4a1b      	ldr	r2, [pc, #108]	; (8002354 <HAL_ADC_MspInit+0x108>)
 80022e8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80022ea:	4b1a      	ldr	r3, [pc, #104]	; (8002354 <HAL_ADC_MspInit+0x108>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d10e      	bne.n	8002310 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80022f2:	4b19      	ldr	r3, [pc, #100]	; (8002358 <HAL_ADC_MspInit+0x10c>)
 80022f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022f8:	4a17      	ldr	r2, [pc, #92]	; (8002358 <HAL_ADC_MspInit+0x10c>)
 80022fa:	f043 0320 	orr.w	r3, r3, #32
 80022fe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002302:	4b15      	ldr	r3, [pc, #84]	; (8002358 <HAL_ADC_MspInit+0x10c>)
 8002304:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002308:	f003 0320 	and.w	r3, r3, #32
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002310:	4b11      	ldr	r3, [pc, #68]	; (8002358 <HAL_ADC_MspInit+0x10c>)
 8002312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002316:	4a10      	ldr	r2, [pc, #64]	; (8002358 <HAL_ADC_MspInit+0x10c>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002320:	4b0d      	ldr	r3, [pc, #52]	; (8002358 <HAL_ADC_MspInit+0x10c>)
 8002322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800232e:	2350      	movs	r3, #80	; 0x50
 8002330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002332:	2303      	movs	r3, #3
 8002334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002336:	2300      	movs	r3, #0
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233a:	f107 031c 	add.w	r3, r7, #28
 800233e:	4619      	mov	r1, r3
 8002340:	4806      	ldr	r0, [pc, #24]	; (800235c <HAL_ADC_MspInit+0x110>)
 8002342:	f003 fd55 	bl	8005df0 <HAL_GPIO_Init>
}
 8002346:	bf00      	nop
 8002348:	3730      	adds	r7, #48	; 0x30
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40022000 	.word	0x40022000
 8002354:	200000ec 	.word	0x200000ec
 8002358:	58024400 	.word	0x58024400
 800235c:	58020000 	.word	0x58020000
 8002360:	40022100 	.word	0x40022100

08002364 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08a      	sub	sp, #40	; 0x28
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a18      	ldr	r2, [pc, #96]	; (80023e4 <HAL_COMP_MspInit+0x80>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d12a      	bne.n	80023dc <HAL_COMP_MspInit+0x78>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 8002386:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <HAL_COMP_MspInit+0x84>)
 8002388:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800238c:	4a16      	ldr	r2, [pc, #88]	; (80023e8 <HAL_COMP_MspInit+0x84>)
 800238e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002392:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002396:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <HAL_COMP_MspInit+0x84>)
 8002398:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800239c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023a4:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <HAL_COMP_MspInit+0x84>)
 80023a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023aa:	4a0f      	ldr	r2, [pc, #60]	; (80023e8 <HAL_COMP_MspInit+0x84>)
 80023ac:	f043 0310 	orr.w	r3, r3, #16
 80023b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023b4:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <HAL_COMP_MspInit+0x84>)
 80023b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ba:	f003 0310 	and.w	r3, r3, #16
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE11     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80023c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023c8:	2303      	movs	r3, #3
 80023ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023d0:	f107 0314 	add.w	r3, r7, #20
 80023d4:	4619      	mov	r1, r3
 80023d6:	4805      	ldr	r0, [pc, #20]	; (80023ec <HAL_COMP_MspInit+0x88>)
 80023d8:	f003 fd0a 	bl	8005df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 80023dc:	bf00      	nop
 80023de:	3728      	adds	r7, #40	; 0x28
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	58003810 	.word	0x58003810
 80023e8:	58024400 	.word	0x58024400
 80023ec:	58021000 	.word	0x58021000

080023f0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08a      	sub	sp, #40	; 0x28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	f107 0314 	add.w	r3, r7, #20
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8002408:	4b2d      	ldr	r3, [pc, #180]	; (80024c0 <HAL_DFSDM_ChannelMspInit+0xd0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d152      	bne.n	80024b6 <HAL_DFSDM_ChannelMspInit+0xc6>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002410:	4b2c      	ldr	r3, [pc, #176]	; (80024c4 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8002412:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002416:	4a2b      	ldr	r2, [pc, #172]	; (80024c4 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8002418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800241c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002420:	4b28      	ldr	r3, [pc, #160]	; (80024c4 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8002422:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800242e:	4b25      	ldr	r3, [pc, #148]	; (80024c4 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8002430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002434:	4a23      	ldr	r2, [pc, #140]	; (80024c4 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8002436:	f043 0310 	orr.w	r3, r3, #16
 800243a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800243e:	4b21      	ldr	r3, [pc, #132]	; (80024c4 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8002440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002444:	f003 0310 	and.w	r3, r3, #16
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800244c:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800244e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002452:	4a1c      	ldr	r2, [pc, #112]	; (80024c4 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8002454:	f043 0308 	orr.w	r3, r3, #8
 8002458:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800245c:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800245e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE10     ------> DFSDM1_DATIN4
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 800246a:	f44f 6390 	mov.w	r3, #1152	; 0x480
 800246e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002478:	2300      	movs	r3, #0
 800247a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 800247c:	2303      	movs	r3, #3
 800247e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002480:	f107 0314 	add.w	r3, r7, #20
 8002484:	4619      	mov	r1, r3
 8002486:	4810      	ldr	r0, [pc, #64]	; (80024c8 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8002488:	f003 fcb2 	bl	8005df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800248c:	2308      	movs	r3, #8
 800248e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002490:	2302      	movs	r3, #2
 8002492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002498:	2300      	movs	r3, #0
 800249a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 800249c:	2303      	movs	r3, #3
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024a0:	f107 0314 	add.w	r3, r7, #20
 80024a4:	4619      	mov	r1, r3
 80024a6:	4809      	ldr	r0, [pc, #36]	; (80024cc <HAL_DFSDM_ChannelMspInit+0xdc>)
 80024a8:	f003 fca2 	bl	8005df0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80024ac:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	3301      	adds	r3, #1
 80024b2:	4a03      	ldr	r2, [pc, #12]	; (80024c0 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80024b4:	6013      	str	r3, [r2, #0]
  }

}
 80024b6:	bf00      	nop
 80024b8:	3728      	adds	r7, #40	; 0x28
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	200000f0 	.word	0x200000f0
 80024c4:	58024400 	.word	0x58024400
 80024c8:	58021000 	.word	0x58021000
 80024cc:	58020c00 	.word	0x58020c00

080024d0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08e      	sub	sp, #56	; 0x38
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a49      	ldr	r2, [pc, #292]	; (8002614 <HAL_ETH_MspInit+0x144>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	f040 808b 	bne.w	800260a <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80024f4:	4b48      	ldr	r3, [pc, #288]	; (8002618 <HAL_ETH_MspInit+0x148>)
 80024f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80024fa:	4a47      	ldr	r2, [pc, #284]	; (8002618 <HAL_ETH_MspInit+0x148>)
 80024fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002500:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002504:	4b44      	ldr	r3, [pc, #272]	; (8002618 <HAL_ETH_MspInit+0x148>)
 8002506:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800250a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800250e:	623b      	str	r3, [r7, #32]
 8002510:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8002512:	4b41      	ldr	r3, [pc, #260]	; (8002618 <HAL_ETH_MspInit+0x148>)
 8002514:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002518:	4a3f      	ldr	r2, [pc, #252]	; (8002618 <HAL_ETH_MspInit+0x148>)
 800251a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002522:	4b3d      	ldr	r3, [pc, #244]	; (8002618 <HAL_ETH_MspInit+0x148>)
 8002524:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252c:	61fb      	str	r3, [r7, #28]
 800252e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8002530:	4b39      	ldr	r3, [pc, #228]	; (8002618 <HAL_ETH_MspInit+0x148>)
 8002532:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002536:	4a38      	ldr	r2, [pc, #224]	; (8002618 <HAL_ETH_MspInit+0x148>)
 8002538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800253c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002540:	4b35      	ldr	r3, [pc, #212]	; (8002618 <HAL_ETH_MspInit+0x148>)
 8002542:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	61bb      	str	r3, [r7, #24]
 800254c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800254e:	4b32      	ldr	r3, [pc, #200]	; (8002618 <HAL_ETH_MspInit+0x148>)
 8002550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002554:	4a30      	ldr	r2, [pc, #192]	; (8002618 <HAL_ETH_MspInit+0x148>)
 8002556:	f043 0304 	orr.w	r3, r3, #4
 800255a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800255e:	4b2e      	ldr	r3, [pc, #184]	; (8002618 <HAL_ETH_MspInit+0x148>)
 8002560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800256c:	4b2a      	ldr	r3, [pc, #168]	; (8002618 <HAL_ETH_MspInit+0x148>)
 800256e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002572:	4a29      	ldr	r2, [pc, #164]	; (8002618 <HAL_ETH_MspInit+0x148>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800257c:	4b26      	ldr	r3, [pc, #152]	; (8002618 <HAL_ETH_MspInit+0x148>)
 800257e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800258a:	4b23      	ldr	r3, [pc, #140]	; (8002618 <HAL_ETH_MspInit+0x148>)
 800258c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002590:	4a21      	ldr	r2, [pc, #132]	; (8002618 <HAL_ETH_MspInit+0x148>)
 8002592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002596:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800259a:	4b1f      	ldr	r3, [pc, #124]	; (8002618 <HAL_ETH_MspInit+0x148>)
 800259c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80025a8:	2332      	movs	r3, #50	; 0x32
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ac:	2302      	movs	r3, #2
 80025ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b4:	2300      	movs	r3, #0
 80025b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025b8:	230b      	movs	r3, #11
 80025ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c0:	4619      	mov	r1, r3
 80025c2:	4816      	ldr	r0, [pc, #88]	; (800261c <HAL_ETH_MspInit+0x14c>)
 80025c4:	f003 fc14 	bl	8005df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80025c8:	2386      	movs	r3, #134	; 0x86
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025cc:	2302      	movs	r3, #2
 80025ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d4:	2300      	movs	r3, #0
 80025d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025d8:	230b      	movs	r3, #11
 80025da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e0:	4619      	mov	r1, r3
 80025e2:	480f      	ldr	r0, [pc, #60]	; (8002620 <HAL_ETH_MspInit+0x150>)
 80025e4:	f003 fc04 	bl	8005df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80025e8:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ee:	2302      	movs	r3, #2
 80025f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f6:	2300      	movs	r3, #0
 80025f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025fa:	230b      	movs	r3, #11
 80025fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002602:	4619      	mov	r1, r3
 8002604:	4807      	ldr	r0, [pc, #28]	; (8002624 <HAL_ETH_MspInit+0x154>)
 8002606:	f003 fbf3 	bl	8005df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800260a:	bf00      	nop
 800260c:	3738      	adds	r7, #56	; 0x38
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40028000 	.word	0x40028000
 8002618:	58024400 	.word	0x58024400
 800261c:	58020800 	.word	0x58020800
 8002620:	58020000 	.word	0x58020000
 8002624:	58021800 	.word	0x58021800

08002628 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08a      	sub	sp, #40	; 0x28
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002630:	f107 0314 	add.w	r3, r7, #20
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a1a      	ldr	r2, [pc, #104]	; (80026b0 <HAL_FDCAN_MspInit+0x88>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d12d      	bne.n	80026a6 <HAL_FDCAN_MspInit+0x7e>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800264a:	4b1a      	ldr	r3, [pc, #104]	; (80026b4 <HAL_FDCAN_MspInit+0x8c>)
 800264c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002650:	4a18      	ldr	r2, [pc, #96]	; (80026b4 <HAL_FDCAN_MspInit+0x8c>)
 8002652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002656:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800265a:	4b16      	ldr	r3, [pc, #88]	; (80026b4 <HAL_FDCAN_MspInit+0x8c>)
 800265c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002668:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <HAL_FDCAN_MspInit+0x8c>)
 800266a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800266e:	4a11      	ldr	r2, [pc, #68]	; (80026b4 <HAL_FDCAN_MspInit+0x8c>)
 8002670:	f043 0308 	orr.w	r3, r3, #8
 8002674:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002678:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <HAL_FDCAN_MspInit+0x8c>)
 800267a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002686:	2303      	movs	r3, #3
 8002688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268a:	2302      	movs	r3, #2
 800268c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002692:	2300      	movs	r3, #0
 8002694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002696:	2309      	movs	r3, #9
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800269a:	f107 0314 	add.w	r3, r7, #20
 800269e:	4619      	mov	r1, r3
 80026a0:	4805      	ldr	r0, [pc, #20]	; (80026b8 <HAL_FDCAN_MspInit+0x90>)
 80026a2:	f003 fba5 	bl	8005df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80026a6:	bf00      	nop
 80026a8:	3728      	adds	r7, #40	; 0x28
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	4000a000 	.word	0x4000a000
 80026b4:	58024400 	.word	0x58024400
 80026b8:	58020c00 	.word	0x58020c00

080026bc <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a0b      	ldr	r2, [pc, #44]	; (80026f8 <HAL_HRTIM_MspInit+0x3c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d10e      	bne.n	80026ec <HAL_HRTIM_MspInit+0x30>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80026ce:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <HAL_HRTIM_MspInit+0x40>)
 80026d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026d4:	4a09      	ldr	r2, [pc, #36]	; (80026fc <HAL_HRTIM_MspInit+0x40>)
 80026d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80026da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80026de:	4b07      	ldr	r3, [pc, #28]	; (80026fc <HAL_HRTIM_MspInit+0x40>)
 80026e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 80026ec:	bf00      	nop
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	40017400 	.word	0x40017400
 80026fc:	58024400 	.word	0x58024400

08002700 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08a      	sub	sp, #40	; 0x28
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002708:	f107 0314 	add.w	r3, r7, #20
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a32      	ldr	r2, [pc, #200]	; (80027e8 <HAL_HRTIM_MspPostInit+0xe8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d15e      	bne.n	80027e0 <HAL_HRTIM_MspPostInit+0xe0>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002722:	4b32      	ldr	r3, [pc, #200]	; (80027ec <HAL_HRTIM_MspPostInit+0xec>)
 8002724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002728:	4a30      	ldr	r2, [pc, #192]	; (80027ec <HAL_HRTIM_MspPostInit+0xec>)
 800272a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800272e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002732:	4b2e      	ldr	r3, [pc, #184]	; (80027ec <HAL_HRTIM_MspPostInit+0xec>)
 8002734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273c:	613b      	str	r3, [r7, #16]
 800273e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002740:	4b2a      	ldr	r3, [pc, #168]	; (80027ec <HAL_HRTIM_MspPostInit+0xec>)
 8002742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002746:	4a29      	ldr	r2, [pc, #164]	; (80027ec <HAL_HRTIM_MspPostInit+0xec>)
 8002748:	f043 0304 	orr.w	r3, r3, #4
 800274c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002750:	4b26      	ldr	r3, [pc, #152]	; (80027ec <HAL_HRTIM_MspPostInit+0xec>)
 8002752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002756:	f003 0304 	and.w	r3, r3, #4
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800275e:	4b23      	ldr	r3, [pc, #140]	; (80027ec <HAL_HRTIM_MspPostInit+0xec>)
 8002760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002764:	4a21      	ldr	r2, [pc, #132]	; (80027ec <HAL_HRTIM_MspPostInit+0xec>)
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800276e:	4b1f      	ldr	r3, [pc, #124]	; (80027ec <HAL_HRTIM_MspPostInit+0xec>)
 8002770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> HRTIM_CHC1
    PA10     ------> HRTIM_CHC2
    PA11     ------> HRTIM_CHD1
    PA12     ------> HRTIM_CHD2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800277c:	23c0      	movs	r3, #192	; 0xc0
 800277e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002780:	2302      	movs	r3, #2
 8002782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002788:	2303      	movs	r3, #3
 800278a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 800278c:	2302      	movs	r3, #2
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002790:	f107 0314 	add.w	r3, r7, #20
 8002794:	4619      	mov	r1, r3
 8002796:	4816      	ldr	r0, [pc, #88]	; (80027f0 <HAL_HRTIM_MspPostInit+0xf0>)
 8002798:	f003 fb2a 	bl	8005df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800279c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80027a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a2:	2302      	movs	r3, #2
 80027a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027aa:	2303      	movs	r3, #3
 80027ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 80027ae:	2301      	movs	r3, #1
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027b2:	f107 0314 	add.w	r3, r7, #20
 80027b6:	4619      	mov	r1, r3
 80027b8:	480e      	ldr	r0, [pc, #56]	; (80027f4 <HAL_HRTIM_MspPostInit+0xf4>)
 80027ba:	f003 fb19 	bl	8005df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80027be:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80027c2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c4:	2302      	movs	r3, #2
 80027c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027cc:	2303      	movs	r3, #3
 80027ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 80027d0:	2302      	movs	r3, #2
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d4:	f107 0314 	add.w	r3, r7, #20
 80027d8:	4619      	mov	r1, r3
 80027da:	4807      	ldr	r0, [pc, #28]	; (80027f8 <HAL_HRTIM_MspPostInit+0xf8>)
 80027dc:	f003 fb08 	bl	8005df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 80027e0:	bf00      	nop
 80027e2:	3728      	adds	r7, #40	; 0x28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40017400 	.word	0x40017400
 80027ec:	58024400 	.word	0x58024400
 80027f0:	58021800 	.word	0x58021800
 80027f4:	58020800 	.word	0x58020800
 80027f8:	58020000 	.word	0x58020000

080027fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08a      	sub	sp, #40	; 0x28
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002804:	f107 0314 	add.w	r3, r7, #20
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	60da      	str	r2, [r3, #12]
 8002812:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a1a      	ldr	r2, [pc, #104]	; (8002884 <HAL_I2C_MspInit+0x88>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d12d      	bne.n	800287a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800281e:	4b1a      	ldr	r3, [pc, #104]	; (8002888 <HAL_I2C_MspInit+0x8c>)
 8002820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002824:	4a18      	ldr	r2, [pc, #96]	; (8002888 <HAL_I2C_MspInit+0x8c>)
 8002826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800282a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800282e:	4b16      	ldr	r3, [pc, #88]	; (8002888 <HAL_I2C_MspInit+0x8c>)
 8002830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800283c:	2330      	movs	r3, #48	; 0x30
 800283e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002840:	2312      	movs	r3, #18
 8002842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002848:	2300      	movs	r3, #0
 800284a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800284c:	2304      	movs	r3, #4
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002850:	f107 0314 	add.w	r3, r7, #20
 8002854:	4619      	mov	r1, r3
 8002856:	480d      	ldr	r0, [pc, #52]	; (800288c <HAL_I2C_MspInit+0x90>)
 8002858:	f003 faca 	bl	8005df0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800285c:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <HAL_I2C_MspInit+0x8c>)
 800285e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002862:	4a09      	ldr	r2, [pc, #36]	; (8002888 <HAL_I2C_MspInit+0x8c>)
 8002864:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002868:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800286c:	4b06      	ldr	r3, [pc, #24]	; (8002888 <HAL_I2C_MspInit+0x8c>)
 800286e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800287a:	bf00      	nop
 800287c:	3728      	adds	r7, #40	; 0x28
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40005800 	.word	0x40005800
 8002888:	58024400 	.word	0x58024400
 800288c:	58021c00 	.word	0x58021c00

08002890 <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08a      	sub	sp, #40	; 0x28
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002898:	f107 0314 	add.w	r3, r7, #20
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]
 80028a6:	611a      	str	r2, [r3, #16]
  if(hsmbus->Instance==I2C3)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a2a      	ldr	r2, [pc, #168]	; (8002958 <HAL_SMBUS_MspInit+0xc8>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d14d      	bne.n	800294e <HAL_SMBUS_MspInit+0xbe>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80028b2:	4b2a      	ldr	r3, [pc, #168]	; (800295c <HAL_SMBUS_MspInit+0xcc>)
 80028b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028b8:	4a28      	ldr	r2, [pc, #160]	; (800295c <HAL_SMBUS_MspInit+0xcc>)
 80028ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028c2:	4b26      	ldr	r3, [pc, #152]	; (800295c <HAL_SMBUS_MspInit+0xcc>)
 80028c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028d0:	4b22      	ldr	r3, [pc, #136]	; (800295c <HAL_SMBUS_MspInit+0xcc>)
 80028d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028d6:	4a21      	ldr	r2, [pc, #132]	; (800295c <HAL_SMBUS_MspInit+0xcc>)
 80028d8:	f043 0304 	orr.w	r3, r3, #4
 80028dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028e0:	4b1e      	ldr	r3, [pc, #120]	; (800295c <HAL_SMBUS_MspInit+0xcc>)
 80028e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028e6:	f003 0304 	and.w	r3, r3, #4
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80028ee:	2380      	movs	r3, #128	; 0x80
 80028f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028f2:	2312      	movs	r3, #18
 80028f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fa:	2300      	movs	r3, #0
 80028fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80028fe:	2304      	movs	r3, #4
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002902:	f107 0314 	add.w	r3, r7, #20
 8002906:	4619      	mov	r1, r3
 8002908:	4815      	ldr	r0, [pc, #84]	; (8002960 <HAL_SMBUS_MspInit+0xd0>)
 800290a:	f003 fa71 	bl	8005df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800290e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002914:	2312      	movs	r3, #18
 8002916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291c:	2300      	movs	r3, #0
 800291e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002920:	2304      	movs	r3, #4
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002924:	f107 0314 	add.w	r3, r7, #20
 8002928:	4619      	mov	r1, r3
 800292a:	480e      	ldr	r0, [pc, #56]	; (8002964 <HAL_SMBUS_MspInit+0xd4>)
 800292c:	f003 fa60 	bl	8005df0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002930:	4b0a      	ldr	r3, [pc, #40]	; (800295c <HAL_SMBUS_MspInit+0xcc>)
 8002932:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002936:	4a09      	ldr	r2, [pc, #36]	; (800295c <HAL_SMBUS_MspInit+0xcc>)
 8002938:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800293c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <HAL_SMBUS_MspInit+0xcc>)
 8002942:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002946:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800294a:	60bb      	str	r3, [r7, #8]
 800294c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800294e:	bf00      	nop
 8002950:	3728      	adds	r7, #40	; 0x28
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40005c00 	.word	0x40005c00
 800295c:	58024400 	.word	0x58024400
 8002960:	58021c00 	.word	0x58021c00
 8002964:	58020800 	.word	0x58020800

08002968 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08a      	sub	sp, #40	; 0x28
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002970:	f107 0314 	add.w	r3, r7, #20
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	60da      	str	r2, [r3, #12]
 800297e:	611a      	str	r2, [r3, #16]
  if(hlptim->Instance==LPTIM2)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a1a      	ldr	r2, [pc, #104]	; (80029f0 <HAL_LPTIM_MspInit+0x88>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d12e      	bne.n	80029e8 <HAL_LPTIM_MspInit+0x80>
  {
  /* USER CODE BEGIN LPTIM2_MspInit 0 */

  /* USER CODE END LPTIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 800298a:	4b1a      	ldr	r3, [pc, #104]	; (80029f4 <HAL_LPTIM_MspInit+0x8c>)
 800298c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002990:	4a18      	ldr	r2, [pc, #96]	; (80029f4 <HAL_LPTIM_MspInit+0x8c>)
 8002992:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002996:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800299a:	4b16      	ldr	r3, [pc, #88]	; (80029f4 <HAL_LPTIM_MspInit+0x8c>)
 800299c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80029a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029a8:	4b12      	ldr	r3, [pc, #72]	; (80029f4 <HAL_LPTIM_MspInit+0x8c>)
 80029aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ae:	4a11      	ldr	r2, [pc, #68]	; (80029f4 <HAL_LPTIM_MspInit+0x8c>)
 80029b0:	f043 0308 	orr.w	r3, r3, #8
 80029b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029b8:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <HAL_LPTIM_MspInit+0x8c>)
 80029ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]
    /**LPTIM2 GPIO Configuration
    PD11     ------> LPTIM2_IN2
    PD12     ------> LPTIM2_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80029c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80029ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029cc:	2302      	movs	r3, #2
 80029ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d4:	2300      	movs	r3, #0
 80029d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 80029d8:	2303      	movs	r3, #3
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029dc:	f107 0314 	add.w	r3, r7, #20
 80029e0:	4619      	mov	r1, r3
 80029e2:	4805      	ldr	r0, [pc, #20]	; (80029f8 <HAL_LPTIM_MspInit+0x90>)
 80029e4:	f003 fa04 	bl	8005df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 80029e8:	bf00      	nop
 80029ea:	3728      	adds	r7, #40	; 0x28
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	58002400 	.word	0x58002400
 80029f4:	58024400 	.word	0x58024400
 80029f8:	58020c00 	.word	0x58020c00

080029fc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08e      	sub	sp, #56	; 0x38
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a73      	ldr	r2, [pc, #460]	; (8002be8 <HAL_LTDC_MspInit+0x1ec>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	f040 80df 	bne.w	8002bde <HAL_LTDC_MspInit+0x1e2>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002a20:	4b72      	ldr	r3, [pc, #456]	; (8002bec <HAL_LTDC_MspInit+0x1f0>)
 8002a22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002a26:	4a71      	ldr	r2, [pc, #452]	; (8002bec <HAL_LTDC_MspInit+0x1f0>)
 8002a28:	f043 0308 	orr.w	r3, r3, #8
 8002a2c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002a30:	4b6e      	ldr	r3, [pc, #440]	; (8002bec <HAL_LTDC_MspInit+0x1f0>)
 8002a32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	623b      	str	r3, [r7, #32]
 8002a3c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a3e:	4b6b      	ldr	r3, [pc, #428]	; (8002bec <HAL_LTDC_MspInit+0x1f0>)
 8002a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a44:	4a69      	ldr	r2, [pc, #420]	; (8002bec <HAL_LTDC_MspInit+0x1f0>)
 8002a46:	f043 0310 	orr.w	r3, r3, #16
 8002a4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a4e:	4b67      	ldr	r3, [pc, #412]	; (8002bec <HAL_LTDC_MspInit+0x1f0>)
 8002a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a54:	f003 0310 	and.w	r3, r3, #16
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002a5c:	4b63      	ldr	r3, [pc, #396]	; (8002bec <HAL_LTDC_MspInit+0x1f0>)
 8002a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a62:	4a62      	ldr	r2, [pc, #392]	; (8002bec <HAL_LTDC_MspInit+0x1f0>)
 8002a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a6c:	4b5f      	ldr	r3, [pc, #380]	; (8002bec <HAL_LTDC_MspInit+0x1f0>)
 8002a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a76:	61bb      	str	r3, [r7, #24]
 8002a78:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a7a:	4b5c      	ldr	r3, [pc, #368]	; (8002bec <HAL_LTDC_MspInit+0x1f0>)
 8002a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a80:	4a5a      	ldr	r2, [pc, #360]	; (8002bec <HAL_LTDC_MspInit+0x1f0>)
 8002a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a8a:	4b58      	ldr	r3, [pc, #352]	; (8002bec <HAL_LTDC_MspInit+0x1f0>)
 8002a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a98:	4b54      	ldr	r3, [pc, #336]	; (8002bec <HAL_LTDC_MspInit+0x1f0>)
 8002a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a9e:	4a53      	ldr	r2, [pc, #332]	; (8002bec <HAL_LTDC_MspInit+0x1f0>)
 8002aa0:	f043 0308 	orr.w	r3, r3, #8
 8002aa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002aa8:	4b50      	ldr	r3, [pc, #320]	; (8002bec <HAL_LTDC_MspInit+0x1f0>)
 8002aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002ab6:	4b4d      	ldr	r3, [pc, #308]	; (8002bec <HAL_LTDC_MspInit+0x1f0>)
 8002ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002abc:	4a4b      	ldr	r2, [pc, #300]	; (8002bec <HAL_LTDC_MspInit+0x1f0>)
 8002abe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ac2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ac6:	4b49      	ldr	r3, [pc, #292]	; (8002bec <HAL_LTDC_MspInit+0x1f0>)
 8002ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ad4:	4b45      	ldr	r3, [pc, #276]	; (8002bec <HAL_LTDC_MspInit+0x1f0>)
 8002ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ada:	4a44      	ldr	r2, [pc, #272]	; (8002bec <HAL_LTDC_MspInit+0x1f0>)
 8002adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ae4:	4b41      	ldr	r3, [pc, #260]	; (8002bec <HAL_LTDC_MspInit+0x1f0>)
 8002ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aee:	60bb      	str	r3, [r7, #8]
 8002af0:	68bb      	ldr	r3, [r7, #8]
    PI4     ------> LTDC_B4
    PI5     ------> LTDC_B5
    PI6     ------> LTDC_B6
    PI7     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_13
 8002af2:	f24e 0370 	movw	r3, #57456	; 0xe070
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af8:	2302      	movs	r3, #2
 8002afa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b00:	2300      	movs	r3, #0
 8002b02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b04:	230e      	movs	r3, #14
 8002b06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4838      	ldr	r0, [pc, #224]	; (8002bf0 <HAL_LTDC_MspInit+0x1f4>)
 8002b10:	f003 f96e 	bl	8005df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_4
 8002b14:	f240 63f1 	movw	r3, #1777	; 0x6f1
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b22:	2300      	movs	r3, #0
 8002b24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b26:	230e      	movs	r3, #14
 8002b28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4830      	ldr	r0, [pc, #192]	; (8002bf4 <HAL_LTDC_MspInit+0x1f8>)
 8002b32:	f003 f95d 	bl	8005df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_15;
 8002b36:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b44:	2300      	movs	r3, #0
 8002b46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002b48:	2309      	movs	r3, #9
 8002b4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b50:	4619      	mov	r1, r3
 8002b52:	4828      	ldr	r0, [pc, #160]	; (8002bf4 <HAL_LTDC_MspInit+0x1f8>)
 8002b54:	f003 f94c 	bl	8005df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8002b58:	f64d 730c 	movw	r3, #57100	; 0xdf0c
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14
                          |GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b66:	2300      	movs	r3, #0
 8002b68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b6a:	230e      	movs	r3, #14
 8002b6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b72:	4619      	mov	r1, r3
 8002b74:	4820      	ldr	r0, [pc, #128]	; (8002bf8 <HAL_LTDC_MspInit+0x1fc>)
 8002b76:	f003 f93b 	bl	8005df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b80:	2302      	movs	r3, #2
 8002b82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b8c:	230e      	movs	r3, #14
 8002b8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b94:	4619      	mov	r1, r3
 8002b96:	4819      	ldr	r0, [pc, #100]	; (8002bfc <HAL_LTDC_MspInit+0x200>)
 8002b98:	f003 f92a 	bl	8005df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b9c:	2304      	movs	r3, #4
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bac:	230e      	movs	r3, #14
 8002bae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4812      	ldr	r0, [pc, #72]	; (8002c00 <HAL_LTDC_MspInit+0x204>)
 8002bb8:	f003 f91a 	bl	8005df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002bbc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bce:	230e      	movs	r3, #14
 8002bd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	480a      	ldr	r0, [pc, #40]	; (8002c04 <HAL_LTDC_MspInit+0x208>)
 8002bda:	f003 f909 	bl	8005df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002bde:	bf00      	nop
 8002be0:	3738      	adds	r7, #56	; 0x38
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	50001000 	.word	0x50001000
 8002bec:	58024400 	.word	0x58024400
 8002bf0:	58021000 	.word	0x58021000
 8002bf4:	58022000 	.word	0x58022000
 8002bf8:	58021c00 	.word	0x58021c00
 8002bfc:	58020c00 	.word	0x58020c00
 8002c00:	58022800 	.word	0x58022800
 8002c04:	58021800 	.word	0x58021800

08002c08 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b08a      	sub	sp, #40	; 0x28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c10:	f107 0314 	add.w	r3, r7, #20
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	605a      	str	r2, [r3, #4]
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	60da      	str	r2, [r3, #12]
 8002c1e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC2)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a2a      	ldr	r2, [pc, #168]	; (8002cd0 <HAL_SD_MspInit+0xc8>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d14d      	bne.n	8002cc6 <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002c2a:	4b2a      	ldr	r3, [pc, #168]	; (8002cd4 <HAL_SD_MspInit+0xcc>)
 8002c2c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002c30:	4a28      	ldr	r2, [pc, #160]	; (8002cd4 <HAL_SD_MspInit+0xcc>)
 8002c32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c36:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002c3a:	4b26      	ldr	r3, [pc, #152]	; (8002cd4 <HAL_SD_MspInit+0xcc>)
 8002c3c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002c40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c48:	4b22      	ldr	r3, [pc, #136]	; (8002cd4 <HAL_SD_MspInit+0xcc>)
 8002c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c4e:	4a21      	ldr	r2, [pc, #132]	; (8002cd4 <HAL_SD_MspInit+0xcc>)
 8002c50:	f043 0302 	orr.w	r3, r3, #2
 8002c54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c58:	4b1e      	ldr	r3, [pc, #120]	; (8002cd4 <HAL_SD_MspInit+0xcc>)
 8002c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c66:	4b1b      	ldr	r3, [pc, #108]	; (8002cd4 <HAL_SD_MspInit+0xcc>)
 8002c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c6c:	4a19      	ldr	r2, [pc, #100]	; (8002cd4 <HAL_SD_MspInit+0xcc>)
 8002c6e:	f043 0308 	orr.w	r3, r3, #8
 8002c72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c76:	4b17      	ldr	r3, [pc, #92]	; (8002cd4 <HAL_SD_MspInit+0xcc>)
 8002c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC2 GPIO Configuration
    PB14     ------> SDMMC2_D0
    PD6     ------> SDMMC2_CK
    PD7     ------> SDMMC2_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002c84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c92:	2303      	movs	r3, #3
 8002c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 8002c96:	2309      	movs	r3, #9
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c9a:	f107 0314 	add.w	r3, r7, #20
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	480d      	ldr	r0, [pc, #52]	; (8002cd8 <HAL_SD_MspInit+0xd0>)
 8002ca2:	f003 f8a5 	bl	8005df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ca6:	23c0      	movs	r3, #192	; 0xc0
 8002ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002caa:	2302      	movs	r3, #2
 8002cac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_SDIO2;
 8002cb6:	230b      	movs	r3, #11
 8002cb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cba:	f107 0314 	add.w	r3, r7, #20
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4806      	ldr	r0, [pc, #24]	; (8002cdc <HAL_SD_MspInit+0xd4>)
 8002cc2:	f003 f895 	bl	8005df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8002cc6:	bf00      	nop
 8002cc8:	3728      	adds	r7, #40	; 0x28
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	48022400 	.word	0x48022400
 8002cd4:	58024400 	.word	0x58024400
 8002cd8:	58020400 	.word	0x58020400
 8002cdc:	58020c00 	.word	0x58020c00

08002ce0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08c      	sub	sp, #48	; 0x30
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce8:	f107 031c 	add.w	r3, r7, #28
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	605a      	str	r2, [r3, #4]
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	60da      	str	r2, [r3, #12]
 8002cf6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a3a      	ldr	r2, [pc, #232]	; (8002de8 <HAL_SPI_MspInit+0x108>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d16d      	bne.n	8002dde <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002d02:	4b3a      	ldr	r3, [pc, #232]	; (8002dec <HAL_SPI_MspInit+0x10c>)
 8002d04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d08:	4a38      	ldr	r2, [pc, #224]	; (8002dec <HAL_SPI_MspInit+0x10c>)
 8002d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d0e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d12:	4b36      	ldr	r3, [pc, #216]	; (8002dec <HAL_SPI_MspInit+0x10c>)
 8002d14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d1c:	61bb      	str	r3, [r7, #24]
 8002d1e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d20:	4b32      	ldr	r3, [pc, #200]	; (8002dec <HAL_SPI_MspInit+0x10c>)
 8002d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d26:	4a31      	ldr	r2, [pc, #196]	; (8002dec <HAL_SPI_MspInit+0x10c>)
 8002d28:	f043 0302 	orr.w	r3, r3, #2
 8002d2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d30:	4b2e      	ldr	r3, [pc, #184]	; (8002dec <HAL_SPI_MspInit+0x10c>)
 8002d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d3e:	4b2b      	ldr	r3, [pc, #172]	; (8002dec <HAL_SPI_MspInit+0x10c>)
 8002d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d44:	4a29      	ldr	r2, [pc, #164]	; (8002dec <HAL_SPI_MspInit+0x10c>)
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d4e:	4b27      	ldr	r3, [pc, #156]	; (8002dec <HAL_SPI_MspInit+0x10c>)
 8002d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	613b      	str	r3, [r7, #16]
 8002d5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d5c:	4b23      	ldr	r3, [pc, #140]	; (8002dec <HAL_SPI_MspInit+0x10c>)
 8002d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d62:	4a22      	ldr	r2, [pc, #136]	; (8002dec <HAL_SPI_MspInit+0x10c>)
 8002d64:	f043 0304 	orr.w	r3, r3, #4
 8002d68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d6c:	4b1f      	ldr	r3, [pc, #124]	; (8002dec <HAL_SPI_MspInit+0x10c>)
 8002d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d72:	f003 0304 	and.w	r3, r3, #4
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> SPI3_MOSI
    PA15 (JTDI)     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d7a:	2304      	movs	r3, #4
 8002d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d82:	2300      	movs	r3, #0
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d86:	2300      	movs	r3, #0
 8002d88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002d8a:	2307      	movs	r3, #7
 8002d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d8e:	f107 031c 	add.w	r3, r7, #28
 8002d92:	4619      	mov	r1, r3
 8002d94:	4816      	ldr	r0, [pc, #88]	; (8002df0 <HAL_SPI_MspInit+0x110>)
 8002d96:	f003 f82b 	bl	8005df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da0:	2302      	movs	r3, #2
 8002da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da8:	2300      	movs	r3, #0
 8002daa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002dac:	2306      	movs	r3, #6
 8002dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db0:	f107 031c 	add.w	r3, r7, #28
 8002db4:	4619      	mov	r1, r3
 8002db6:	480f      	ldr	r0, [pc, #60]	; (8002df4 <HAL_SPI_MspInit+0x114>)
 8002db8:	f003 f81a 	bl	8005df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002dbc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002dce:	2306      	movs	r3, #6
 8002dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dd2:	f107 031c 	add.w	r3, r7, #28
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4807      	ldr	r0, [pc, #28]	; (8002df8 <HAL_SPI_MspInit+0x118>)
 8002dda:	f003 f809 	bl	8005df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002dde:	bf00      	nop
 8002de0:	3730      	adds	r7, #48	; 0x30
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40003c00 	.word	0x40003c00
 8002dec:	58024400 	.word	0x58024400
 8002df0:	58020400 	.word	0x58020400
 8002df4:	58020000 	.word	0x58020000
 8002df8:	58020800 	.word	0x58020800

08002dfc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08c      	sub	sp, #48	; 0x30
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e04:	f107 031c 	add.w	r3, r7, #28
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	609a      	str	r2, [r3, #8]
 8002e10:	60da      	str	r2, [r3, #12]
 8002e12:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a3a      	ldr	r2, [pc, #232]	; (8002f04 <HAL_TIM_PWM_MspInit+0x108>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d10f      	bne.n	8002e3e <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e1e:	4b3a      	ldr	r3, [pc, #232]	; (8002f08 <HAL_TIM_PWM_MspInit+0x10c>)
 8002e20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e24:	4a38      	ldr	r2, [pc, #224]	; (8002f08 <HAL_TIM_PWM_MspInit+0x10c>)
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002e2e:	4b36      	ldr	r3, [pc, #216]	; (8002f08 <HAL_TIM_PWM_MspInit+0x10c>)
 8002e30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	61bb      	str	r3, [r7, #24]
 8002e3a:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002e3c:	e05d      	b.n	8002efa <HAL_TIM_PWM_MspInit+0xfe>
  else if(htim_pwm->Instance==TIM4)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a32      	ldr	r2, [pc, #200]	; (8002f0c <HAL_TIM_PWM_MspInit+0x110>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d12f      	bne.n	8002ea8 <HAL_TIM_PWM_MspInit+0xac>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e48:	4b2f      	ldr	r3, [pc, #188]	; (8002f08 <HAL_TIM_PWM_MspInit+0x10c>)
 8002e4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e4e:	4a2e      	ldr	r2, [pc, #184]	; (8002f08 <HAL_TIM_PWM_MspInit+0x10c>)
 8002e50:	f043 0304 	orr.w	r3, r3, #4
 8002e54:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e58:	4b2b      	ldr	r3, [pc, #172]	; (8002f08 <HAL_TIM_PWM_MspInit+0x10c>)
 8002e5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	617b      	str	r3, [r7, #20]
 8002e64:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e66:	4b28      	ldr	r3, [pc, #160]	; (8002f08 <HAL_TIM_PWM_MspInit+0x10c>)
 8002e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e6c:	4a26      	ldr	r2, [pc, #152]	; (8002f08 <HAL_TIM_PWM_MspInit+0x10c>)
 8002e6e:	f043 0308 	orr.w	r3, r3, #8
 8002e72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e76:	4b24      	ldr	r3, [pc, #144]	; (8002f08 <HAL_TIM_PWM_MspInit+0x10c>)
 8002e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e7c:	f003 0308 	and.w	r3, r3, #8
 8002e80:	613b      	str	r3, [r7, #16]
 8002e82:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002e84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e92:	2300      	movs	r3, #0
 8002e94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e96:	2302      	movs	r3, #2
 8002e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e9a:	f107 031c 	add.w	r3, r7, #28
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	481b      	ldr	r0, [pc, #108]	; (8002f10 <HAL_TIM_PWM_MspInit+0x114>)
 8002ea2:	f002 ffa5 	bl	8005df0 <HAL_GPIO_Init>
}
 8002ea6:	e028      	b.n	8002efa <HAL_TIM_PWM_MspInit+0xfe>
  else if(htim_pwm->Instance==TIM8)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a19      	ldr	r2, [pc, #100]	; (8002f14 <HAL_TIM_PWM_MspInit+0x118>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d10f      	bne.n	8002ed2 <HAL_TIM_PWM_MspInit+0xd6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002eb2:	4b15      	ldr	r3, [pc, #84]	; (8002f08 <HAL_TIM_PWM_MspInit+0x10c>)
 8002eb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002eb8:	4a13      	ldr	r2, [pc, #76]	; (8002f08 <HAL_TIM_PWM_MspInit+0x10c>)
 8002eba:	f043 0302 	orr.w	r3, r3, #2
 8002ebe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002ec2:	4b11      	ldr	r3, [pc, #68]	; (8002f08 <HAL_TIM_PWM_MspInit+0x10c>)
 8002ec4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	68fb      	ldr	r3, [r7, #12]
}
 8002ed0:	e013      	b.n	8002efa <HAL_TIM_PWM_MspInit+0xfe>
  else if(htim_pwm->Instance==TIM12)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a10      	ldr	r2, [pc, #64]	; (8002f18 <HAL_TIM_PWM_MspInit+0x11c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d10e      	bne.n	8002efa <HAL_TIM_PWM_MspInit+0xfe>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002edc:	4b0a      	ldr	r3, [pc, #40]	; (8002f08 <HAL_TIM_PWM_MspInit+0x10c>)
 8002ede:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ee2:	4a09      	ldr	r2, [pc, #36]	; (8002f08 <HAL_TIM_PWM_MspInit+0x10c>)
 8002ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ee8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002eec:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <HAL_TIM_PWM_MspInit+0x10c>)
 8002eee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef6:	60bb      	str	r3, [r7, #8]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
}
 8002efa:	bf00      	nop
 8002efc:	3730      	adds	r7, #48	; 0x30
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40010000 	.word	0x40010000
 8002f08:	58024400 	.word	0x58024400
 8002f0c:	40000800 	.word	0x40000800
 8002f10:	58020c00 	.word	0x58020c00
 8002f14:	40010400 	.word	0x40010400
 8002f18:	40001800 	.word	0x40001800

08002f1c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08a      	sub	sp, #40	; 0x28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f24:	f107 0314 	add.w	r3, r7, #20
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	605a      	str	r2, [r3, #4]
 8002f2e:	609a      	str	r2, [r3, #8]
 8002f30:	60da      	str	r2, [r3, #12]
 8002f32:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM5)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a1a      	ldr	r2, [pc, #104]	; (8002fa4 <HAL_TIM_IC_MspInit+0x88>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d12d      	bne.n	8002f9a <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002f3e:	4b1a      	ldr	r3, [pc, #104]	; (8002fa8 <HAL_TIM_IC_MspInit+0x8c>)
 8002f40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f44:	4a18      	ldr	r2, [pc, #96]	; (8002fa8 <HAL_TIM_IC_MspInit+0x8c>)
 8002f46:	f043 0308 	orr.w	r3, r3, #8
 8002f4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f4e:	4b16      	ldr	r3, [pc, #88]	; (8002fa8 <HAL_TIM_IC_MspInit+0x8c>)
 8002f50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f54:	f003 0308 	and.w	r3, r3, #8
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f5c:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <HAL_TIM_IC_MspInit+0x8c>)
 8002f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f62:	4a11      	ldr	r2, [pc, #68]	; (8002fa8 <HAL_TIM_IC_MspInit+0x8c>)
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f6c:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <HAL_TIM_IC_MspInit+0x8c>)
 8002f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7e:	2302      	movs	r3, #2
 8002f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f86:	2300      	movs	r3, #0
 8002f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f8e:	f107 0314 	add.w	r3, r7, #20
 8002f92:	4619      	mov	r1, r3
 8002f94:	4805      	ldr	r0, [pc, #20]	; (8002fac <HAL_TIM_IC_MspInit+0x90>)
 8002f96:	f002 ff2b 	bl	8005df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002f9a:	bf00      	nop
 8002f9c:	3728      	adds	r7, #40	; 0x28
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40000c00 	.word	0x40000c00
 8002fa8:	58024400 	.word	0x58024400
 8002fac:	58020000 	.word	0x58020000

08002fb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a16      	ldr	r2, [pc, #88]	; (8003018 <HAL_TIM_Base_MspInit+0x68>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d10f      	bne.n	8002fe2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002fc2:	4b16      	ldr	r3, [pc, #88]	; (800301c <HAL_TIM_Base_MspInit+0x6c>)
 8002fc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fc8:	4a14      	ldr	r2, [pc, #80]	; (800301c <HAL_TIM_Base_MspInit+0x6c>)
 8002fca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002fd2:	4b12      	ldr	r3, [pc, #72]	; (800301c <HAL_TIM_Base_MspInit+0x6c>)
 8002fd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002fe0:	e013      	b.n	800300a <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM17)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a0e      	ldr	r2, [pc, #56]	; (8003020 <HAL_TIM_Base_MspInit+0x70>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d10e      	bne.n	800300a <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002fec:	4b0b      	ldr	r3, [pc, #44]	; (800301c <HAL_TIM_Base_MspInit+0x6c>)
 8002fee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ff2:	4a0a      	ldr	r2, [pc, #40]	; (800301c <HAL_TIM_Base_MspInit+0x6c>)
 8002ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ff8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002ffc:	4b07      	ldr	r3, [pc, #28]	; (800301c <HAL_TIM_Base_MspInit+0x6c>)
 8002ffe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003002:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003006:	60bb      	str	r3, [r7, #8]
 8003008:	68bb      	ldr	r3, [r7, #8]
}
 800300a:	bf00      	nop
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40014400 	.word	0x40014400
 800301c:	58024400 	.word	0x58024400
 8003020:	40014800 	.word	0x40014800

08003024 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b092      	sub	sp, #72	; 0x48
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800302c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	605a      	str	r2, [r3, #4]
 8003036:	609a      	str	r2, [r3, #8]
 8003038:	60da      	str	r2, [r3, #12]
 800303a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4aac      	ldr	r2, [pc, #688]	; (80032f4 <HAL_TIM_MspPostInit+0x2d0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d140      	bne.n	80030c8 <HAL_TIM_MspPostInit+0xa4>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003046:	4bac      	ldr	r3, [pc, #688]	; (80032f8 <HAL_TIM_MspPostInit+0x2d4>)
 8003048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800304c:	4aaa      	ldr	r2, [pc, #680]	; (80032f8 <HAL_TIM_MspPostInit+0x2d4>)
 800304e:	f043 0310 	orr.w	r3, r3, #16
 8003052:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003056:	4ba8      	ldr	r3, [pc, #672]	; (80032f8 <HAL_TIM_MspPostInit+0x2d4>)
 8003058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800305c:	f003 0310 	and.w	r3, r3, #16
 8003060:	633b      	str	r3, [r7, #48]	; 0x30
 8003062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003064:	4ba4      	ldr	r3, [pc, #656]	; (80032f8 <HAL_TIM_MspPostInit+0x2d4>)
 8003066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800306a:	4aa3      	ldr	r2, [pc, #652]	; (80032f8 <HAL_TIM_MspPostInit+0x2d4>)
 800306c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003070:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003074:	4ba0      	ldr	r3, [pc, #640]	; (80032f8 <HAL_TIM_MspPostInit+0x2d4>)
 8003076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800307a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800307e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    PE12     ------> TIM1_CH3N
    PJ9     ------> TIM1_CH3
    PJ10     ------> TIM1_CH2N
    PJ11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12;
 8003082:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8003086:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003088:	2302      	movs	r3, #2
 800308a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308c:	2300      	movs	r3, #0
 800308e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003090:	2300      	movs	r3, #0
 8003092:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003094:	2301      	movs	r3, #1
 8003096:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003098:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800309c:	4619      	mov	r1, r3
 800309e:	4897      	ldr	r0, [pc, #604]	; (80032fc <HAL_TIM_MspPostInit+0x2d8>)
 80030a0:	f002 fea6 	bl	8005df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80030a4:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 80030a8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030aa:	2302      	movs	r3, #2
 80030ac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b2:	2300      	movs	r3, #0
 80030b4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80030b6:	2301      	movs	r3, #1
 80030b8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80030ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80030be:	4619      	mov	r1, r3
 80030c0:	488f      	ldr	r0, [pc, #572]	; (8003300 <HAL_TIM_MspPostInit+0x2dc>)
 80030c2:	f002 fe95 	bl	8005df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80030c6:	e154      	b.n	8003372 <HAL_TIM_MspPostInit+0x34e>
  else if(htim->Instance==TIM4)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a8d      	ldr	r2, [pc, #564]	; (8003304 <HAL_TIM_MspPostInit+0x2e0>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d120      	bne.n	8003114 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030d2:	4b89      	ldr	r3, [pc, #548]	; (80032f8 <HAL_TIM_MspPostInit+0x2d4>)
 80030d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030d8:	4a87      	ldr	r2, [pc, #540]	; (80032f8 <HAL_TIM_MspPostInit+0x2d4>)
 80030da:	f043 0308 	orr.w	r3, r3, #8
 80030de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030e2:	4b85      	ldr	r3, [pc, #532]	; (80032f8 <HAL_TIM_MspPostInit+0x2d4>)
 80030e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80030f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030f4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f6:	2302      	movs	r3, #2
 80030f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030fe:	2300      	movs	r3, #0
 8003100:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003102:	2302      	movs	r3, #2
 8003104:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003106:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800310a:	4619      	mov	r1, r3
 800310c:	487e      	ldr	r0, [pc, #504]	; (8003308 <HAL_TIM_MspPostInit+0x2e4>)
 800310e:	f002 fe6f 	bl	8005df0 <HAL_GPIO_Init>
}
 8003112:	e12e      	b.n	8003372 <HAL_TIM_MspPostInit+0x34e>
  else if(htim->Instance==TIM8)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a7c      	ldr	r2, [pc, #496]	; (800330c <HAL_TIM_MspPostInit+0x2e8>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d17e      	bne.n	800321c <HAL_TIM_MspPostInit+0x1f8>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800311e:	4b76      	ldr	r3, [pc, #472]	; (80032f8 <HAL_TIM_MspPostInit+0x2d4>)
 8003120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003124:	4a74      	ldr	r2, [pc, #464]	; (80032f8 <HAL_TIM_MspPostInit+0x2d4>)
 8003126:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800312a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800312e:	4b72      	ldr	r3, [pc, #456]	; (80032f8 <HAL_TIM_MspPostInit+0x2d4>)
 8003130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800313c:	4b6e      	ldr	r3, [pc, #440]	; (80032f8 <HAL_TIM_MspPostInit+0x2d4>)
 800313e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003142:	4a6d      	ldr	r2, [pc, #436]	; (80032f8 <HAL_TIM_MspPostInit+0x2d4>)
 8003144:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003148:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800314c:	4b6a      	ldr	r3, [pc, #424]	; (80032f8 <HAL_TIM_MspPostInit+0x2d4>)
 800314e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003156:	623b      	str	r3, [r7, #32]
 8003158:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800315a:	4b67      	ldr	r3, [pc, #412]	; (80032f8 <HAL_TIM_MspPostInit+0x2d4>)
 800315c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003160:	4a65      	ldr	r2, [pc, #404]	; (80032f8 <HAL_TIM_MspPostInit+0x2d4>)
 8003162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003166:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800316a:	4b63      	ldr	r3, [pc, #396]	; (80032f8 <HAL_TIM_MspPostInit+0x2d4>)
 800316c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003174:	61fb      	str	r3, [r7, #28]
 8003176:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003178:	4b5f      	ldr	r3, [pc, #380]	; (80032f8 <HAL_TIM_MspPostInit+0x2d4>)
 800317a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800317e:	4a5e      	ldr	r2, [pc, #376]	; (80032f8 <HAL_TIM_MspPostInit+0x2d4>)
 8003180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003184:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003188:	4b5b      	ldr	r3, [pc, #364]	; (80032f8 <HAL_TIM_MspPostInit+0x2d4>)
 800318a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800318e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003192:	61bb      	str	r3, [r7, #24]
 8003194:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8003196:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800319a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319c:	2302      	movs	r3, #2
 800319e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a0:	2300      	movs	r3, #0
 80031a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a4:	2300      	movs	r3, #0
 80031a6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80031a8:	2303      	movs	r3, #3
 80031aa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80031ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031b0:	4619      	mov	r1, r3
 80031b2:	4853      	ldr	r0, [pc, #332]	; (8003300 <HAL_TIM_MspPostInit+0x2dc>)
 80031b4:	f002 fe1c 	bl	8005df0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80031b8:	2303      	movs	r3, #3
 80031ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031bc:	2302      	movs	r3, #2
 80031be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c0:	2300      	movs	r3, #0
 80031c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c4:	2300      	movs	r3, #0
 80031c6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80031c8:	2303      	movs	r3, #3
 80031ca:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80031cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031d0:	4619      	mov	r1, r3
 80031d2:	484f      	ldr	r0, [pc, #316]	; (8003310 <HAL_TIM_MspPostInit+0x2ec>)
 80031d4:	f002 fe0c 	bl	8005df0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80031d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031dc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031de:	2302      	movs	r3, #2
 80031e0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e2:	2300      	movs	r3, #0
 80031e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e6:	2300      	movs	r3, #0
 80031e8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80031ea:	2303      	movs	r3, #3
 80031ec:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80031ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031f2:	4619      	mov	r1, r3
 80031f4:	4847      	ldr	r0, [pc, #284]	; (8003314 <HAL_TIM_MspPostInit+0x2f0>)
 80031f6:	f002 fdfb 	bl	8005df0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80031fa:	2304      	movs	r3, #4
 80031fc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fe:	2302      	movs	r3, #2
 8003200:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003202:	2300      	movs	r3, #0
 8003204:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003206:	2300      	movs	r3, #0
 8003208:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800320a:	2303      	movs	r3, #3
 800320c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800320e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003212:	4619      	mov	r1, r3
 8003214:	4840      	ldr	r0, [pc, #256]	; (8003318 <HAL_TIM_MspPostInit+0x2f4>)
 8003216:	f002 fdeb 	bl	8005df0 <HAL_GPIO_Init>
}
 800321a:	e0aa      	b.n	8003372 <HAL_TIM_MspPostInit+0x34e>
  else if(htim->Instance==TIM12)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a3e      	ldr	r2, [pc, #248]	; (800331c <HAL_TIM_MspPostInit+0x2f8>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d13f      	bne.n	80032a6 <HAL_TIM_MspPostInit+0x282>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003226:	4b34      	ldr	r3, [pc, #208]	; (80032f8 <HAL_TIM_MspPostInit+0x2d4>)
 8003228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800322c:	4a32      	ldr	r2, [pc, #200]	; (80032f8 <HAL_TIM_MspPostInit+0x2d4>)
 800322e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003232:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003236:	4b30      	ldr	r3, [pc, #192]	; (80032f8 <HAL_TIM_MspPostInit+0x2d4>)
 8003238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800323c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003244:	4b2c      	ldr	r3, [pc, #176]	; (80032f8 <HAL_TIM_MspPostInit+0x2d4>)
 8003246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800324a:	4a2b      	ldr	r2, [pc, #172]	; (80032f8 <HAL_TIM_MspPostInit+0x2d4>)
 800324c:	f043 0302 	orr.w	r3, r3, #2
 8003250:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003254:	4b28      	ldr	r3, [pc, #160]	; (80032f8 <HAL_TIM_MspPostInit+0x2d4>)
 8003256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003262:	2340      	movs	r3, #64	; 0x40
 8003264:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003266:	2302      	movs	r3, #2
 8003268:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326a:	2300      	movs	r3, #0
 800326c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800326e:	2300      	movs	r3, #0
 8003270:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8003272:	2302      	movs	r3, #2
 8003274:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003276:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800327a:	4619      	mov	r1, r3
 800327c:	4825      	ldr	r0, [pc, #148]	; (8003314 <HAL_TIM_MspPostInit+0x2f0>)
 800327e:	f002 fdb7 	bl	8005df0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = maxCNVST_Pin;
 8003282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003286:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003288:	2302      	movs	r3, #2
 800328a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328c:	2300      	movs	r3, #0
 800328e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003290:	2300      	movs	r3, #0
 8003292:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8003294:	2302      	movs	r3, #2
 8003296:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(maxCNVST_GPIO_Port, &GPIO_InitStruct);
 8003298:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800329c:	4619      	mov	r1, r3
 800329e:	4820      	ldr	r0, [pc, #128]	; (8003320 <HAL_TIM_MspPostInit+0x2fc>)
 80032a0:	f002 fda6 	bl	8005df0 <HAL_GPIO_Init>
}
 80032a4:	e065      	b.n	8003372 <HAL_TIM_MspPostInit+0x34e>
  else if(htim->Instance==TIM16)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a1e      	ldr	r2, [pc, #120]	; (8003324 <HAL_TIM_MspPostInit+0x300>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d13b      	bne.n	8003328 <HAL_TIM_MspPostInit+0x304>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032b0:	4b11      	ldr	r3, [pc, #68]	; (80032f8 <HAL_TIM_MspPostInit+0x2d4>)
 80032b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032b6:	4a10      	ldr	r2, [pc, #64]	; (80032f8 <HAL_TIM_MspPostInit+0x2d4>)
 80032b8:	f043 0302 	orr.w	r3, r3, #2
 80032bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032c0:	4b0d      	ldr	r3, [pc, #52]	; (80032f8 <HAL_TIM_MspPostInit+0x2d4>)
 80032c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 80032ce:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80032d2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d4:	2302      	movs	r3, #2
 80032d6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d8:	2300      	movs	r3, #0
 80032da:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032dc:	2300      	movs	r3, #0
 80032de:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80032e0:	2301      	movs	r3, #1
 80032e2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80032e8:	4619      	mov	r1, r3
 80032ea:	480d      	ldr	r0, [pc, #52]	; (8003320 <HAL_TIM_MspPostInit+0x2fc>)
 80032ec:	f002 fd80 	bl	8005df0 <HAL_GPIO_Init>
}
 80032f0:	e03f      	b.n	8003372 <HAL_TIM_MspPostInit+0x34e>
 80032f2:	bf00      	nop
 80032f4:	40010000 	.word	0x40010000
 80032f8:	58024400 	.word	0x58024400
 80032fc:	58021000 	.word	0x58021000
 8003300:	58022400 	.word	0x58022400
 8003304:	40000800 	.word	0x40000800
 8003308:	58020c00 	.word	0x58020c00
 800330c:	40010400 	.word	0x40010400
 8003310:	58022800 	.word	0x58022800
 8003314:	58021c00 	.word	0x58021c00
 8003318:	58022000 	.word	0x58022000
 800331c:	40001800 	.word	0x40001800
 8003320:	58020400 	.word	0x58020400
 8003324:	40014400 	.word	0x40014400
  else if(htim->Instance==TIM17)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a13      	ldr	r2, [pc, #76]	; (800337c <HAL_TIM_MspPostInit+0x358>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d11f      	bne.n	8003372 <HAL_TIM_MspPostInit+0x34e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003332:	4b13      	ldr	r3, [pc, #76]	; (8003380 <HAL_TIM_MspPostInit+0x35c>)
 8003334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003338:	4a11      	ldr	r2, [pc, #68]	; (8003380 <HAL_TIM_MspPostInit+0x35c>)
 800333a:	f043 0302 	orr.w	r3, r3, #2
 800333e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003342:	4b0f      	ldr	r3, [pc, #60]	; (8003380 <HAL_TIM_MspPostInit+0x35c>)
 8003344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8003350:	f44f 7320 	mov.w	r3, #640	; 0x280
 8003354:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003356:	2302      	movs	r3, #2
 8003358:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335a:	2300      	movs	r3, #0
 800335c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335e:	2300      	movs	r3, #0
 8003360:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8003362:	2301      	movs	r3, #1
 8003364:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003366:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800336a:	4619      	mov	r1, r3
 800336c:	4805      	ldr	r0, [pc, #20]	; (8003384 <HAL_TIM_MspPostInit+0x360>)
 800336e:	f002 fd3f 	bl	8005df0 <HAL_GPIO_Init>
}
 8003372:	bf00      	nop
 8003374:	3748      	adds	r7, #72	; 0x48
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40014800 	.word	0x40014800
 8003380:	58024400 	.word	0x58024400
 8003384:	58020400 	.word	0x58020400

08003388 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b092      	sub	sp, #72	; 0x48
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003390:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	605a      	str	r2, [r3, #4]
 800339a:	609a      	str	r2, [r3, #8]
 800339c:	60da      	str	r2, [r3, #12]
 800339e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a88      	ldr	r2, [pc, #544]	; (80035c8 <HAL_UART_MspInit+0x240>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d14e      	bne.n	8003448 <HAL_UART_MspInit+0xc0>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80033aa:	4b88      	ldr	r3, [pc, #544]	; (80035cc <HAL_UART_MspInit+0x244>)
 80033ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033b0:	4a86      	ldr	r2, [pc, #536]	; (80035cc <HAL_UART_MspInit+0x244>)
 80033b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80033ba:	4b84      	ldr	r3, [pc, #528]	; (80035cc <HAL_UART_MspInit+0x244>)
 80033bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033c4:	633b      	str	r3, [r7, #48]	; 0x30
 80033c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033c8:	4b80      	ldr	r3, [pc, #512]	; (80035cc <HAL_UART_MspInit+0x244>)
 80033ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033ce:	4a7f      	ldr	r2, [pc, #508]	; (80035cc <HAL_UART_MspInit+0x244>)
 80033d0:	f043 0304 	orr.w	r3, r3, #4
 80033d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033d8:	4b7c      	ldr	r3, [pc, #496]	; (80035cc <HAL_UART_MspInit+0x244>)
 80033da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033de:	f003 0304 	and.w	r3, r3, #4
 80033e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033e6:	4b79      	ldr	r3, [pc, #484]	; (80035cc <HAL_UART_MspInit+0x244>)
 80033e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033ec:	4a77      	ldr	r2, [pc, #476]	; (80035cc <HAL_UART_MspInit+0x244>)
 80033ee:	f043 0308 	orr.w	r3, r3, #8
 80033f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033f6:	4b75      	ldr	r3, [pc, #468]	; (80035cc <HAL_UART_MspInit+0x244>)
 80033f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	62bb      	str	r3, [r7, #40]	; 0x28
 8003402:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003408:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340a:	2302      	movs	r3, #2
 800340c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340e:	2300      	movs	r3, #0
 8003410:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003412:	2300      	movs	r3, #0
 8003414:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003416:	2308      	movs	r3, #8
 8003418:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800341a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800341e:	4619      	mov	r1, r3
 8003420:	486b      	ldr	r0, [pc, #428]	; (80035d0 <HAL_UART_MspInit+0x248>)
 8003422:	f002 fce5 	bl	8005df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003426:	2304      	movs	r3, #4
 8003428:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342a:	2302      	movs	r3, #2
 800342c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342e:	2300      	movs	r3, #0
 8003430:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003432:	2300      	movs	r3, #0
 8003434:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003436:	2308      	movs	r3, #8
 8003438:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800343a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800343e:	4619      	mov	r1, r3
 8003440:	4864      	ldr	r0, [pc, #400]	; (80035d4 <HAL_UART_MspInit+0x24c>)
 8003442:	f002 fcd5 	bl	8005df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003446:	e0bb      	b.n	80035c0 <HAL_UART_MspInit+0x238>
  else if(huart->Instance==UART7)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a62      	ldr	r2, [pc, #392]	; (80035d8 <HAL_UART_MspInit+0x250>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d12e      	bne.n	80034b0 <HAL_UART_MspInit+0x128>
    __HAL_RCC_UART7_CLK_ENABLE();
 8003452:	4b5e      	ldr	r3, [pc, #376]	; (80035cc <HAL_UART_MspInit+0x244>)
 8003454:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003458:	4a5c      	ldr	r2, [pc, #368]	; (80035cc <HAL_UART_MspInit+0x244>)
 800345a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800345e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003462:	4b5a      	ldr	r3, [pc, #360]	; (80035cc <HAL_UART_MspInit+0x244>)
 8003464:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003468:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003470:	4b56      	ldr	r3, [pc, #344]	; (80035cc <HAL_UART_MspInit+0x244>)
 8003472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003476:	4a55      	ldr	r2, [pc, #340]	; (80035cc <HAL_UART_MspInit+0x244>)
 8003478:	f043 0302 	orr.w	r3, r3, #2
 800347c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003480:	4b52      	ldr	r3, [pc, #328]	; (80035cc <HAL_UART_MspInit+0x244>)
 8003482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	623b      	str	r3, [r7, #32]
 800348c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800348e:	2318      	movs	r3, #24
 8003490:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003492:	2302      	movs	r3, #2
 8003494:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003496:	2300      	movs	r3, #0
 8003498:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800349a:	2300      	movs	r3, #0
 800349c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 800349e:	230b      	movs	r3, #11
 80034a0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80034a6:	4619      	mov	r1, r3
 80034a8:	484c      	ldr	r0, [pc, #304]	; (80035dc <HAL_UART_MspInit+0x254>)
 80034aa:	f002 fca1 	bl	8005df0 <HAL_GPIO_Init>
}
 80034ae:	e087      	b.n	80035c0 <HAL_UART_MspInit+0x238>
  else if(huart->Instance==UART8)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a4a      	ldr	r2, [pc, #296]	; (80035e0 <HAL_UART_MspInit+0x258>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d14e      	bne.n	8003558 <HAL_UART_MspInit+0x1d0>
    __HAL_RCC_UART8_CLK_ENABLE();
 80034ba:	4b44      	ldr	r3, [pc, #272]	; (80035cc <HAL_UART_MspInit+0x244>)
 80034bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034c0:	4a42      	ldr	r2, [pc, #264]	; (80035cc <HAL_UART_MspInit+0x244>)
 80034c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034ca:	4b40      	ldr	r3, [pc, #256]	; (80035cc <HAL_UART_MspInit+0x244>)
 80034cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034d4:	61fb      	str	r3, [r7, #28]
 80034d6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034d8:	4b3c      	ldr	r3, [pc, #240]	; (80035cc <HAL_UART_MspInit+0x244>)
 80034da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034de:	4a3b      	ldr	r2, [pc, #236]	; (80035cc <HAL_UART_MspInit+0x244>)
 80034e0:	f043 0308 	orr.w	r3, r3, #8
 80034e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034e8:	4b38      	ldr	r3, [pc, #224]	; (80035cc <HAL_UART_MspInit+0x244>)
 80034ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	61bb      	str	r3, [r7, #24]
 80034f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80034f6:	4b35      	ldr	r3, [pc, #212]	; (80035cc <HAL_UART_MspInit+0x244>)
 80034f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034fc:	4a33      	ldr	r2, [pc, #204]	; (80035cc <HAL_UART_MspInit+0x244>)
 80034fe:	f043 0310 	orr.w	r3, r3, #16
 8003502:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003506:	4b31      	ldr	r3, [pc, #196]	; (80035cc <HAL_UART_MspInit+0x244>)
 8003508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800350c:	f003 0310 	and.w	r3, r3, #16
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003514:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003518:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351a:	2302      	movs	r3, #2
 800351c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351e:	2300      	movs	r3, #0
 8003520:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003522:	2300      	movs	r3, #0
 8003524:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8003526:	2308      	movs	r3, #8
 8003528:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800352a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800352e:	4619      	mov	r1, r3
 8003530:	4828      	ldr	r0, [pc, #160]	; (80035d4 <HAL_UART_MspInit+0x24c>)
 8003532:	f002 fc5d 	bl	8005df0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003536:	2303      	movs	r3, #3
 8003538:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800353a:	2302      	movs	r3, #2
 800353c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353e:	2300      	movs	r3, #0
 8003540:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003542:	2300      	movs	r3, #0
 8003544:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8003546:	2308      	movs	r3, #8
 8003548:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800354a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800354e:	4619      	mov	r1, r3
 8003550:	4824      	ldr	r0, [pc, #144]	; (80035e4 <HAL_UART_MspInit+0x25c>)
 8003552:	f002 fc4d 	bl	8005df0 <HAL_GPIO_Init>
}
 8003556:	e033      	b.n	80035c0 <HAL_UART_MspInit+0x238>
  else if(huart->Instance==USART3)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a22      	ldr	r2, [pc, #136]	; (80035e8 <HAL_UART_MspInit+0x260>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d12e      	bne.n	80035c0 <HAL_UART_MspInit+0x238>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003562:	4b1a      	ldr	r3, [pc, #104]	; (80035cc <HAL_UART_MspInit+0x244>)
 8003564:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003568:	4a18      	ldr	r2, [pc, #96]	; (80035cc <HAL_UART_MspInit+0x244>)
 800356a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800356e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003572:	4b16      	ldr	r3, [pc, #88]	; (80035cc <HAL_UART_MspInit+0x244>)
 8003574:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003578:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800357c:	613b      	str	r3, [r7, #16]
 800357e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003580:	4b12      	ldr	r3, [pc, #72]	; (80035cc <HAL_UART_MspInit+0x244>)
 8003582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003586:	4a11      	ldr	r2, [pc, #68]	; (80035cc <HAL_UART_MspInit+0x244>)
 8003588:	f043 0308 	orr.w	r3, r3, #8
 800358c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003590:	4b0e      	ldr	r3, [pc, #56]	; (80035cc <HAL_UART_MspInit+0x244>)
 8003592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800359e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80035a2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a4:	2302      	movs	r3, #2
 80035a6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a8:	2300      	movs	r3, #0
 80035aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ac:	2300      	movs	r3, #0
 80035ae:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80035b0:	2307      	movs	r3, #7
 80035b2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80035b8:	4619      	mov	r1, r3
 80035ba:	4806      	ldr	r0, [pc, #24]	; (80035d4 <HAL_UART_MspInit+0x24c>)
 80035bc:	f002 fc18 	bl	8005df0 <HAL_GPIO_Init>
}
 80035c0:	bf00      	nop
 80035c2:	3748      	adds	r7, #72	; 0x48
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40005000 	.word	0x40005000
 80035cc:	58024400 	.word	0x58024400
 80035d0:	58020800 	.word	0x58020800
 80035d4:	58020c00 	.word	0x58020c00
 80035d8:	40007800 	.word	0x40007800
 80035dc:	58020400 	.word	0x58020400
 80035e0:	40007c00 	.word	0x40007c00
 80035e4:	58021000 	.word	0x58021000
 80035e8:	40004800 	.word	0x40004800

080035ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80035f0:	bf00      	nop
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035fa:	b480      	push	{r7}
 80035fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035fe:	e7fe      	b.n	80035fe <HardFault_Handler+0x4>

08003600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003604:	e7fe      	b.n	8003604 <MemManage_Handler+0x4>

08003606 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003606:	b480      	push	{r7}
 8003608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800360a:	e7fe      	b.n	800360a <BusFault_Handler+0x4>

0800360c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003610:	e7fe      	b.n	8003610 <UsageFault_Handler+0x4>

08003612 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003612:	b480      	push	{r7}
 8003614:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003616:	bf00      	nop
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003624:	bf00      	nop
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800362e:	b480      	push	{r7}
 8003630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003632:	bf00      	nop
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003640:	f000 f89e 	bl	8003780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003644:	bf00      	nop
 8003646:	bd80      	pop	{r7, pc}

08003648 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003648:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003680 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800364c:	f7fc ffc4 	bl	80005d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003650:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003652:	e003      	b.n	800365c <LoopCopyDataInit>

08003654 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003654:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8003656:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003658:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800365a:	3104      	adds	r1, #4

0800365c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800365c:	480a      	ldr	r0, [pc, #40]	; (8003688 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800365e:	4b0b      	ldr	r3, [pc, #44]	; (800368c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8003660:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003662:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003664:	d3f6      	bcc.n	8003654 <CopyDataInit>
  ldr  r2, =_sbss
 8003666:	4a0a      	ldr	r2, [pc, #40]	; (8003690 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8003668:	e002      	b.n	8003670 <LoopFillZerobss>

0800366a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800366a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800366c:	f842 3b04 	str.w	r3, [r2], #4

08003670 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003670:	4b08      	ldr	r3, [pc, #32]	; (8003694 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8003672:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003674:	d3f9      	bcc.n	800366a <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8003676:	f00a ffe1 	bl	800e63c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800367a:	f7fd f847 	bl	800070c <main>
  bx  lr    
 800367e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003680:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003684:	0800e758 	.word	0x0800e758
  ldr  r0, =_sdata
 8003688:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800368c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8003690:	200000d0 	.word	0x200000d0
  ldr  r3, = _ebss
 8003694:	20000bd8 	.word	0x20000bd8

08003698 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003698:	e7fe      	b.n	8003698 <ADC3_IRQHandler>
	...

0800369c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036a2:	2003      	movs	r0, #3
 80036a4:	f001 fae0 	bl	8004c68 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80036a8:	f004 fcda 	bl	8008060 <HAL_RCC_GetSysClockFreq>
 80036ac:	4601      	mov	r1, r0
 80036ae:	4b15      	ldr	r3, [pc, #84]	; (8003704 <HAL_Init+0x68>)
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	0a1b      	lsrs	r3, r3, #8
 80036b4:	f003 030f 	and.w	r3, r3, #15
 80036b8:	4a13      	ldr	r2, [pc, #76]	; (8003708 <HAL_Init+0x6c>)
 80036ba:	5cd3      	ldrb	r3, [r2, r3]
 80036bc:	f003 031f 	and.w	r3, r3, #31
 80036c0:	fa21 f303 	lsr.w	r3, r1, r3
 80036c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036c6:	4b0f      	ldr	r3, [pc, #60]	; (8003704 <HAL_Init+0x68>)
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	4a0e      	ldr	r2, [pc, #56]	; (8003708 <HAL_Init+0x6c>)
 80036d0:	5cd3      	ldrb	r3, [r2, r3]
 80036d2:	f003 031f 	and.w	r3, r3, #31
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	fa22 f303 	lsr.w	r3, r2, r3
 80036dc:	4a0b      	ldr	r2, [pc, #44]	; (800370c <HAL_Init+0x70>)
 80036de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036e0:	4a0b      	ldr	r2, [pc, #44]	; (8003710 <HAL_Init+0x74>)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036e6:	2000      	movs	r0, #0
 80036e8:	f000 f814 	bl	8003714 <HAL_InitTick>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e002      	b.n	80036fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80036f6:	f7fe fd8f 	bl	8002218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	58024400 	.word	0x58024400
 8003708:	0800e720 	.word	0x0800e720
 800370c:	20000004 	.word	0x20000004
 8003710:	20000000 	.word	0x20000000

08003714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800371c:	4b15      	ldr	r3, [pc, #84]	; (8003774 <HAL_InitTick+0x60>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e021      	b.n	800376c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003728:	4b13      	ldr	r3, [pc, #76]	; (8003778 <HAL_InitTick+0x64>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	4b11      	ldr	r3, [pc, #68]	; (8003774 <HAL_InitTick+0x60>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	4619      	mov	r1, r3
 8003732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003736:	fbb3 f3f1 	udiv	r3, r3, r1
 800373a:	fbb2 f3f3 	udiv	r3, r2, r3
 800373e:	4618      	mov	r0, r3
 8003740:	f001 fab7 	bl	8004cb2 <HAL_SYSTICK_Config>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e00e      	b.n	800376c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b0f      	cmp	r3, #15
 8003752:	d80a      	bhi.n	800376a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003754:	2200      	movs	r2, #0
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	f04f 30ff 	mov.w	r0, #4294967295
 800375c:	f001 fa8f 	bl	8004c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003760:	4a06      	ldr	r2, [pc, #24]	; (800377c <HAL_InitTick+0x68>)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	e000      	b.n	800376c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
}
 800376c:	4618      	mov	r0, r3
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	2000000c 	.word	0x2000000c
 8003778:	20000000 	.word	0x20000000
 800377c:	20000008 	.word	0x20000008

08003780 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003784:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <HAL_IncTick+0x20>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	461a      	mov	r2, r3
 800378a:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <HAL_IncTick+0x24>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4413      	add	r3, r2
 8003790:	4a04      	ldr	r2, [pc, #16]	; (80037a4 <HAL_IncTick+0x24>)
 8003792:	6013      	str	r3, [r2, #0]
}
 8003794:	bf00      	nop
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	2000000c 	.word	0x2000000c
 80037a4:	20000bd4 	.word	0x20000bd4

080037a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  return uwTick;
 80037ac:	4b03      	ldr	r3, [pc, #12]	; (80037bc <HAL_GetTick+0x14>)
 80037ae:	681b      	ldr	r3, [r3, #0]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	20000bd4 	.word	0x20000bd4

080037c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037c8:	f7ff ffee 	bl	80037a8 <HAL_GetTick>
 80037cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d8:	d005      	beq.n	80037e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037da:	4b09      	ldr	r3, [pc, #36]	; (8003800 <HAL_Delay+0x40>)
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	461a      	mov	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4413      	add	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037e6:	bf00      	nop
 80037e8:	f7ff ffde 	bl	80037a8 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d8f7      	bhi.n	80037e8 <HAL_Delay+0x28>
  {
  }
}
 80037f8:	bf00      	nop
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	2000000c 	.word	0x2000000c

08003804 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003808:	4b03      	ldr	r3, [pc, #12]	; (8003818 <HAL_GetREVID+0x14>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	0c1b      	lsrs	r3, r3, #16
}
 800380e:	4618      	mov	r0, r3
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	5c001000 	.word	0x5c001000

0800381c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003824:	4b06      	ldr	r3, [pc, #24]	; (8003840 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800382c:	4904      	ldr	r1, [pc, #16]	; (8003840 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4313      	orrs	r3, r2
 8003832:	604b      	str	r3, [r1, #4]
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	58000400 	.word	0x58000400

08003844 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	431a      	orrs	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	609a      	str	r2, [r3, #8]
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	609a      	str	r2, [r3, #8]
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b087      	sub	sp, #28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
 80038b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	3360      	adds	r3, #96	; 0x60
 80038be:	461a      	mov	r2, r3
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	430b      	orrs	r3, r1
 80038da:	431a      	orrs	r2, r3
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80038e0:	bf00      	nop
 80038e2:	371c      	adds	r7, #28
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	f003 031f 	and.w	r3, r3, #31
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	fa01 f303 	lsl.w	r3, r1, r3
 800390c:	431a      	orrs	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	611a      	str	r2, [r3, #16]
}
 8003912:	bf00      	nop
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800391e:	b480      	push	{r7}
 8003920:	b087      	sub	sp, #28
 8003922:	af00      	add	r7, sp, #0
 8003924:	60f8      	str	r0, [r7, #12]
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	3360      	adds	r3, #96	; 0x60
 800392e:	461a      	mov	r2, r3
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	431a      	orrs	r2, r3
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	601a      	str	r2, [r3, #0]
  }
}
 8003948:	bf00      	nop
 800394a:	371c      	adds	r7, #28
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	3330      	adds	r3, #48	; 0x30
 8003964:	461a      	mov	r2, r3
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	0a1b      	lsrs	r3, r3, #8
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	f003 030c 	and.w	r3, r3, #12
 8003970:	4413      	add	r3, r2
 8003972:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f003 031f 	and.w	r3, r3, #31
 800397e:	211f      	movs	r1, #31
 8003980:	fa01 f303 	lsl.w	r3, r1, r3
 8003984:	43db      	mvns	r3, r3
 8003986:	401a      	ands	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	0e9b      	lsrs	r3, r3, #26
 800398c:	f003 011f 	and.w	r1, r3, #31
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f003 031f 	and.w	r3, r3, #31
 8003996:	fa01 f303 	lsl.w	r3, r1, r3
 800399a:	431a      	orrs	r2, r3
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80039a0:	bf00      	nop
 80039a2:	371c      	adds	r7, #28
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	3314      	adds	r3, #20
 80039bc:	461a      	mov	r2, r3
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	0e5b      	lsrs	r3, r3, #25
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	4413      	add	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	0d1b      	lsrs	r3, r3, #20
 80039d4:	f003 031f 	and.w	r3, r3, #31
 80039d8:	2107      	movs	r1, #7
 80039da:	fa01 f303 	lsl.w	r3, r1, r3
 80039de:	43db      	mvns	r3, r3
 80039e0:	401a      	ands	r2, r3
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	0d1b      	lsrs	r3, r3, #20
 80039e6:	f003 031f 	and.w	r3, r3, #31
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	fa01 f303 	lsl.w	r3, r1, r3
 80039f0:	431a      	orrs	r2, r3
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80039f6:	bf00      	nop
 80039f8:	371c      	adds	r7, #28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
	...

08003a04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	401a      	ands	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f003 0318 	and.w	r3, r3, #24
 8003a26:	4908      	ldr	r1, [pc, #32]	; (8003a48 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003a28:	40d9      	lsrs	r1, r3
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	400b      	ands	r3, r1
 8003a2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a32:	431a      	orrs	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8003a3a:	bf00      	nop
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	000fffff 	.word	0x000fffff

08003a4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	4b04      	ldr	r3, [pc, #16]	; (8003a6c <LL_ADC_DisableDeepPowerDown+0x20>)
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6093      	str	r3, [r2, #8]
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	5fffffc0 	.word	0x5fffffc0

08003a70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a84:	d101      	bne.n	8003a8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003a86:	2301      	movs	r3, #1
 8003a88:	e000      	b.n	8003a8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	4b05      	ldr	r3, [pc, #20]	; (8003abc <LL_ADC_EnableInternalRegulator+0x24>)
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	6fffffc0 	.word	0x6fffffc0

08003ac0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ad4:	d101      	bne.n	8003ada <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e000      	b.n	8003adc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d101      	bne.n	8003b00 <LL_ADC_IsEnabled+0x18>
 8003afc:	2301      	movs	r3, #1
 8003afe:	e000      	b.n	8003b02 <LL_ADC_IsEnabled+0x1a>
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d101      	bne.n	8003b26 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f003 0308 	and.w	r3, r3, #8
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d101      	bne.n	8003b4c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e000      	b.n	8003b4e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
	...

08003b5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b5c:	b590      	push	{r4, r7, lr}
 8003b5e:	b089      	sub	sp, #36	; 0x24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b64:	2300      	movs	r3, #0
 8003b66:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e18e      	b.n	8003e94 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d109      	bne.n	8003b98 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7fe fb61 	bl	800224c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7ff ff67 	bl	8003a70 <LL_ADC_IsDeepPowerDownEnabled>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d004      	beq.n	8003bb2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff ff4d 	bl	8003a4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff ff82 	bl	8003ac0 <LL_ADC_IsInternalRegulatorEnabled>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d113      	bne.n	8003bea <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff ff66 	bl	8003a98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003bcc:	4b9a      	ldr	r3, [pc, #616]	; (8003e38 <HAL_ADC_Init+0x2dc>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	099b      	lsrs	r3, r3, #6
 8003bd2:	4a9a      	ldr	r2, [pc, #616]	; (8003e3c <HAL_ADC_Init+0x2e0>)
 8003bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd8:	099b      	lsrs	r3, r3, #6
 8003bda:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003bdc:	e002      	b.n	8003be4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	3b01      	subs	r3, #1
 8003be2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1f9      	bne.n	8003bde <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff ff66 	bl	8003ac0 <LL_ADC_IsInternalRegulatorEnabled>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10d      	bne.n	8003c16 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfe:	f043 0210 	orr.w	r2, r3, #16
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0a:	f043 0201 	orr.w	r2, r3, #1
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff ff77 	bl	8003b0e <LL_ADC_REG_IsConversionOngoing>
 8003c20:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c26:	f003 0310 	and.w	r3, r3, #16
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f040 8129 	bne.w	8003e82 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f040 8125 	bne.w	8003e82 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003c40:	f043 0202 	orr.w	r2, r3, #2
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7ff ff4b 	bl	8003ae8 <LL_ADC_IsEnabled>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d136      	bne.n	8003cc6 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a78      	ldr	r2, [pc, #480]	; (8003e40 <HAL_ADC_Init+0x2e4>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d004      	beq.n	8003c6c <HAL_ADC_Init+0x110>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a77      	ldr	r2, [pc, #476]	; (8003e44 <HAL_ADC_Init+0x2e8>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d10e      	bne.n	8003c8a <HAL_ADC_Init+0x12e>
 8003c6c:	4874      	ldr	r0, [pc, #464]	; (8003e40 <HAL_ADC_Init+0x2e4>)
 8003c6e:	f7ff ff3b 	bl	8003ae8 <LL_ADC_IsEnabled>
 8003c72:	4604      	mov	r4, r0
 8003c74:	4873      	ldr	r0, [pc, #460]	; (8003e44 <HAL_ADC_Init+0x2e8>)
 8003c76:	f7ff ff37 	bl	8003ae8 <LL_ADC_IsEnabled>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	4323      	orrs	r3, r4
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	bf0c      	ite	eq
 8003c82:	2301      	moveq	r3, #1
 8003c84:	2300      	movne	r3, #0
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	e008      	b.n	8003c9c <HAL_ADC_Init+0x140>
 8003c8a:	486f      	ldr	r0, [pc, #444]	; (8003e48 <HAL_ADC_Init+0x2ec>)
 8003c8c:	f7ff ff2c 	bl	8003ae8 <LL_ADC_IsEnabled>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	bf0c      	ite	eq
 8003c96:	2301      	moveq	r3, #1
 8003c98:	2300      	movne	r3, #0
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d012      	beq.n	8003cc6 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a66      	ldr	r2, [pc, #408]	; (8003e40 <HAL_ADC_Init+0x2e4>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d004      	beq.n	8003cb4 <HAL_ADC_Init+0x158>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a65      	ldr	r2, [pc, #404]	; (8003e44 <HAL_ADC_Init+0x2e8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d101      	bne.n	8003cb8 <HAL_ADC_Init+0x15c>
 8003cb4:	4a65      	ldr	r2, [pc, #404]	; (8003e4c <HAL_ADC_Init+0x2f0>)
 8003cb6:	e000      	b.n	8003cba <HAL_ADC_Init+0x15e>
 8003cb8:	4a65      	ldr	r2, [pc, #404]	; (8003e50 <HAL_ADC_Init+0x2f4>)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	f7ff fdbf 	bl	8003844 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003cc6:	f7ff fd9d 	bl	8003804 <HAL_GetREVID>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	f241 0303 	movw	r3, #4099	; 0x1003
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d914      	bls.n	8003cfe <HAL_ADC_Init+0x1a2>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	2b10      	cmp	r3, #16
 8003cda:	d110      	bne.n	8003cfe <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	7d5b      	ldrb	r3, [r3, #21]
 8003ce0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ce6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003cec:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	7f1b      	ldrb	r3, [r3, #28]
 8003cf2:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003cf4:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003cf6:	f043 030c 	orr.w	r3, r3, #12
 8003cfa:	61bb      	str	r3, [r7, #24]
 8003cfc:	e00d      	b.n	8003d1a <HAL_ADC_Init+0x1be>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	7d5b      	ldrb	r3, [r3, #21]
 8003d02:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d08:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003d0e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	7f1b      	ldrb	r3, [r3, #28]
 8003d14:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d16:	4313      	orrs	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	7f1b      	ldrb	r3, [r3, #28]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d106      	bne.n	8003d30 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	3b01      	subs	r3, #1
 8003d28:	045b      	lsls	r3, r3, #17
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d009      	beq.n	8003d4c <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d44:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	4b40      	ldr	r3, [pc, #256]	; (8003e54 <HAL_ADC_Init+0x2f8>)
 8003d54:	4013      	ands	r3, r2
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6812      	ldr	r2, [r2, #0]
 8003d5a:	69b9      	ldr	r1, [r7, #24]
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff fed2 	bl	8003b0e <LL_ADC_REG_IsConversionOngoing>
 8003d6a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff fedf 	bl	8003b34 <LL_ADC_INJ_IsConversionOngoing>
 8003d76:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d14a      	bne.n	8003e14 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d147      	bne.n	8003e14 <HAL_ADC_Init+0x2b8>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	7d1b      	ldrb	r3, [r3, #20]
 8003d88:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68da      	ldr	r2, [r3, #12]
 8003d98:	4b2f      	ldr	r3, [pc, #188]	; (8003e58 <HAL_ADC_Init+0x2fc>)
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6812      	ldr	r2, [r2, #0]
 8003da0:	69b9      	ldr	r1, [r7, #24]
 8003da2:	430b      	orrs	r3, r1
 8003da4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d11b      	bne.n	8003de8 <HAL_ADC_Init+0x28c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	691a      	ldr	r2, [r3, #16]
 8003dbc:	4b27      	ldr	r3, [pc, #156]	; (8003e5c <HAL_ADC_Init+0x300>)
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003dc4:	3a01      	subs	r2, #1
 8003dc6:	0411      	lsls	r1, r2, #16
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003dcc:	4311      	orrs	r1, r2
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003dd2:	4311      	orrs	r1, r2
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f042 0201 	orr.w	r2, r2, #1
 8003de4:	611a      	str	r2, [r3, #16]
 8003de6:	e007      	b.n	8003df8 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	691a      	ldr	r2, [r3, #16]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0201 	bic.w	r2, r2, #1
 8003df6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 fb58 	bl	80044c4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d121      	bne.n	8003e60 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	f023 010f 	bic.w	r1, r3, #15
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	1e5a      	subs	r2, r3, #1
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	631a      	str	r2, [r3, #48]	; 0x30
 8003e34:	e01c      	b.n	8003e70 <HAL_ADC_Init+0x314>
 8003e36:	bf00      	nop
 8003e38:	20000000 	.word	0x20000000
 8003e3c:	053e2d63 	.word	0x053e2d63
 8003e40:	40022000 	.word	0x40022000
 8003e44:	40022100 	.word	0x40022100
 8003e48:	58026000 	.word	0x58026000
 8003e4c:	40022300 	.word	0x40022300
 8003e50:	58026300 	.word	0x58026300
 8003e54:	fff0c003 	.word	0xfff0c003
 8003e58:	ffffbffc 	.word	0xffffbffc
 8003e5c:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 020f 	bic.w	r2, r2, #15
 8003e6e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e74:	f023 0303 	bic.w	r3, r3, #3
 8003e78:	f043 0201 	orr.w	r2, r3, #1
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	655a      	str	r2, [r3, #84]	; 0x54
 8003e80:	e007      	b.n	8003e92 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e86:	f043 0210 	orr.w	r2, r3, #16
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e92:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3724      	adds	r7, #36	; 0x24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd90      	pop	{r4, r7, pc}

08003e9c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003e9c:	b590      	push	{r4, r7, lr}
 8003e9e:	b099      	sub	sp, #100	; 0x64
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003eac:	2300      	movs	r3, #0
 8003eae:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	4a99      	ldr	r2, [pc, #612]	; (800411c <HAL_ADC_ConfigChannel+0x280>)
 8003eb6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d101      	bne.n	8003ec6 <HAL_ADC_ConfigChannel+0x2a>
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	e2e6      	b.n	8004494 <HAL_ADC_ConfigChannel+0x5f8>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7ff fe1b 	bl	8003b0e <LL_ADC_REG_IsConversionOngoing>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f040 82cb 	bne.w	8004476 <HAL_ADC_ConfigChannel+0x5da>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d108      	bne.n	8003efe <HAL_ADC_ConfigChannel+0x62>
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	0e9b      	lsrs	r3, r3, #26
 8003ef2:	f003 031f 	and.w	r3, r3, #31
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	e00f      	b.n	8003f1e <HAL_ADC_ConfigChannel+0x82>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f06:	fa93 f3a3 	rbit	r3, r3
 8003f0a:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f0e:	fab3 f383 	clz	r3, r3
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	f003 031f 	and.w	r3, r3, #31
 8003f18:	2201      	movs	r2, #1
 8003f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6812      	ldr	r2, [r2, #0]
 8003f22:	69d1      	ldr	r1, [r2, #28]
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6812      	ldr	r2, [r2, #0]
 8003f28:	430b      	orrs	r3, r1
 8003f2a:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6818      	ldr	r0, [r3, #0]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	6859      	ldr	r1, [r3, #4]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	461a      	mov	r2, r3
 8003f3a:	f7ff fd0b 	bl	8003954 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7ff fde3 	bl	8003b0e <LL_ADC_REG_IsConversionOngoing>
 8003f48:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7ff fdf0 	bl	8003b34 <LL_ADC_INJ_IsConversionOngoing>
 8003f54:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f040 80b3 	bne.w	80040c4 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f040 80af 	bne.w	80040c4 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6818      	ldr	r0, [r3, #0]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	6819      	ldr	r1, [r3, #0]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	461a      	mov	r2, r3
 8003f74:	f7ff fd1a 	bl	80039ac <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003f78:	4b69      	ldr	r3, [pc, #420]	; (8004120 <HAL_ADC_ConfigChannel+0x284>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003f80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f84:	d10b      	bne.n	8003f9e <HAL_ADC_ConfigChannel+0x102>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	695a      	ldr	r2, [r3, #20]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	089b      	lsrs	r3, r3, #2
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9c:	e01d      	b.n	8003fda <HAL_ADC_ConfigChannel+0x13e>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f003 0310 	and.w	r3, r3, #16
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10b      	bne.n	8003fc4 <HAL_ADC_ConfigChannel+0x128>
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	695a      	ldr	r2, [r3, #20]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	089b      	lsrs	r3, r3, #2
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	e00a      	b.n	8003fda <HAL_ADC_ConfigChannel+0x13e>
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	695a      	ldr	r2, [r3, #20]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	089b      	lsrs	r3, r3, #2
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fda:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	2b04      	cmp	r3, #4
 8003fe2:	d027      	beq.n	8004034 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6818      	ldr	r0, [r3, #0]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	6919      	ldr	r1, [r3, #16]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ff2:	f7ff fc5b 	bl	80038ac <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6818      	ldr	r0, [r3, #0]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	6919      	ldr	r1, [r3, #16]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	7e5b      	ldrb	r3, [r3, #25]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d102      	bne.n	800400c <HAL_ADC_ConfigChannel+0x170>
 8004006:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800400a:	e000      	b.n	800400e <HAL_ADC_ConfigChannel+0x172>
 800400c:	2300      	movs	r3, #0
 800400e:	461a      	mov	r2, r3
 8004010:	f7ff fc85 	bl	800391e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6818      	ldr	r0, [r3, #0]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	6919      	ldr	r1, [r3, #16]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	7e1b      	ldrb	r3, [r3, #24]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d102      	bne.n	800402a <HAL_ADC_ConfigChannel+0x18e>
 8004024:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004028:	e000      	b.n	800402c <HAL_ADC_ConfigChannel+0x190>
 800402a:	2300      	movs	r3, #0
 800402c:	461a      	mov	r2, r3
 800402e:	f7ff fc5d 	bl	80038ec <LL_ADC_SetDataRightShift>
 8004032:	e047      	b.n	80040c4 <HAL_ADC_ConfigChannel+0x228>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800403a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	069b      	lsls	r3, r3, #26
 8004044:	429a      	cmp	r2, r3
 8004046:	d107      	bne.n	8004058 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004056:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800405e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	069b      	lsls	r3, r3, #26
 8004068:	429a      	cmp	r2, r3
 800406a:	d107      	bne.n	800407c <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800407a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004082:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	069b      	lsls	r3, r3, #26
 800408c:	429a      	cmp	r2, r3
 800408e:	d107      	bne.n	80040a0 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800409e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	069b      	lsls	r3, r3, #26
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d107      	bne.n	80040c4 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80040c2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff fd0d 	bl	8003ae8 <LL_ADC_IsEnabled>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f040 81d9 	bne.w	8004488 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6818      	ldr	r0, [r3, #0]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	6819      	ldr	r1, [r3, #0]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	461a      	mov	r2, r3
 80040e4:	f7ff fc8e 	bl	8003a04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	4a0b      	ldr	r2, [pc, #44]	; (800411c <HAL_ADC_ConfigChannel+0x280>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	f040 8101 	bne.w	80042f6 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10f      	bne.n	8004124 <HAL_ADC_ConfigChannel+0x288>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	0e9b      	lsrs	r3, r3, #26
 800410a:	3301      	adds	r3, #1
 800410c:	f003 031f 	and.w	r3, r3, #31
 8004110:	2b09      	cmp	r3, #9
 8004112:	bf94      	ite	ls
 8004114:	2301      	movls	r3, #1
 8004116:	2300      	movhi	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	e016      	b.n	800414a <HAL_ADC_ConfigChannel+0x2ae>
 800411c:	47ff0000 	.word	0x47ff0000
 8004120:	5c001000 	.word	0x5c001000
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800412c:	fa93 f3a3 	rbit	r3, r3
 8004130:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004134:	fab3 f383 	clz	r3, r3
 8004138:	b2db      	uxtb	r3, r3
 800413a:	3301      	adds	r3, #1
 800413c:	f003 031f 	and.w	r3, r3, #31
 8004140:	2b09      	cmp	r3, #9
 8004142:	bf94      	ite	ls
 8004144:	2301      	movls	r3, #1
 8004146:	2300      	movhi	r3, #0
 8004148:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800414a:	2b00      	cmp	r3, #0
 800414c:	d064      	beq.n	8004218 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004156:	2b00      	cmp	r3, #0
 8004158:	d107      	bne.n	800416a <HAL_ADC_ConfigChannel+0x2ce>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	0e9b      	lsrs	r3, r3, #26
 8004160:	3301      	adds	r3, #1
 8004162:	069b      	lsls	r3, r3, #26
 8004164:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004168:	e00e      	b.n	8004188 <HAL_ADC_ConfigChannel+0x2ec>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004172:	fa93 f3a3 	rbit	r3, r3
 8004176:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800417a:	fab3 f383 	clz	r3, r3
 800417e:	b2db      	uxtb	r3, r3
 8004180:	3301      	adds	r3, #1
 8004182:	069b      	lsls	r3, r3, #26
 8004184:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004190:	2b00      	cmp	r3, #0
 8004192:	d109      	bne.n	80041a8 <HAL_ADC_ConfigChannel+0x30c>
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	0e9b      	lsrs	r3, r3, #26
 800419a:	3301      	adds	r3, #1
 800419c:	f003 031f 	and.w	r3, r3, #31
 80041a0:	2101      	movs	r1, #1
 80041a2:	fa01 f303 	lsl.w	r3, r1, r3
 80041a6:	e010      	b.n	80041ca <HAL_ADC_ConfigChannel+0x32e>
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b0:	fa93 f3a3 	rbit	r3, r3
 80041b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80041b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b8:	fab3 f383 	clz	r3, r3
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	3301      	adds	r3, #1
 80041c0:	f003 031f 	and.w	r3, r3, #31
 80041c4:	2101      	movs	r1, #1
 80041c6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ca:	ea42 0103 	orr.w	r1, r2, r3
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10a      	bne.n	80041f0 <HAL_ADC_ConfigChannel+0x354>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	0e9b      	lsrs	r3, r3, #26
 80041e0:	3301      	adds	r3, #1
 80041e2:	f003 021f 	and.w	r2, r3, #31
 80041e6:	4613      	mov	r3, r2
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	4413      	add	r3, r2
 80041ec:	051b      	lsls	r3, r3, #20
 80041ee:	e011      	b.n	8004214 <HAL_ADC_ConfigChannel+0x378>
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f8:	fa93 f3a3 	rbit	r3, r3
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80041fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004200:	fab3 f383 	clz	r3, r3
 8004204:	b2db      	uxtb	r3, r3
 8004206:	3301      	adds	r3, #1
 8004208:	f003 021f 	and.w	r2, r3, #31
 800420c:	4613      	mov	r3, r2
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	4413      	add	r3, r2
 8004212:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004214:	430b      	orrs	r3, r1
 8004216:	e069      	b.n	80042ec <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004220:	2b00      	cmp	r3, #0
 8004222:	d107      	bne.n	8004234 <HAL_ADC_ConfigChannel+0x398>
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	0e9b      	lsrs	r3, r3, #26
 800422a:	3301      	adds	r3, #1
 800422c:	069b      	lsls	r3, r3, #26
 800422e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004232:	e00e      	b.n	8004252 <HAL_ADC_ConfigChannel+0x3b6>
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	fa93 f3a3 	rbit	r3, r3
 8004240:	61fb      	str	r3, [r7, #28]
  return result;
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	fab3 f383 	clz	r3, r3
 8004248:	b2db      	uxtb	r3, r3
 800424a:	3301      	adds	r3, #1
 800424c:	069b      	lsls	r3, r3, #26
 800424e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800425a:	2b00      	cmp	r3, #0
 800425c:	d109      	bne.n	8004272 <HAL_ADC_ConfigChannel+0x3d6>
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	0e9b      	lsrs	r3, r3, #26
 8004264:	3301      	adds	r3, #1
 8004266:	f003 031f 	and.w	r3, r3, #31
 800426a:	2101      	movs	r1, #1
 800426c:	fa01 f303 	lsl.w	r3, r1, r3
 8004270:	e010      	b.n	8004294 <HAL_ADC_ConfigChannel+0x3f8>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	fa93 f3a3 	rbit	r3, r3
 800427e:	617b      	str	r3, [r7, #20]
  return result;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	fab3 f383 	clz	r3, r3
 8004286:	b2db      	uxtb	r3, r3
 8004288:	3301      	adds	r3, #1
 800428a:	f003 031f 	and.w	r3, r3, #31
 800428e:	2101      	movs	r1, #1
 8004290:	fa01 f303 	lsl.w	r3, r1, r3
 8004294:	ea42 0103 	orr.w	r1, r2, r3
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10d      	bne.n	80042c0 <HAL_ADC_ConfigChannel+0x424>
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	0e9b      	lsrs	r3, r3, #26
 80042aa:	3301      	adds	r3, #1
 80042ac:	f003 021f 	and.w	r2, r3, #31
 80042b0:	4613      	mov	r3, r2
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	4413      	add	r3, r2
 80042b6:	3b1e      	subs	r3, #30
 80042b8:	051b      	lsls	r3, r3, #20
 80042ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042be:	e014      	b.n	80042ea <HAL_ADC_ConfigChannel+0x44e>
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	fa93 f3a3 	rbit	r3, r3
 80042cc:	60fb      	str	r3, [r7, #12]
  return result;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	fab3 f383 	clz	r3, r3
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	3301      	adds	r3, #1
 80042d8:	f003 021f 	and.w	r2, r3, #31
 80042dc:	4613      	mov	r3, r2
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	4413      	add	r3, r2
 80042e2:	3b1e      	subs	r3, #30
 80042e4:	051b      	lsls	r3, r3, #20
 80042e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042ea:	430b      	orrs	r3, r1
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	6892      	ldr	r2, [r2, #8]
 80042f0:	4619      	mov	r1, r3
 80042f2:	f7ff fb5b 	bl	80039ac <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f280 80c4 	bge.w	8004488 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a65      	ldr	r2, [pc, #404]	; (800449c <HAL_ADC_ConfigChannel+0x600>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d004      	beq.n	8004314 <HAL_ADC_ConfigChannel+0x478>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a64      	ldr	r2, [pc, #400]	; (80044a0 <HAL_ADC_ConfigChannel+0x604>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d101      	bne.n	8004318 <HAL_ADC_ConfigChannel+0x47c>
 8004314:	4b63      	ldr	r3, [pc, #396]	; (80044a4 <HAL_ADC_ConfigChannel+0x608>)
 8004316:	e000      	b.n	800431a <HAL_ADC_ConfigChannel+0x47e>
 8004318:	4b63      	ldr	r3, [pc, #396]	; (80044a8 <HAL_ADC_ConfigChannel+0x60c>)
 800431a:	4618      	mov	r0, r3
 800431c:	f7ff fab8 	bl	8003890 <LL_ADC_GetCommonPathInternalCh>
 8004320:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a5d      	ldr	r2, [pc, #372]	; (800449c <HAL_ADC_ConfigChannel+0x600>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d004      	beq.n	8004336 <HAL_ADC_ConfigChannel+0x49a>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a5b      	ldr	r2, [pc, #364]	; (80044a0 <HAL_ADC_ConfigChannel+0x604>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d10e      	bne.n	8004354 <HAL_ADC_ConfigChannel+0x4b8>
 8004336:	4859      	ldr	r0, [pc, #356]	; (800449c <HAL_ADC_ConfigChannel+0x600>)
 8004338:	f7ff fbd6 	bl	8003ae8 <LL_ADC_IsEnabled>
 800433c:	4604      	mov	r4, r0
 800433e:	4858      	ldr	r0, [pc, #352]	; (80044a0 <HAL_ADC_ConfigChannel+0x604>)
 8004340:	f7ff fbd2 	bl	8003ae8 <LL_ADC_IsEnabled>
 8004344:	4603      	mov	r3, r0
 8004346:	4323      	orrs	r3, r4
 8004348:	2b00      	cmp	r3, #0
 800434a:	bf0c      	ite	eq
 800434c:	2301      	moveq	r3, #1
 800434e:	2300      	movne	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	e008      	b.n	8004366 <HAL_ADC_ConfigChannel+0x4ca>
 8004354:	4855      	ldr	r0, [pc, #340]	; (80044ac <HAL_ADC_ConfigChannel+0x610>)
 8004356:	f7ff fbc7 	bl	8003ae8 <LL_ADC_IsEnabled>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	bf0c      	ite	eq
 8004360:	2301      	moveq	r3, #1
 8004362:	2300      	movne	r3, #0
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d07b      	beq.n	8004462 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a50      	ldr	r2, [pc, #320]	; (80044b0 <HAL_ADC_ConfigChannel+0x614>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d12e      	bne.n	80043d2 <HAL_ADC_ConfigChannel+0x536>
 8004374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004376:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d129      	bne.n	80043d2 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a4a      	ldr	r2, [pc, #296]	; (80044ac <HAL_ADC_ConfigChannel+0x610>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d17f      	bne.n	8004488 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a43      	ldr	r2, [pc, #268]	; (800449c <HAL_ADC_ConfigChannel+0x600>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d004      	beq.n	800439c <HAL_ADC_ConfigChannel+0x500>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a42      	ldr	r2, [pc, #264]	; (80044a0 <HAL_ADC_ConfigChannel+0x604>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d101      	bne.n	80043a0 <HAL_ADC_ConfigChannel+0x504>
 800439c:	4a41      	ldr	r2, [pc, #260]	; (80044a4 <HAL_ADC_ConfigChannel+0x608>)
 800439e:	e000      	b.n	80043a2 <HAL_ADC_ConfigChannel+0x506>
 80043a0:	4a41      	ldr	r2, [pc, #260]	; (80044a8 <HAL_ADC_ConfigChannel+0x60c>)
 80043a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80043a8:	4619      	mov	r1, r3
 80043aa:	4610      	mov	r0, r2
 80043ac:	f7ff fa5d 	bl	800386a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80043b0:	4b40      	ldr	r3, [pc, #256]	; (80044b4 <HAL_ADC_ConfigChannel+0x618>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	099b      	lsrs	r3, r3, #6
 80043b6:	4a40      	ldr	r2, [pc, #256]	; (80044b8 <HAL_ADC_ConfigChannel+0x61c>)
 80043b8:	fba2 2303 	umull	r2, r3, r2, r3
 80043bc:	099b      	lsrs	r3, r3, #6
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80043c2:	e002      	b.n	80043ca <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	3b01      	subs	r3, #1
 80043c8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1f9      	bne.n	80043c4 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043d0:	e05a      	b.n	8004488 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a39      	ldr	r2, [pc, #228]	; (80044bc <HAL_ADC_ConfigChannel+0x620>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d11e      	bne.n	800441a <HAL_ADC_ConfigChannel+0x57e>
 80043dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d119      	bne.n	800441a <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a30      	ldr	r2, [pc, #192]	; (80044ac <HAL_ADC_ConfigChannel+0x610>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d14b      	bne.n	8004488 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a29      	ldr	r2, [pc, #164]	; (800449c <HAL_ADC_ConfigChannel+0x600>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d004      	beq.n	8004404 <HAL_ADC_ConfigChannel+0x568>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a28      	ldr	r2, [pc, #160]	; (80044a0 <HAL_ADC_ConfigChannel+0x604>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d101      	bne.n	8004408 <HAL_ADC_ConfigChannel+0x56c>
 8004404:	4a27      	ldr	r2, [pc, #156]	; (80044a4 <HAL_ADC_ConfigChannel+0x608>)
 8004406:	e000      	b.n	800440a <HAL_ADC_ConfigChannel+0x56e>
 8004408:	4a27      	ldr	r2, [pc, #156]	; (80044a8 <HAL_ADC_ConfigChannel+0x60c>)
 800440a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800440c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004410:	4619      	mov	r1, r3
 8004412:	4610      	mov	r0, r2
 8004414:	f7ff fa29 	bl	800386a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004418:	e036      	b.n	8004488 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a28      	ldr	r2, [pc, #160]	; (80044c0 <HAL_ADC_ConfigChannel+0x624>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d131      	bne.n	8004488 <HAL_ADC_ConfigChannel+0x5ec>
 8004424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d12c      	bne.n	8004488 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a1e      	ldr	r2, [pc, #120]	; (80044ac <HAL_ADC_ConfigChannel+0x610>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d127      	bne.n	8004488 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a17      	ldr	r2, [pc, #92]	; (800449c <HAL_ADC_ConfigChannel+0x600>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d004      	beq.n	800444c <HAL_ADC_ConfigChannel+0x5b0>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a16      	ldr	r2, [pc, #88]	; (80044a0 <HAL_ADC_ConfigChannel+0x604>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d101      	bne.n	8004450 <HAL_ADC_ConfigChannel+0x5b4>
 800444c:	4a15      	ldr	r2, [pc, #84]	; (80044a4 <HAL_ADC_ConfigChannel+0x608>)
 800444e:	e000      	b.n	8004452 <HAL_ADC_ConfigChannel+0x5b6>
 8004450:	4a15      	ldr	r2, [pc, #84]	; (80044a8 <HAL_ADC_ConfigChannel+0x60c>)
 8004452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004454:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004458:	4619      	mov	r1, r3
 800445a:	4610      	mov	r0, r2
 800445c:	f7ff fa05 	bl	800386a <LL_ADC_SetCommonPathInternalCh>
 8004460:	e012      	b.n	8004488 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004466:	f043 0220 	orr.w	r2, r3, #32
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004474:	e008      	b.n	8004488 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447a:	f043 0220 	orr.w	r2, r3, #32
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004490:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8004494:	4618      	mov	r0, r3
 8004496:	3764      	adds	r7, #100	; 0x64
 8004498:	46bd      	mov	sp, r7
 800449a:	bd90      	pop	{r4, r7, pc}
 800449c:	40022000 	.word	0x40022000
 80044a0:	40022100 	.word	0x40022100
 80044a4:	40022300 	.word	0x40022300
 80044a8:	58026300 	.word	0x58026300
 80044ac:	58026000 	.word	0x58026000
 80044b0:	cb840000 	.word	0xcb840000
 80044b4:	20000000 	.word	0x20000000
 80044b8:	053e2d63 	.word	0x053e2d63
 80044bc:	c7520000 	.word	0xc7520000
 80044c0:	cfb80000 	.word	0xcfb80000

080044c4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a70      	ldr	r2, [pc, #448]	; (8004694 <ADC_ConfigureBoostMode+0x1d0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d004      	beq.n	80044e0 <ADC_ConfigureBoostMode+0x1c>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a6f      	ldr	r2, [pc, #444]	; (8004698 <ADC_ConfigureBoostMode+0x1d4>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d109      	bne.n	80044f4 <ADC_ConfigureBoostMode+0x30>
 80044e0:	4b6e      	ldr	r3, [pc, #440]	; (800469c <ADC_ConfigureBoostMode+0x1d8>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	bf14      	ite	ne
 80044ec:	2301      	movne	r3, #1
 80044ee:	2300      	moveq	r3, #0
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	e008      	b.n	8004506 <ADC_ConfigureBoostMode+0x42>
 80044f4:	4b6a      	ldr	r3, [pc, #424]	; (80046a0 <ADC_ConfigureBoostMode+0x1dc>)
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	bf14      	ite	ne
 8004500:	2301      	movne	r3, #1
 8004502:	2300      	moveq	r3, #0
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d01a      	beq.n	8004540 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800450a:	f003 ff1b 	bl	8008344 <HAL_RCC_GetHCLKFreq>
 800450e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004518:	d006      	beq.n	8004528 <ADC_ConfigureBoostMode+0x64>
 800451a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800451e:	d00b      	beq.n	8004538 <ADC_ConfigureBoostMode+0x74>
 8004520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004524:	d000      	beq.n	8004528 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8004526:	e05d      	b.n	80045e4 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	0c1b      	lsrs	r3, r3, #16
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	fbb2 f3f3 	udiv	r3, r2, r3
 8004534:	60fb      	str	r3, [r7, #12]
        break;
 8004536:	e055      	b.n	80045e4 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	089b      	lsrs	r3, r3, #2
 800453c:	60fb      	str	r3, [r7, #12]
        break;
 800453e:	e051      	b.n	80045e4 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004540:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004544:	f004 fe48 	bl	80091d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004548:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004552:	d02a      	beq.n	80045aa <ADC_ConfigureBoostMode+0xe6>
 8004554:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004558:	d813      	bhi.n	8004582 <ADC_ConfigureBoostMode+0xbe>
 800455a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800455e:	d024      	beq.n	80045aa <ADC_ConfigureBoostMode+0xe6>
 8004560:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004564:	d806      	bhi.n	8004574 <ADC_ConfigureBoostMode+0xb0>
 8004566:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800456a:	d01e      	beq.n	80045aa <ADC_ConfigureBoostMode+0xe6>
 800456c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004570:	d01b      	beq.n	80045aa <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8004572:	e037      	b.n	80045e4 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8004574:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004578:	d017      	beq.n	80045aa <ADC_ConfigureBoostMode+0xe6>
 800457a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800457e:	d014      	beq.n	80045aa <ADC_ConfigureBoostMode+0xe6>
        break;
 8004580:	e030      	b.n	80045e4 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8004582:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004586:	d021      	beq.n	80045cc <ADC_ConfigureBoostMode+0x108>
 8004588:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800458c:	d806      	bhi.n	800459c <ADC_ConfigureBoostMode+0xd8>
 800458e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004592:	d013      	beq.n	80045bc <ADC_ConfigureBoostMode+0xf8>
 8004594:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004598:	d014      	beq.n	80045c4 <ADC_ConfigureBoostMode+0x100>
        break;
 800459a:	e023      	b.n	80045e4 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 800459c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80045a0:	d018      	beq.n	80045d4 <ADC_ConfigureBoostMode+0x110>
 80045a2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80045a6:	d019      	beq.n	80045dc <ADC_ConfigureBoostMode+0x118>
        break;
 80045a8:	e01c      	b.n	80045e4 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	0c9b      	lsrs	r3, r3, #18
 80045b0:	005b      	lsls	r3, r3, #1
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b8:	60fb      	str	r3, [r7, #12]
        break;
 80045ba:	e013      	b.n	80045e4 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	091b      	lsrs	r3, r3, #4
 80045c0:	60fb      	str	r3, [r7, #12]
        break;
 80045c2:	e00f      	b.n	80045e4 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	095b      	lsrs	r3, r3, #5
 80045c8:	60fb      	str	r3, [r7, #12]
        break;
 80045ca:	e00b      	b.n	80045e4 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	099b      	lsrs	r3, r3, #6
 80045d0:	60fb      	str	r3, [r7, #12]
        break;
 80045d2:	e007      	b.n	80045e4 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	09db      	lsrs	r3, r3, #7
 80045d8:	60fb      	str	r3, [r7, #12]
        break;
 80045da:	e003      	b.n	80045e4 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	0a1b      	lsrs	r3, r3, #8
 80045e0:	60fb      	str	r3, [r7, #12]
        break;
 80045e2:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80045e4:	f7ff f90e 	bl	8003804 <HAL_GetREVID>
 80045e8:	4602      	mov	r2, r0
 80045ea:	f241 0303 	movw	r3, #4099	; 0x1003
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d815      	bhi.n	800461e <ADC_ConfigureBoostMode+0x15a>
  {
    if (freq > 20000000UL)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4a2b      	ldr	r2, [pc, #172]	; (80046a4 <ADC_ConfigureBoostMode+0x1e0>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d908      	bls.n	800460c <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004608:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800460a:	e03e      	b.n	800468a <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800461a:	609a      	str	r2, [r3, #8]
}
 800461c:	e035      	b.n	800468a <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	085b      	lsrs	r3, r3, #1
 8004622:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4a20      	ldr	r2, [pc, #128]	; (80046a8 <ADC_ConfigureBoostMode+0x1e4>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d808      	bhi.n	800463e <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689a      	ldr	r2, [r3, #8]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800463a:	609a      	str	r2, [r3, #8]
}
 800463c:	e025      	b.n	800468a <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 12500000UL)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4a1a      	ldr	r2, [pc, #104]	; (80046ac <ADC_ConfigureBoostMode+0x1e8>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d80a      	bhi.n	800465c <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004658:	609a      	str	r2, [r3, #8]
}
 800465a:	e016      	b.n	800468a <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 25000000UL)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4a14      	ldr	r2, [pc, #80]	; (80046b0 <ADC_ConfigureBoostMode+0x1ec>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d80a      	bhi.n	800467a <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004676:	609a      	str	r2, [r3, #8]
}
 8004678:	e007      	b.n	800468a <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004688:	609a      	str	r2, [r3, #8]
}
 800468a:	bf00      	nop
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	40022000 	.word	0x40022000
 8004698:	40022100 	.word	0x40022100
 800469c:	40022300 	.word	0x40022300
 80046a0:	58026300 	.word	0x58026300
 80046a4:	01312d00 	.word	0x01312d00
 80046a8:	005f5e10 	.word	0x005f5e10
 80046ac:	00bebc20 	.word	0x00bebc20
 80046b0:	017d7840 	.word	0x017d7840

080046b4 <LL_ADC_IsEnabled>:
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <LL_ADC_IsEnabled+0x18>
 80046c8:	2301      	movs	r3, #1
 80046ca:	e000      	b.n	80046ce <LL_ADC_IsEnabled+0x1a>
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <LL_ADC_REG_IsConversionOngoing>:
{
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 0304 	and.w	r3, r3, #4
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d101      	bne.n	80046f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80046ee:	2301      	movs	r3, #1
 80046f0:	e000      	b.n	80046f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004700:	b590      	push	{r4, r7, lr}
 8004702:	b09f      	sub	sp, #124	; 0x7c
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800470a:	2300      	movs	r3, #0
 800470c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004716:	2b01      	cmp	r3, #1
 8004718:	d101      	bne.n	800471e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800471a:	2302      	movs	r3, #2
 800471c:	e0ba      	b.n	8004894 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a5c      	ldr	r2, [pc, #368]	; (800489c <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d102      	bne.n	8004736 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8004730:	4b5b      	ldr	r3, [pc, #364]	; (80048a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8004732:	60bb      	str	r3, [r7, #8]
 8004734:	e001      	b.n	800473a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8004736:	2300      	movs	r3, #0
 8004738:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10b      	bne.n	8004758 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004744:	f043 0220 	orr.w	r2, r3, #32
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e09d      	b.n	8004894 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff ffbd 	bl	80046da <LL_ADC_REG_IsConversionOngoing>
 8004760:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff ffb7 	bl	80046da <LL_ADC_REG_IsConversionOngoing>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d17f      	bne.n	8004872 <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004772:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004774:	2b00      	cmp	r3, #0
 8004776:	d17c      	bne.n	8004872 <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a47      	ldr	r2, [pc, #284]	; (800489c <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d004      	beq.n	800478c <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a46      	ldr	r2, [pc, #280]	; (80048a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d101      	bne.n	8004790 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 800478c:	4b45      	ldr	r3, [pc, #276]	; (80048a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800478e:	e000      	b.n	8004792 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8004790:	4b45      	ldr	r3, [pc, #276]	; (80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004792:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d039      	beq.n	8004810 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800479c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	431a      	orrs	r2, r3
 80047aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ac:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a3a      	ldr	r2, [pc, #232]	; (800489c <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d004      	beq.n	80047c2 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a38      	ldr	r2, [pc, #224]	; (80048a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d10e      	bne.n	80047e0 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 80047c2:	4836      	ldr	r0, [pc, #216]	; (800489c <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80047c4:	f7ff ff76 	bl	80046b4 <LL_ADC_IsEnabled>
 80047c8:	4604      	mov	r4, r0
 80047ca:	4835      	ldr	r0, [pc, #212]	; (80048a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80047cc:	f7ff ff72 	bl	80046b4 <LL_ADC_IsEnabled>
 80047d0:	4603      	mov	r3, r0
 80047d2:	4323      	orrs	r3, r4
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	bf0c      	ite	eq
 80047d8:	2301      	moveq	r3, #1
 80047da:	2300      	movne	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	e008      	b.n	80047f2 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 80047e0:	4832      	ldr	r0, [pc, #200]	; (80048ac <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80047e2:	f7ff ff67 	bl	80046b4 <LL_ADC_IsEnabled>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	bf0c      	ite	eq
 80047ec:	2301      	moveq	r3, #1
 80047ee:	2300      	movne	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d047      	beq.n	8004886 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80047f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047f8:	689a      	ldr	r2, [r3, #8]
 80047fa:	4b2d      	ldr	r3, [pc, #180]	; (80048b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80047fc:	4013      	ands	r3, r2
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	6811      	ldr	r1, [r2, #0]
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	6892      	ldr	r2, [r2, #8]
 8004806:	430a      	orrs	r2, r1
 8004808:	431a      	orrs	r2, r3
 800480a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800480c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800480e:	e03a      	b.n	8004886 <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800481a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a1e      	ldr	r2, [pc, #120]	; (800489c <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d004      	beq.n	8004830 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a1d      	ldr	r2, [pc, #116]	; (80048a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d10e      	bne.n	800484e <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8004830:	481a      	ldr	r0, [pc, #104]	; (800489c <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8004832:	f7ff ff3f 	bl	80046b4 <LL_ADC_IsEnabled>
 8004836:	4604      	mov	r4, r0
 8004838:	4819      	ldr	r0, [pc, #100]	; (80048a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800483a:	f7ff ff3b 	bl	80046b4 <LL_ADC_IsEnabled>
 800483e:	4603      	mov	r3, r0
 8004840:	4323      	orrs	r3, r4
 8004842:	2b00      	cmp	r3, #0
 8004844:	bf0c      	ite	eq
 8004846:	2301      	moveq	r3, #1
 8004848:	2300      	movne	r3, #0
 800484a:	b2db      	uxtb	r3, r3
 800484c:	e008      	b.n	8004860 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 800484e:	4817      	ldr	r0, [pc, #92]	; (80048ac <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004850:	f7ff ff30 	bl	80046b4 <LL_ADC_IsEnabled>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	bf0c      	ite	eq
 800485a:	2301      	moveq	r3, #1
 800485c:	2300      	movne	r3, #0
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	d010      	beq.n	8004886 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	4b11      	ldr	r3, [pc, #68]	; (80048b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800486a:	4013      	ands	r3, r2
 800486c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800486e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004870:	e009      	b.n	8004886 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004876:	f043 0220 	orr.w	r2, r3, #32
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004884:	e000      	b.n	8004888 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004886:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004890:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004894:	4618      	mov	r0, r3
 8004896:	377c      	adds	r7, #124	; 0x7c
 8004898:	46bd      	mov	sp, r7
 800489a:	bd90      	pop	{r4, r7, pc}
 800489c:	40022000 	.word	0x40022000
 80048a0:	40022100 	.word	0x40022100
 80048a4:	40022300 	.word	0x40022300
 80048a8:	58026300 	.word	0x58026300
 80048ac:	58026000 	.word	0x58026000
 80048b0:	fffff0e0 	.word	0xfffff0e0

080048b4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b088      	sub	sp, #32
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80048bc:	2300      	movs	r3, #0
 80048be:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 80048c0:	2300      	movs	r3, #0
 80048c2:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d102      	bne.n	80048d0 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	77fb      	strb	r3, [r7, #31]
 80048ce:	e10b      	b.n	8004ae8 <HAL_COMP_Init+0x234>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048de:	d102      	bne.n	80048e6 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	77fb      	strb	r3, [r7, #31]
 80048e4:	e100      	b.n	8004ae8 <HAL_COMP_Init+0x234>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d109      	bne.n	8004906 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7fd fd2f 	bl	8002364 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0304 	and.w	r3, r3, #4
 8004910:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800491a:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 8004920:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 8004926:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 800492c:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8004932:	4313      	orrs	r3, r2
 8004934:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	4b6d      	ldr	r3, [pc, #436]	; (8004af4 <HAL_COMP_Init+0x240>)
 800493e:	4013      	ands	r3, r2
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	6812      	ldr	r2, [r2, #0]
 8004944:	6979      	ldr	r1, [r7, #20]
 8004946:	430b      	orrs	r3, r1
 8004948:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	2b10      	cmp	r3, #16
 8004950:	d108      	bne.n	8004964 <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f042 0210 	orr.w	r2, r2, #16
 8004960:	601a      	str	r2, [r3, #0]
 8004962:	e007      	b.n	8004974 <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0210 	bic.w	r2, r2, #16
 8004972:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0304 	and.w	r3, r3, #4
 800497e:	2b00      	cmp	r3, #0
 8004980:	d013      	beq.n	80049aa <HAL_COMP_Init+0xf6>
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d010      	beq.n	80049aa <HAL_COMP_Init+0xf6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = (COMP_DELAY_VOLTAGE_SCALER_STAB_US * (SystemCoreClock / (1000000UL * 2UL)));
 8004988:	4b5b      	ldr	r3, [pc, #364]	; (8004af8 <HAL_COMP_Init+0x244>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a5b      	ldr	r2, [pc, #364]	; (8004afc <HAL_COMP_Init+0x248>)
 800498e:	fba2 2303 	umull	r2, r3, r2, r3
 8004992:	0cdb      	lsrs	r3, r3, #19
 8004994:	22c8      	movs	r2, #200	; 0xc8
 8004996:	fb02 f303 	mul.w	r3, r2, r3
 800499a:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 800499c:	e002      	b.n	80049a4 <HAL_COMP_Init+0xf0>
     {
       wait_loop_index --;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	3b01      	subs	r3, #1
 80049a2:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1f9      	bne.n	800499e <HAL_COMP_Init+0xea>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a54      	ldr	r2, [pc, #336]	; (8004b00 <HAL_COMP_Init+0x24c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d102      	bne.n	80049ba <HAL_COMP_Init+0x106>
 80049b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80049b8:	e001      	b.n	80049be <HAL_COMP_Init+0x10a>
 80049ba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80049be:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	f003 0303 	and.w	r3, r3, #3
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d06d      	beq.n	8004aa8 <HAL_COMP_Init+0x1f4>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	f003 0310 	and.w	r3, r3, #16
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d008      	beq.n	80049ea <HAL_COMP_Init+0x136>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 80049d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	600b      	str	r3, [r1, #0]
 80049e8:	e008      	b.n	80049fc <HAL_COMP_Init+0x148>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 80049ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	43db      	mvns	r3, r3
 80049f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049f8:	4013      	ands	r3, r2
 80049fa:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	f003 0320 	and.w	r3, r3, #32
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d008      	beq.n	8004a1a <HAL_COMP_Init+0x166>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 8004a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	604b      	str	r3, [r1, #4]
 8004a18:	e008      	b.n	8004a2c <HAL_COMP_Init+0x178>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 8004a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	43db      	mvns	r3, r3
 8004a24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a28:	4013      	ands	r3, r2
 8004a2a:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 8004a2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <HAL_COMP_Init+0x1a4>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 8004a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a46:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004a4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 8004a56:	e00a      	b.n	8004a6e <HAL_COMP_Init+0x1ba>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 8004a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a5c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	43db      	mvns	r3, r3
 8004a64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a68:	4013      	ands	r3, r2
 8004a6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00a      	beq.n	8004a90 <HAL_COMP_Init+0x1dc>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 8004a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a7e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004a82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 8004a8e:	e021      	b.n	8004ad4 <HAL_COMP_Init+0x220>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 8004a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a94:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	43db      	mvns	r3, r3
 8004a9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 8004aa6:	e015      	b.n	8004ad4 <HAL_COMP_Init+0x220>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 8004aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aac:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	43db      	mvns	r3, r3
 8004ab4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ab8:	4013      	ands	r3, r2
 8004aba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 8004abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ac2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	43db      	mvns	r3, r3
 8004aca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ace:	4013      	ands	r3, r2
 8004ad0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d103      	bne.n	8004ae8 <HAL_COMP_Init+0x234>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
   
  }
  
  return status;
 8004ae8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3720      	adds	r7, #32
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	f0e8cce1 	.word	0xf0e8cce1
 8004af8:	20000000 	.word	0x20000000
 8004afc:	431bde83 	.word	0x431bde83
 8004b00:	5800380c 	.word	0x5800380c

08004b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b14:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <__NVIC_SetPriorityGrouping+0x40>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b20:	4013      	ands	r3, r2
 8004b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b2c:	4b06      	ldr	r3, [pc, #24]	; (8004b48 <__NVIC_SetPriorityGrouping+0x44>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b32:	4a04      	ldr	r2, [pc, #16]	; (8004b44 <__NVIC_SetPriorityGrouping+0x40>)
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	60d3      	str	r3, [r2, #12]
}
 8004b38:	bf00      	nop
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	e000ed00 	.word	0xe000ed00
 8004b48:	05fa0000 	.word	0x05fa0000

08004b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b50:	4b04      	ldr	r3, [pc, #16]	; (8004b64 <__NVIC_GetPriorityGrouping+0x18>)
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	0a1b      	lsrs	r3, r3, #8
 8004b56:	f003 0307 	and.w	r3, r3, #7
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	e000ed00 	.word	0xe000ed00

08004b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	4603      	mov	r3, r0
 8004b70:	6039      	str	r1, [r7, #0]
 8004b72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	db0a      	blt.n	8004b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	490c      	ldr	r1, [pc, #48]	; (8004bb4 <__NVIC_SetPriority+0x4c>)
 8004b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b86:	0112      	lsls	r2, r2, #4
 8004b88:	b2d2      	uxtb	r2, r2
 8004b8a:	440b      	add	r3, r1
 8004b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b90:	e00a      	b.n	8004ba8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	4908      	ldr	r1, [pc, #32]	; (8004bb8 <__NVIC_SetPriority+0x50>)
 8004b98:	88fb      	ldrh	r3, [r7, #6]
 8004b9a:	f003 030f 	and.w	r3, r3, #15
 8004b9e:	3b04      	subs	r3, #4
 8004ba0:	0112      	lsls	r2, r2, #4
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	440b      	add	r3, r1
 8004ba6:	761a      	strb	r2, [r3, #24]
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	e000e100 	.word	0xe000e100
 8004bb8:	e000ed00 	.word	0xe000ed00

08004bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b089      	sub	sp, #36	; 0x24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f003 0307 	and.w	r3, r3, #7
 8004bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	f1c3 0307 	rsb	r3, r3, #7
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	bf28      	it	cs
 8004bda:	2304      	movcs	r3, #4
 8004bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	3304      	adds	r3, #4
 8004be2:	2b06      	cmp	r3, #6
 8004be4:	d902      	bls.n	8004bec <NVIC_EncodePriority+0x30>
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	3b03      	subs	r3, #3
 8004bea:	e000      	b.n	8004bee <NVIC_EncodePriority+0x32>
 8004bec:	2300      	movs	r3, #0
 8004bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfa:	43da      	mvns	r2, r3
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	401a      	ands	r2, r3
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c04:	f04f 31ff 	mov.w	r1, #4294967295
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c0e:	43d9      	mvns	r1, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c14:	4313      	orrs	r3, r2
         );
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3724      	adds	r7, #36	; 0x24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
	...

08004c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c34:	d301      	bcc.n	8004c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c36:	2301      	movs	r3, #1
 8004c38:	e00f      	b.n	8004c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c3a:	4a0a      	ldr	r2, [pc, #40]	; (8004c64 <SysTick_Config+0x40>)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c42:	210f      	movs	r1, #15
 8004c44:	f04f 30ff 	mov.w	r0, #4294967295
 8004c48:	f7ff ff8e 	bl	8004b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c4c:	4b05      	ldr	r3, [pc, #20]	; (8004c64 <SysTick_Config+0x40>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c52:	4b04      	ldr	r3, [pc, #16]	; (8004c64 <SysTick_Config+0x40>)
 8004c54:	2207      	movs	r2, #7
 8004c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	e000e010 	.word	0xe000e010

08004c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f7ff ff47 	bl	8004b04 <__NVIC_SetPriorityGrouping>
}
 8004c76:	bf00      	nop
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b086      	sub	sp, #24
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	4603      	mov	r3, r0
 8004c86:	60b9      	str	r1, [r7, #8]
 8004c88:	607a      	str	r2, [r7, #4]
 8004c8a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c8c:	f7ff ff5e 	bl	8004b4c <__NVIC_GetPriorityGrouping>
 8004c90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	68b9      	ldr	r1, [r7, #8]
 8004c96:	6978      	ldr	r0, [r7, #20]
 8004c98:	f7ff ff90 	bl	8004bbc <NVIC_EncodePriority>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ca2:	4611      	mov	r1, r2
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7ff ff5f 	bl	8004b68 <__NVIC_SetPriority>
}
 8004caa:	bf00      	nop
 8004cac:	3718      	adds	r7, #24
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b082      	sub	sp, #8
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7ff ffb2 	bl	8004c24 <SysTick_Config>
 8004cc0:	4603      	mov	r3, r0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
	...

08004ccc <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t               *channelCounterPtr;
  DFSDM_Channel_HandleTypeDef **channelHandleTable;
  DFSDM_Channel_TypeDef       *channel0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e0b4      	b.n	8004e48 <HAL_DFSDM_ChannelInit+0x17c>
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
    channelHandleTable = a_dfsdm2ChannelHandle;
    channel0Instance   = DFSDM2_Channel0;
  }
#else /* DFSDM2_Channel0 */
  channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8004cde:	4b5c      	ldr	r3, [pc, #368]	; (8004e50 <HAL_DFSDM_ChannelInit+0x184>)
 8004ce0:	617b      	str	r3, [r7, #20]
  channelHandleTable = a_dfsdm1ChannelHandle;
 8004ce2:	4b5c      	ldr	r3, [pc, #368]	; (8004e54 <HAL_DFSDM_ChannelInit+0x188>)
 8004ce4:	613b      	str	r3, [r7, #16]
  channel0Instance   = DFSDM1_Channel0;
 8004ce6:	4b5c      	ldr	r3, [pc, #368]	; (8004e58 <HAL_DFSDM_ChannelInit+0x18c>)
 8004ce8:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check that channel has not been already initialized */
  if (channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 f8b4 	bl	8004e5c <DFSDM_GetChannelFromInstance>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <HAL_DFSDM_ChannelInit+0x3a>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e0a0      	b.n	8004e48 <HAL_DFSDM_ChannelInit+0x17c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7fd fb72 	bl	80023f0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  (*channelCounterPtr)++;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	601a      	str	r2, [r3, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d125      	bne.n	8004d6a <HAL_DFSDM_ChannelInit+0x9e>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	431a      	orrs	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	601a      	str	r2, [r3, #0]

    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	791b      	ldrb	r3, [r3, #4]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d108      	bne.n	8004d5e <HAL_DFSDM_ChannelInit+0x92>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	3b01      	subs	r3, #1
 8004d56:	041b      	lsls	r3, r3, #16
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	601a      	str	r2, [r3, #0]
                                              DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	601a      	str	r2, [r3, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8004d78:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6819      	ldr	r1, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004d88:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004d8e:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	430a      	orrs	r2, r1
 8004d96:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 020f 	bic.w	r2, r2, #15
 8004da6:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6819      	ldr	r1, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004db6:	431a      	orrs	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689a      	ldr	r2, [r3, #8]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004dce:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6899      	ldr	r1, [r3, #8]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dde:	3b01      	subs	r3, #1
 8004de0:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f002 0207 	and.w	r2, r2, #7
 8004dfa:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6859      	ldr	r1, [r3, #4]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e06:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0c:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e26:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f000 f811 	bl	8004e5c <DFSDM_GetChannelFromInstance>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	4413      	add	r3, r2
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	200000f4 	.word	0x200000f4
 8004e54:	200000f8 	.word	0x200000f8
 8004e58:	40017000 	.word	0x40017000

08004e5c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef* Instance)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a1c      	ldr	r2, [pc, #112]	; (8004ed8 <DFSDM_GetChannelFromInstance+0x7c>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d102      	bne.n	8004e72 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60fb      	str	r3, [r7, #12]
 8004e70:	e02b      	b.n	8004eca <DFSDM_GetChannelFromInstance+0x6e>
  else if (Instance == DFSDM2_Channel1)
  {
    channel = 1;
  }
#endif /* DFSDM2_Channel0 */
  else if(Instance == DFSDM1_Channel1)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a19      	ldr	r2, [pc, #100]	; (8004edc <DFSDM_GetChannelFromInstance+0x80>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d102      	bne.n	8004e80 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	60fb      	str	r3, [r7, #12]
 8004e7e:	e024      	b.n	8004eca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a17      	ldr	r2, [pc, #92]	; (8004ee0 <DFSDM_GetChannelFromInstance+0x84>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d102      	bne.n	8004e8e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004e88:	2302      	movs	r3, #2
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	e01d      	b.n	8004eca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a14      	ldr	r2, [pc, #80]	; (8004ee4 <DFSDM_GetChannelFromInstance+0x88>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d102      	bne.n	8004e9c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8004e96:	2303      	movs	r3, #3
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	e016      	b.n	8004eca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a12      	ldr	r2, [pc, #72]	; (8004ee8 <DFSDM_GetChannelFromInstance+0x8c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d102      	bne.n	8004eaa <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8004ea4:	2304      	movs	r3, #4
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	e00f      	b.n	8004eca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a0f      	ldr	r2, [pc, #60]	; (8004eec <DFSDM_GetChannelFromInstance+0x90>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d102      	bne.n	8004eb8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8004eb2:	2305      	movs	r3, #5
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	e008      	b.n	8004eca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a0d      	ldr	r2, [pc, #52]	; (8004ef0 <DFSDM_GetChannelFromInstance+0x94>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d102      	bne.n	8004ec6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8004ec0:	2306      	movs	r3, #6
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	e001      	b.n	8004eca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 8004ec6:	2307      	movs	r3, #7
 8004ec8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8004eca:	68fb      	ldr	r3, [r7, #12]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	40017000 	.word	0x40017000
 8004edc:	40017020 	.word	0x40017020
 8004ee0:	40017040 	.word	0x40017040
 8004ee4:	40017060 	.word	0x40017060
 8004ee8:	40017080 	.word	0x40017080
 8004eec:	400170a0 	.word	0x400170a0
 8004ef0:	400170c0 	.word	0x400170c0

08004ef4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e0c6      	b.n	8005094 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d102      	bne.n	8004f14 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7fd fade 	bl	80024d0 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2223      	movs	r2, #35	; 0x23
 8004f18:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f1a:	4b60      	ldr	r3, [pc, #384]	; (800509c <HAL_ETH_Init+0x1a8>)
 8004f1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f20:	4a5e      	ldr	r2, [pc, #376]	; (800509c <HAL_ETH_Init+0x1a8>)
 8004f22:	f043 0302 	orr.w	r3, r3, #2
 8004f26:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004f2a:	4b5c      	ldr	r3, [pc, #368]	; (800509c <HAL_ETH_Init+0x1a8>)
 8004f2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	60bb      	str	r3, [r7, #8]
 8004f36:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	7a1b      	ldrb	r3, [r3, #8]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d103      	bne.n	8004f48 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004f40:	2000      	movs	r0, #0
 8004f42:	f7fe fc6b 	bl	800381c <HAL_SYSCFG_ETHInterfaceSelect>
 8004f46:	e003      	b.n	8004f50 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004f48:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004f4c:	f7fe fc66 	bl	800381c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f68:	f7fe fc1e 	bl	80037a8 <HAL_GetTick>
 8004f6c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004f6e:	e00f      	b.n	8004f90 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8004f70:	f7fe fc1a 	bl	80037a8 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004f7e:	d907      	bls.n	8004f90 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2204      	movs	r2, #4
 8004f84:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	22e0      	movs	r2, #224	; 0xe0
 8004f8a:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e081      	b.n	8005094 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1e6      	bne.n	8004f70 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 fac0 	bl	8005528 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004fa8:	f003 f9cc 	bl	8008344 <HAL_RCC_GetHCLKFreq>
 8004fac:	4602      	mov	r2, r0
 8004fae:	4b3c      	ldr	r3, [pc, #240]	; (80050a0 <HAL_ETH_Init+0x1ac>)
 8004fb0:	fba3 2302 	umull	r2, r3, r3, r2
 8004fb4:	0c9a      	lsrs	r2, r3, #18
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	3a01      	subs	r2, #1
 8004fbc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 fa13 	bl	80053ec <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004fdc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004fe0:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	f003 0303 	and.w	r3, r3, #3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d007      	beq.n	8004ffe <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	22e0      	movs	r2, #224	; 0xe0
 8004ff8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e04a      	b.n	8005094 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	f241 1308 	movw	r3, #4360	; 0x1108
 8005006:	4413      	add	r3, r2
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	4b26      	ldr	r3, [pc, #152]	; (80050a4 <HAL_ETH_Init+0x1b0>)
 800500c:	4013      	ands	r3, r2
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	6952      	ldr	r2, [r2, #20]
 8005012:	0052      	lsls	r2, r2, #1
 8005014:	6879      	ldr	r1, [r7, #4]
 8005016:	6809      	ldr	r1, [r1, #0]
 8005018:	431a      	orrs	r2, r3
 800501a:	f241 1308 	movw	r3, #4360	; 0x1108
 800501e:	440b      	add	r3, r1
 8005020:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 fad8 	bl	80055d8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 fb1c 	bl	8005666 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	3305      	adds	r3, #5
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	021a      	lsls	r2, r3, #8
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	3304      	adds	r3, #4
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	4619      	mov	r1, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	3303      	adds	r3, #3
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	061a      	lsls	r2, r3, #24
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	3302      	adds	r3, #2
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	041b      	lsls	r3, r3, #16
 8005060:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	3301      	adds	r3, #1
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800506c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800507a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800507c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2210      	movs	r2, #16
 800508a:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2210      	movs	r2, #16
 8005090:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	58024400 	.word	0x58024400
 80050a0:	431bde83 	.word	0x431bde83
 80050a4:	ffff8001 	.word	0xffff8001

080050a8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80050ba:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	791b      	ldrb	r3, [r3, #4]
 80050c0:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80050c2:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	7b1b      	ldrb	r3, [r3, #12]
 80050c8:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80050ca:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	7b5b      	ldrb	r3, [r3, #13]
 80050d0:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80050d2:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	7b9b      	ldrb	r3, [r3, #14]
 80050d8:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80050da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	7bdb      	ldrb	r3, [r3, #15]
 80050e0:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80050e2:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	7c12      	ldrb	r2, [r2, #16]
 80050e8:	2a00      	cmp	r2, #0
 80050ea:	d102      	bne.n	80050f2 <ETH_SetMACConfig+0x4a>
 80050ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80050f0:	e000      	b.n	80050f4 <ETH_SetMACConfig+0x4c>
 80050f2:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80050f4:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	7c52      	ldrb	r2, [r2, #17]
 80050fa:	2a00      	cmp	r2, #0
 80050fc:	d102      	bne.n	8005104 <ETH_SetMACConfig+0x5c>
 80050fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005102:	e000      	b.n	8005106 <ETH_SetMACConfig+0x5e>
 8005104:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005106:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	7c9b      	ldrb	r3, [r3, #18]
 800510c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800510e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005114:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800511a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	7f1b      	ldrb	r3, [r3, #28]
 8005120:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8005122:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	7f5b      	ldrb	r3, [r3, #29]
 8005128:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800512a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	7f92      	ldrb	r2, [r2, #30]
 8005130:	2a00      	cmp	r2, #0
 8005132:	d102      	bne.n	800513a <ETH_SetMACConfig+0x92>
 8005134:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005138:	e000      	b.n	800513c <ETH_SetMACConfig+0x94>
 800513a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800513c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	7fdb      	ldrb	r3, [r3, #31]
 8005142:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005144:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	f892 2020 	ldrb.w	r2, [r2, #32]
 800514c:	2a00      	cmp	r2, #0
 800514e:	d102      	bne.n	8005156 <ETH_SetMACConfig+0xae>
 8005150:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005154:	e000      	b.n	8005158 <ETH_SetMACConfig+0xb0>
 8005156:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005158:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800515e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005166:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8005168:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800516e:	4313      	orrs	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	4b56      	ldr	r3, [pc, #344]	; (80052d4 <ETH_SetMACConfig+0x22c>)
 800517a:	4013      	ands	r3, r2
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6812      	ldr	r2, [r2, #0]
 8005180:	68f9      	ldr	r1, [r7, #12]
 8005182:	430b      	orrs	r3, r1
 8005184:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005192:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005194:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800519c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800519e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80051a6:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80051a8:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80051b0:	2a00      	cmp	r2, #0
 80051b2:	d102      	bne.n	80051ba <ETH_SetMACConfig+0x112>
 80051b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80051b8:	e000      	b.n	80051bc <ETH_SetMACConfig+0x114>
 80051ba:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80051bc:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	4b42      	ldr	r3, [pc, #264]	; (80052d8 <ETH_SetMACConfig+0x230>)
 80051ce:	4013      	ands	r3, r2
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	6812      	ldr	r2, [r2, #0]
 80051d4:	68f9      	ldr	r1, [r7, #12]
 80051d6:	430b      	orrs	r3, r1
 80051d8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051e0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80051e6:	4313      	orrs	r3, r2
 80051e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68da      	ldr	r2, [r3, #12]
 80051f0:	4b3a      	ldr	r3, [pc, #232]	; (80052dc <ETH_SetMACConfig+0x234>)
 80051f2:	4013      	ands	r3, r2
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	6812      	ldr	r2, [r2, #0]
 80051f8:	68f9      	ldr	r1, [r7, #12]
 80051fa:	430b      	orrs	r3, r1
 80051fc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005204:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800520a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005212:	2a00      	cmp	r2, #0
 8005214:	d101      	bne.n	800521a <ETH_SetMACConfig+0x172>
 8005216:	2280      	movs	r2, #128	; 0x80
 8005218:	e000      	b.n	800521c <ETH_SetMACConfig+0x174>
 800521a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800521c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005222:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005224:	4313      	orrs	r3, r2
 8005226:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800522e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005232:	4013      	ands	r3, r2
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	6812      	ldr	r2, [r2, #0]
 8005238:	68f9      	ldr	r1, [r7, #12]
 800523a:	430b      	orrs	r3, r1
 800523c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005244:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800524c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800524e:	4313      	orrs	r3, r2
 8005250:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800525a:	f023 0103 	bic.w	r1, r3, #3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	430a      	orrs	r2, r1
 8005266:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005272:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800528e:	2a00      	cmp	r2, #0
 8005290:	d101      	bne.n	8005296 <ETH_SetMACConfig+0x1ee>
 8005292:	2240      	movs	r2, #64	; 0x40
 8005294:	e000      	b.n	8005298 <ETH_SetMACConfig+0x1f0>
 8005296:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005298:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80052a0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80052a2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80052aa:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80052ac:	4313      	orrs	r3, r2
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80052b8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80052c8:	bf00      	nop
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	00048083 	.word	0x00048083
 80052d8:	c0f88000 	.word	0xc0f88000
 80052dc:	fffffef0 	.word	0xfffffef0

080052e0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	4b38      	ldr	r3, [pc, #224]	; (80053d8 <ETH_SetDMAConfig+0xf8>)
 80052f6:	4013      	ands	r3, r2
 80052f8:	683a      	ldr	r2, [r7, #0]
 80052fa:	6812      	ldr	r2, [r2, #0]
 80052fc:	6879      	ldr	r1, [r7, #4]
 80052fe:	6809      	ldr	r1, [r1, #0]
 8005300:	431a      	orrs	r2, r3
 8005302:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8005306:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	791b      	ldrb	r3, [r3, #4]
 800530c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005312:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	7b1b      	ldrb	r3, [r3, #12]
 8005318:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800531a:	4313      	orrs	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	f241 0304 	movw	r3, #4100	; 0x1004
 8005326:	4413      	add	r3, r2
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	4b2c      	ldr	r3, [pc, #176]	; (80053dc <ETH_SetDMAConfig+0xfc>)
 800532c:	4013      	ands	r3, r2
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	6811      	ldr	r1, [r2, #0]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	431a      	orrs	r2, r3
 8005336:	f241 0304 	movw	r3, #4100	; 0x1004
 800533a:	440b      	add	r3, r1
 800533c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	7b5b      	ldrb	r3, [r3, #13]
 8005342:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005348:	4313      	orrs	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	4b22      	ldr	r3, [pc, #136]	; (80053e0 <ETH_SetDMAConfig+0x100>)
 8005358:	4013      	ands	r3, r2
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	6811      	ldr	r1, [r2, #0]
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	431a      	orrs	r2, r3
 8005362:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8005366:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	7d1b      	ldrb	r3, [r3, #20]
 8005370:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005372:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	7f5b      	ldrb	r3, [r3, #29]
 8005378:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	f241 1304 	movw	r3, #4356	; 0x1104
 8005386:	4413      	add	r3, r2
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	4b16      	ldr	r3, [pc, #88]	; (80053e4 <ETH_SetDMAConfig+0x104>)
 800538c:	4013      	ands	r3, r2
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	6811      	ldr	r1, [r2, #0]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	431a      	orrs	r2, r3
 8005396:	f241 1304 	movw	r3, #4356	; 0x1104
 800539a:	440b      	add	r3, r1
 800539c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	7f1b      	ldrb	r3, [r3, #28]
 80053a2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80053a8:	4313      	orrs	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	f241 1308 	movw	r3, #4360	; 0x1108
 80053b4:	4413      	add	r3, r2
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	4b0b      	ldr	r3, [pc, #44]	; (80053e8 <ETH_SetDMAConfig+0x108>)
 80053ba:	4013      	ands	r3, r2
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	6811      	ldr	r1, [r2, #0]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	431a      	orrs	r2, r3
 80053c4:	f241 1308 	movw	r3, #4360	; 0x1108
 80053c8:	440b      	add	r3, r1
 80053ca:	601a      	str	r2, [r3, #0]
}
 80053cc:	bf00      	nop
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	ffff87fd 	.word	0xffff87fd
 80053dc:	ffff2ffe 	.word	0xffff2ffe
 80053e0:	fffec000 	.word	0xfffec000
 80053e4:	ffc0efef 	.word	0xffc0efef
 80053e8:	7fc0ffff 	.word	0x7fc0ffff

080053ec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b0a4      	sub	sp, #144	; 0x90
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80053f4:	2301      	movs	r3, #1
 80053f6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80053fa:	2300      	movs	r3, #0
 80053fc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80053fe:	2300      	movs	r3, #0
 8005400:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005404:	2300      	movs	r3, #0
 8005406:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800540a:	2301      	movs	r3, #1
 800540c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005410:	2301      	movs	r3, #1
 8005412:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005416:	2301      	movs	r3, #1
 8005418:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800541c:	2300      	movs	r3, #0
 800541e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005422:	2301      	movs	r3, #1
 8005424:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005428:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800542c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800542e:	2300      	movs	r3, #0
 8005430:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005434:	2300      	movs	r3, #0
 8005436:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005438:	2300      	movs	r3, #0
 800543a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800543e:	2300      	movs	r3, #0
 8005440:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005444:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005448:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800544a:	2300      	movs	r3, #0
 800544c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005450:	2300      	movs	r3, #0
 8005452:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005454:	2301      	movs	r3, #1
 8005456:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800545a:	2300      	movs	r3, #0
 800545c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005460:	2300      	movs	r3, #0
 8005462:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005466:	2300      	movs	r3, #0
 8005468:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800546a:	2300      	movs	r3, #0
 800546c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800546e:	2300      	movs	r3, #0
 8005470:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005472:	2300      	movs	r3, #0
 8005474:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005478:	2300      	movs	r3, #0
 800547a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800547e:	2301      	movs	r3, #1
 8005480:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005484:	2320      	movs	r3, #32
 8005486:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800548a:	2301      	movs	r3, #1
 800548c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005490:	2300      	movs	r3, #0
 8005492:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005496:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800549a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800549c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80054a0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80054a2:	2300      	movs	r3, #0
 80054a4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80054a8:	2302      	movs	r3, #2
 80054aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80054ae:	2300      	movs	r3, #0
 80054b0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80054b4:	2300      	movs	r3, #0
 80054b6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80054ba:	2300      	movs	r3, #0
 80054bc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80054c0:	2301      	movs	r3, #1
 80054c2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80054c6:	2300      	movs	r3, #0
 80054c8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80054ca:	2301      	movs	r3, #1
 80054cc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80054d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80054d4:	4619      	mov	r1, r3
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7ff fde6 	bl	80050a8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80054dc:	2301      	movs	r3, #1
 80054de:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80054e0:	2301      	movs	r3, #1
 80054e2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80054e4:	2300      	movs	r3, #0
 80054e6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80054e8:	2300      	movs	r3, #0
 80054ea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80054ee:	2300      	movs	r3, #0
 80054f0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80054f2:	2300      	movs	r3, #0
 80054f4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80054f6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80054fa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80054fc:	2300      	movs	r3, #0
 80054fe:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005500:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005504:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005506:	2300      	movs	r3, #0
 8005508:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 800550c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005510:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005512:	f107 0308 	add.w	r3, r7, #8
 8005516:	4619      	mov	r1, r3
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7ff fee1 	bl	80052e0 <ETH_SetDMAConfig>
}
 800551e:	bf00      	nop
 8005520:	3790      	adds	r7, #144	; 0x90
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
	...

08005528 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005538:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005540:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005542:	f002 feff 	bl	8008344 <HAL_RCC_GetHCLKFreq>
 8005546:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	4a1e      	ldr	r2, [pc, #120]	; (80055c4 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d908      	bls.n	8005562 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	4a1d      	ldr	r2, [pc, #116]	; (80055c8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d804      	bhi.n	8005562 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800555e:	60fb      	str	r3, [r7, #12]
 8005560:	e027      	b.n	80055b2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	4a18      	ldr	r2, [pc, #96]	; (80055c8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d908      	bls.n	800557c <ETH_MAC_MDIO_ClkConfig+0x54>
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	4a17      	ldr	r2, [pc, #92]	; (80055cc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d804      	bhi.n	800557c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005578:	60fb      	str	r3, [r7, #12]
 800557a:	e01a      	b.n	80055b2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	4a13      	ldr	r2, [pc, #76]	; (80055cc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d903      	bls.n	800558c <ETH_MAC_MDIO_ClkConfig+0x64>
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	4a12      	ldr	r2, [pc, #72]	; (80055d0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d911      	bls.n	80055b0 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	4a10      	ldr	r2, [pc, #64]	; (80055d0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d908      	bls.n	80055a6 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	4a0f      	ldr	r2, [pc, #60]	; (80055d4 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d804      	bhi.n	80055a6 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	e005      	b.n	80055b2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055ac:	60fb      	str	r3, [r7, #12]
 80055ae:	e000      	b.n	80055b2 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80055b0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80055bc:	bf00      	nop
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	01312cff 	.word	0x01312cff
 80055c8:	02160ebf 	.word	0x02160ebf
 80055cc:	039386ff 	.word	0x039386ff
 80055d0:	05f5e0ff 	.word	0x05f5e0ff
 80055d4:	08f0d17f 	.word	0x08f0d17f

080055d8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80055e0:	2300      	movs	r3, #0
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	e01d      	b.n	8005622 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68d9      	ldr	r1, [r3, #12]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	4613      	mov	r3, r2
 80055ee:	005b      	lsls	r3, r3, #1
 80055f0:	4413      	add	r3, r2
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	440b      	add	r3, r1
 80055f6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2200      	movs	r2, #0
 80055fc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	2200      	movs	r2, #0
 8005602:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2200      	movs	r2, #0
 8005608:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	2200      	movs	r2, #0
 800560e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005610:	68b9      	ldr	r1, [r7, #8]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	3206      	adds	r2, #6
 8005618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	3301      	adds	r3, #1
 8005620:	60fb      	str	r3, [r7, #12]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2b03      	cmp	r3, #3
 8005626:	d9de      	bls.n	80055e6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	f241 132c 	movw	r3, #4396	; 0x112c
 8005636:	4413      	add	r3, r2
 8005638:	2203      	movs	r2, #3
 800563a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68d9      	ldr	r1, [r3, #12]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	f241 1314 	movw	r3, #4372	; 0x1114
 8005648:	4413      	add	r3, r2
 800564a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68da      	ldr	r2, [r3, #12]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005658:	601a      	str	r2, [r3, #0]
}
 800565a:	bf00      	nop
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005666:	b480      	push	{r7}
 8005668:	b085      	sub	sp, #20
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800566e:	2300      	movs	r3, #0
 8005670:	60fb      	str	r3, [r7, #12]
 8005672:	e024      	b.n	80056be <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6919      	ldr	r1, [r3, #16]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	4613      	mov	r3, r2
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	4413      	add	r3, r2
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	440b      	add	r3, r1
 8005684:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	2200      	movs	r2, #0
 800568a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	2200      	movs	r2, #0
 8005690:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2200      	movs	r2, #0
 8005696:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	2200      	movs	r2, #0
 800569c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	2200      	movs	r2, #0
 80056a2:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	2200      	movs	r2, #0
 80056a8:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	6879      	ldr	r1, [r7, #4]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	330a      	adds	r3, #10
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	440b      	add	r3, r1
 80056b6:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	3301      	adds	r3, #1
 80056bc:	60fb      	str	r3, [r7, #12]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2b03      	cmp	r3, #3
 80056c2:	d9d7      	bls.n	8005674 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	f241 1330 	movw	r3, #4400	; 0x1130
 80056ea:	4413      	add	r3, r2
 80056ec:	2203      	movs	r2, #3
 80056ee:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6919      	ldr	r1, [r3, #16]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	f241 131c 	movw	r3, #4380	; 0x111c
 80056fc:	4413      	add	r3, r2
 80056fe:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	f241 1328 	movw	r3, #4392	; 0x1128
 8005710:	4413      	add	r3, r2
 8005712:	6019      	str	r1, [r3, #0]
}
 8005714:	bf00      	nop
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b098      	sub	sp, #96	; 0x60
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005728:	4a84      	ldr	r2, [pc, #528]	; (800593c <HAL_FDCAN_Init+0x21c>)
 800572a:	f107 030c 	add.w	r3, r7, #12
 800572e:	4611      	mov	r1, r2
 8005730:	224c      	movs	r2, #76	; 0x4c
 8005732:	4618      	mov	r0, r3
 8005734:	f008 ffa6 	bl	800e684 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e1ca      	b.n	8005ad8 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a7e      	ldr	r2, [pc, #504]	; (8005940 <HAL_FDCAN_Init+0x220>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d106      	bne.n	800575a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005754:	461a      	mov	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d106      	bne.n	8005774 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7fc ff5a 	bl	8002628 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	699a      	ldr	r2, [r3, #24]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 0210 	bic.w	r2, r2, #16
 8005782:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005784:	f7fe f810 	bl	80037a8 <HAL_GetTick>
 8005788:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800578a:	e014      	b.n	80057b6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800578c:	f7fe f80c 	bl	80037a8 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	2b0a      	cmp	r3, #10
 8005798:	d90d      	bls.n	80057b6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057a0:	f043 0201 	orr.w	r2, r3, #1
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2203      	movs	r2, #3
 80057ae:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e190      	b.n	8005ad8 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	f003 0308 	and.w	r3, r3, #8
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d0e3      	beq.n	800578c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	699a      	ldr	r2, [r3, #24]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f042 0201 	orr.w	r2, r2, #1
 80057d2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80057d4:	f7fd ffe8 	bl	80037a8 <HAL_GetTick>
 80057d8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80057da:	e014      	b.n	8005806 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80057dc:	f7fd ffe4 	bl	80037a8 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b0a      	cmp	r3, #10
 80057e8:	d90d      	bls.n	8005806 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057f0:	f043 0201 	orr.w	r2, r3, #1
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2203      	movs	r2, #3
 80057fe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e168      	b.n	8005ad8 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	f003 0301 	and.w	r3, r3, #1
 8005810:	2b00      	cmp	r3, #0
 8005812:	d0e3      	beq.n	80057dc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	699a      	ldr	r2, [r3, #24]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f042 0202 	orr.w	r2, r2, #2
 8005822:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	7c1b      	ldrb	r3, [r3, #16]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d108      	bne.n	800583e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	699a      	ldr	r2, [r3, #24]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800583a:	619a      	str	r2, [r3, #24]
 800583c:	e007      	b.n	800584e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	699a      	ldr	r2, [r3, #24]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800584c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	7c5b      	ldrb	r3, [r3, #17]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d108      	bne.n	8005868 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	699a      	ldr	r2, [r3, #24]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005864:	619a      	str	r2, [r3, #24]
 8005866:	e007      	b.n	8005878 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699a      	ldr	r2, [r3, #24]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005876:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	7c9b      	ldrb	r3, [r3, #18]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d108      	bne.n	8005892 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	699a      	ldr	r2, [r3, #24]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800588e:	619a      	str	r2, [r3, #24]
 8005890:	e007      	b.n	80058a2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	699a      	ldr	r2, [r3, #24]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80058a0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689a      	ldr	r2, [r3, #8]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	430a      	orrs	r2, r1
 80058b6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699a      	ldr	r2, [r3, #24]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80058c6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	691a      	ldr	r2, [r3, #16]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 0210 	bic.w	r2, r2, #16
 80058d6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d108      	bne.n	80058f2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699a      	ldr	r2, [r3, #24]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f042 0204 	orr.w	r2, r2, #4
 80058ee:	619a      	str	r2, [r3, #24]
 80058f0:	e030      	b.n	8005954 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d02c      	beq.n	8005954 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d020      	beq.n	8005944 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	699a      	ldr	r2, [r3, #24]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005910:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	691a      	ldr	r2, [r3, #16]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f042 0210 	orr.w	r2, r2, #16
 8005920:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	2b03      	cmp	r3, #3
 8005928:	d114      	bne.n	8005954 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	699a      	ldr	r2, [r3, #24]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f042 0220 	orr.w	r2, r2, #32
 8005938:	619a      	str	r2, [r3, #24]
 800593a:	e00b      	b.n	8005954 <HAL_FDCAN_Init+0x234>
 800593c:	0800e6c4 	.word	0x0800e6c4
 8005940:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	699a      	ldr	r2, [r3, #24]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f042 0220 	orr.w	r2, r2, #32
 8005952:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	3b01      	subs	r3, #1
 800595a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	69db      	ldr	r3, [r3, #28]
 8005960:	3b01      	subs	r3, #1
 8005962:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005964:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800596c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	3b01      	subs	r3, #1
 8005976:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800597c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800597e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005988:	d115      	bne.n	80059b6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005994:	3b01      	subs	r3, #1
 8005996:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005998:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599e:	3b01      	subs	r3, #1
 80059a0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80059a2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059aa:	3b01      	subs	r3, #1
 80059ac:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80059b2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80059b4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00a      	beq.n	80059d4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059dc:	4413      	add	r3, r2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d012      	beq.n	8005a08 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80059ea:	f023 0107 	bic.w	r1, r3, #7
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80059f8:	4413      	add	r3, r2
 80059fa:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d012      	beq.n	8005a36 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005a18:	f023 0107 	bic.w	r1, r3, #7
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005a26:	4413      	add	r3, r2
 8005a28:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	430a      	orrs	r2, r1
 8005a32:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d013      	beq.n	8005a66 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005a46:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005a54:	4413      	add	r3, r2
 8005a56:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005a5a:	011a      	lsls	r2, r3, #4
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d013      	beq.n	8005a96 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005a76:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005a84:	4413      	add	r3, r2
 8005a86:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005a8a:	021a      	lsls	r2, r3, #8
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a11      	ldr	r2, [pc, #68]	; (8005ae0 <HAL_FDCAN_Init+0x3c0>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d107      	bne.n	8005ab0 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	689a      	ldr	r2, [r3, #8]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f022 0203 	bic.w	r2, r2, #3
 8005aae:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f80b 	bl	8005ae4 <FDCAN_CalcultateRamBlockAddresses>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8005ad4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3760      	adds	r7, #96	; 0x60
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	4000a000 	.word	0x4000a000

08005ae4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005afa:	4ba7      	ldr	r3, [pc, #668]	; (8005d98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005afc:	4013      	ands	r3, r2
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	0091      	lsls	r1, r2, #2
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	6812      	ldr	r2, [r2, #0]
 8005b06:	430b      	orrs	r3, r1
 8005b08:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b14:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1c:	041a      	lsls	r2, r3, #16
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	4413      	add	r3, r2
 8005b30:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005b3a:	4b97      	ldr	r3, [pc, #604]	; (8005d98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	0091      	lsls	r1, r2, #2
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	6812      	ldr	r2, [r2, #0]
 8005b46:	430b      	orrs	r3, r1
 8005b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b54:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5c:	041a      	lsls	r2, r3, #16
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6c:	005b      	lsls	r3, r3, #1
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	4413      	add	r3, r2
 8005b72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005b7c:	4b86      	ldr	r3, [pc, #536]	; (8005d98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005b7e:	4013      	ands	r3, r2
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	0091      	lsls	r1, r2, #2
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	6812      	ldr	r2, [r2, #0]
 8005b88:	430b      	orrs	r3, r1
 8005b8a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005b96:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	041a      	lsls	r2, r3, #16
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005bb2:	fb02 f303 	mul.w	r3, r2, r3
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	4413      	add	r3, r2
 8005bba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005bc4:	4b74      	ldr	r3, [pc, #464]	; (8005d98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	0091      	lsls	r1, r2, #2
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	6812      	ldr	r2, [r2, #0]
 8005bd0:	430b      	orrs	r3, r1
 8005bd2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005bde:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005be6:	041a      	lsls	r2, r3, #16
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	430a      	orrs	r2, r1
 8005bee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005bfa:	fb02 f303 	mul.w	r3, r2, r3
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	4413      	add	r3, r2
 8005c02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005c0c:	4b62      	ldr	r3, [pc, #392]	; (8005d98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c0e:	4013      	ands	r3, r2
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	0091      	lsls	r1, r2, #2
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	6812      	ldr	r2, [r2, #0]
 8005c18:	430b      	orrs	r3, r1
 8005c1a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005c26:	fb02 f303 	mul.w	r3, r2, r3
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005c38:	4b57      	ldr	r3, [pc, #348]	; (8005d98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	0091      	lsls	r1, r2, #2
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	6812      	ldr	r2, [r2, #0]
 8005c44:	430b      	orrs	r3, r1
 8005c46:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c52:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c5a:	041a      	lsls	r2, r3, #16
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c6a:	005b      	lsls	r3, r3, #1
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	4413      	add	r3, r2
 8005c70:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005c7a:	4b47      	ldr	r3, [pc, #284]	; (8005d98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	0091      	lsls	r1, r2, #2
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	6812      	ldr	r2, [r2, #0]
 8005c86:	430b      	orrs	r3, r1
 8005c88:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005c94:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c9c:	041a      	lsls	r2, r3, #16
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005cb0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cb8:	061a      	lsls	r2, r3, #24
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cc8:	4b34      	ldr	r3, [pc, #208]	; (8005d9c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005cca:	4413      	add	r3, r2
 8005ccc:	009a      	lsls	r2, r3, #2
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	441a      	add	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cea:	00db      	lsls	r3, r3, #3
 8005cec:	441a      	add	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	6879      	ldr	r1, [r7, #4]
 8005cfc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8005cfe:	fb01 f303 	mul.w	r3, r1, r3
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	441a      	add	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d12:	6879      	ldr	r1, [r7, #4]
 8005d14:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8005d16:	fb01 f303 	mul.w	r3, r1, r3
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	441a      	add	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d2a:	6879      	ldr	r1, [r7, #4]
 8005d2c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8005d2e:	fb01 f303 	mul.w	r3, r1, r3
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	441a      	add	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d46:	00db      	lsls	r3, r3, #3
 8005d48:	441a      	add	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d5a:	6879      	ldr	r1, [r7, #4]
 8005d5c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005d5e:	fb01 f303 	mul.w	r3, r1, r3
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	441a      	add	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d76:	6879      	ldr	r1, [r7, #4]
 8005d78:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005d7a:	fb01 f303 	mul.w	r3, r1, r3
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	441a      	add	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d8e:	4a04      	ldr	r2, [pc, #16]	; (8005da0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d915      	bls.n	8005dc0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005d94:	e006      	b.n	8005da4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005d96:	bf00      	nop
 8005d98:	ffff0003 	.word	0xffff0003
 8005d9c:	10002b00 	.word	0x10002b00
 8005da0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005daa:	f043 0220 	orr.w	r2, r3, #32
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2203      	movs	r2, #3
 8005db8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e010      	b.n	8005de2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dc4:	60fb      	str	r3, [r7, #12]
 8005dc6:	e005      	b.n	8005dd4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	3304      	adds	r3, #4
 8005dd2:	60fb      	str	r3, [r7, #12]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d3f3      	bcc.n	8005dc8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop

08005df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b089      	sub	sp, #36	; 0x24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005dfe:	4b89      	ldr	r3, [pc, #548]	; (8006024 <HAL_GPIO_Init+0x234>)
 8005e00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e02:	e194      	b.n	800612e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	2101      	movs	r1, #1
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e10:	4013      	ands	r3, r2
 8005e12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f000 8186 	beq.w	8006128 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d00b      	beq.n	8005e3c <HAL_GPIO_Init+0x4c>
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d007      	beq.n	8005e3c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005e30:	2b11      	cmp	r3, #17
 8005e32:	d003      	beq.n	8005e3c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	2b12      	cmp	r3, #18
 8005e3a:	d130      	bne.n	8005e9e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	005b      	lsls	r3, r3, #1
 8005e46:	2203      	movs	r2, #3
 8005e48:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4c:	43db      	mvns	r3, r3
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	4013      	ands	r3, r2
 8005e52:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	68da      	ldr	r2, [r3, #12]
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	005b      	lsls	r3, r3, #1
 8005e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e72:	2201      	movs	r2, #1
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7a:	43db      	mvns	r3, r3
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	4013      	ands	r3, r2
 8005e80:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	091b      	lsrs	r3, r3, #4
 8005e88:	f003 0201 	and.w	r2, r3, #1
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	005b      	lsls	r3, r3, #1
 8005ea8:	2203      	movs	r2, #3
 8005eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005eae:	43db      	mvns	r3, r3
 8005eb0:	69ba      	ldr	r2, [r7, #24]
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	689a      	ldr	r2, [r3, #8]
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	005b      	lsls	r3, r3, #1
 8005ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d003      	beq.n	8005ede <HAL_GPIO_Init+0xee>
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	2b12      	cmp	r3, #18
 8005edc:	d123      	bne.n	8005f26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	08da      	lsrs	r2, r3, #3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	3208      	adds	r2, #8
 8005ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	f003 0307 	and.w	r3, r3, #7
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	220f      	movs	r2, #15
 8005ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8005efa:	43db      	mvns	r3, r3
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	4013      	ands	r3, r2
 8005f00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	691a      	ldr	r2, [r3, #16]
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	f003 0307 	and.w	r3, r3, #7
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f12:	69ba      	ldr	r2, [r7, #24]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	08da      	lsrs	r2, r3, #3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	3208      	adds	r2, #8
 8005f20:	69b9      	ldr	r1, [r7, #24]
 8005f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	005b      	lsls	r3, r3, #1
 8005f30:	2203      	movs	r2, #3
 8005f32:	fa02 f303 	lsl.w	r3, r2, r3
 8005f36:	43db      	mvns	r3, r3
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f003 0203 	and.w	r2, r3, #3
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	005b      	lsls	r3, r3, #1
 8005f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4e:	69ba      	ldr	r2, [r7, #24]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f000 80e0 	beq.w	8006128 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f68:	4b2f      	ldr	r3, [pc, #188]	; (8006028 <HAL_GPIO_Init+0x238>)
 8005f6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f6e:	4a2e      	ldr	r2, [pc, #184]	; (8006028 <HAL_GPIO_Init+0x238>)
 8005f70:	f043 0302 	orr.w	r3, r3, #2
 8005f74:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005f78:	4b2b      	ldr	r3, [pc, #172]	; (8006028 <HAL_GPIO_Init+0x238>)
 8005f7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	60fb      	str	r3, [r7, #12]
 8005f84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f86:	4a29      	ldr	r2, [pc, #164]	; (800602c <HAL_GPIO_Init+0x23c>)
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	089b      	lsrs	r3, r3, #2
 8005f8c:	3302      	adds	r3, #2
 8005f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	f003 0303 	and.w	r3, r3, #3
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	220f      	movs	r2, #15
 8005f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa2:	43db      	mvns	r3, r3
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a20      	ldr	r2, [pc, #128]	; (8006030 <HAL_GPIO_Init+0x240>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d052      	beq.n	8006058 <HAL_GPIO_Init+0x268>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a1f      	ldr	r2, [pc, #124]	; (8006034 <HAL_GPIO_Init+0x244>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d031      	beq.n	800601e <HAL_GPIO_Init+0x22e>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a1e      	ldr	r2, [pc, #120]	; (8006038 <HAL_GPIO_Init+0x248>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d02b      	beq.n	800601a <HAL_GPIO_Init+0x22a>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a1d      	ldr	r2, [pc, #116]	; (800603c <HAL_GPIO_Init+0x24c>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d025      	beq.n	8006016 <HAL_GPIO_Init+0x226>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a1c      	ldr	r2, [pc, #112]	; (8006040 <HAL_GPIO_Init+0x250>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d01f      	beq.n	8006012 <HAL_GPIO_Init+0x222>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a1b      	ldr	r2, [pc, #108]	; (8006044 <HAL_GPIO_Init+0x254>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d019      	beq.n	800600e <HAL_GPIO_Init+0x21e>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a1a      	ldr	r2, [pc, #104]	; (8006048 <HAL_GPIO_Init+0x258>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d013      	beq.n	800600a <HAL_GPIO_Init+0x21a>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a19      	ldr	r2, [pc, #100]	; (800604c <HAL_GPIO_Init+0x25c>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d00d      	beq.n	8006006 <HAL_GPIO_Init+0x216>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a18      	ldr	r2, [pc, #96]	; (8006050 <HAL_GPIO_Init+0x260>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d007      	beq.n	8006002 <HAL_GPIO_Init+0x212>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a17      	ldr	r2, [pc, #92]	; (8006054 <HAL_GPIO_Init+0x264>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d101      	bne.n	8005ffe <HAL_GPIO_Init+0x20e>
 8005ffa:	2309      	movs	r3, #9
 8005ffc:	e02d      	b.n	800605a <HAL_GPIO_Init+0x26a>
 8005ffe:	230a      	movs	r3, #10
 8006000:	e02b      	b.n	800605a <HAL_GPIO_Init+0x26a>
 8006002:	2308      	movs	r3, #8
 8006004:	e029      	b.n	800605a <HAL_GPIO_Init+0x26a>
 8006006:	2307      	movs	r3, #7
 8006008:	e027      	b.n	800605a <HAL_GPIO_Init+0x26a>
 800600a:	2306      	movs	r3, #6
 800600c:	e025      	b.n	800605a <HAL_GPIO_Init+0x26a>
 800600e:	2305      	movs	r3, #5
 8006010:	e023      	b.n	800605a <HAL_GPIO_Init+0x26a>
 8006012:	2304      	movs	r3, #4
 8006014:	e021      	b.n	800605a <HAL_GPIO_Init+0x26a>
 8006016:	2303      	movs	r3, #3
 8006018:	e01f      	b.n	800605a <HAL_GPIO_Init+0x26a>
 800601a:	2302      	movs	r3, #2
 800601c:	e01d      	b.n	800605a <HAL_GPIO_Init+0x26a>
 800601e:	2301      	movs	r3, #1
 8006020:	e01b      	b.n	800605a <HAL_GPIO_Init+0x26a>
 8006022:	bf00      	nop
 8006024:	58000080 	.word	0x58000080
 8006028:	58024400 	.word	0x58024400
 800602c:	58000400 	.word	0x58000400
 8006030:	58020000 	.word	0x58020000
 8006034:	58020400 	.word	0x58020400
 8006038:	58020800 	.word	0x58020800
 800603c:	58020c00 	.word	0x58020c00
 8006040:	58021000 	.word	0x58021000
 8006044:	58021400 	.word	0x58021400
 8006048:	58021800 	.word	0x58021800
 800604c:	58021c00 	.word	0x58021c00
 8006050:	58022000 	.word	0x58022000
 8006054:	58022400 	.word	0x58022400
 8006058:	2300      	movs	r3, #0
 800605a:	69fa      	ldr	r2, [r7, #28]
 800605c:	f002 0203 	and.w	r2, r2, #3
 8006060:	0092      	lsls	r2, r2, #2
 8006062:	4093      	lsls	r3, r2
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	4313      	orrs	r3, r2
 8006068:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800606a:	4938      	ldr	r1, [pc, #224]	; (800614c <HAL_GPIO_Init+0x35c>)
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	089b      	lsrs	r3, r3, #2
 8006070:	3302      	adds	r3, #2
 8006072:	69ba      	ldr	r2, [r7, #24]
 8006074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	43db      	mvns	r3, r3
 8006082:	69ba      	ldr	r2, [r7, #24]
 8006084:	4013      	ands	r3, r2
 8006086:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d003      	beq.n	800609c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006094:	69ba      	ldr	r2, [r7, #24]
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	4313      	orrs	r3, r2
 800609a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	43db      	mvns	r3, r3
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	4013      	ands	r3, r2
 80060b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d003      	beq.n	80060c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80060be:	69ba      	ldr	r2, [r7, #24]
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80060cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	43db      	mvns	r3, r3
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	4013      	ands	r3, r2
 80060dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d003      	beq.n	80060f2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80060ea:	69ba      	ldr	r2, [r7, #24]
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80060f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80060fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	43db      	mvns	r3, r3
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	4013      	ands	r3, r2
 800610a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d003      	beq.n	8006120 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	4313      	orrs	r3, r2
 800611e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006120:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	3301      	adds	r3, #1
 800612c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	fa22 f303 	lsr.w	r3, r2, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	f47f ae63 	bne.w	8005e04 <HAL_GPIO_Init+0x14>
  }
}
 800613e:	bf00      	nop
 8006140:	3724      	adds	r7, #36	; 0x24
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	58000400 	.word	0x58000400

08006150 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e0bd      	b.n	80062de <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2202      	movs	r2, #2
 8006166:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d031      	beq.n	800620a <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a4f      	ldr	r2, [pc, #316]	; (80062e8 <HAL_HRTIM_Init+0x198>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d10e      	bne.n	80061ce <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80061b0:	4b4e      	ldr	r3, [pc, #312]	; (80062ec <HAL_HRTIM_Init+0x19c>)
 80061b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80061b6:	4a4d      	ldr	r2, [pc, #308]	; (80062ec <HAL_HRTIM_Init+0x19c>)
 80061b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061bc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80061c0:	4b4a      	ldr	r3, [pc, #296]	; (80062ec <HAL_HRTIM_Init+0x19c>)
 80061c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80061c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061ca:	60fb      	str	r3, [r7, #12]
 80061cc:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80061dc:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80061f2:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	4313      	orrs	r3, r2
 8006200:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f7fc fa56 	bl	80026bc <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f003 0302 	and.w	r3, r3, #2
 8006218:	2b00      	cmp	r3, #0
 800621a:	d012      	beq.n	8006242 <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800622a:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4313      	orrs	r3, r2
 8006238:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8006252:	2300      	movs	r3, #0
 8006254:	75fb      	strb	r3, [r7, #23]
 8006256:	e03e      	b.n	80062d6 <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8006258:	7dfa      	ldrb	r2, [r7, #23]
 800625a:	6879      	ldr	r1, [r7, #4]
 800625c:	4613      	mov	r3, r2
 800625e:	00db      	lsls	r3, r3, #3
 8006260:	1a9b      	subs	r3, r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	440b      	add	r3, r1
 8006266:	3318      	adds	r3, #24
 8006268:	2200      	movs	r2, #0
 800626a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 800626c:	7dfa      	ldrb	r2, [r7, #23]
 800626e:	6879      	ldr	r1, [r7, #4]
 8006270:	4613      	mov	r3, r2
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	1a9b      	subs	r3, r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	440b      	add	r3, r1
 800627a:	331c      	adds	r3, #28
 800627c:	2200      	movs	r2, #0
 800627e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8006280:	7dfa      	ldrb	r2, [r7, #23]
 8006282:	6879      	ldr	r1, [r7, #4]
 8006284:	4613      	mov	r3, r2
 8006286:	00db      	lsls	r3, r3, #3
 8006288:	1a9b      	subs	r3, r3, r2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	440b      	add	r3, r1
 800628e:	3320      	adds	r3, #32
 8006290:	2200      	movs	r2, #0
 8006292:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8006294:	7dfa      	ldrb	r2, [r7, #23]
 8006296:	6879      	ldr	r1, [r7, #4]
 8006298:	4613      	mov	r3, r2
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	1a9b      	subs	r3, r3, r2
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	440b      	add	r3, r1
 80062a2:	3324      	adds	r3, #36	; 0x24
 80062a4:	2200      	movs	r2, #0
 80062a6:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80062a8:	7dfa      	ldrb	r2, [r7, #23]
 80062aa:	6879      	ldr	r1, [r7, #4]
 80062ac:	4613      	mov	r3, r2
 80062ae:	00db      	lsls	r3, r3, #3
 80062b0:	1a9b      	subs	r3, r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	440b      	add	r3, r1
 80062b6:	3328      	adds	r3, #40	; 0x28
 80062b8:	2200      	movs	r2, #0
 80062ba:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80062bc:	7dfa      	ldrb	r2, [r7, #23]
 80062be:	6879      	ldr	r1, [r7, #4]
 80062c0:	4613      	mov	r3, r2
 80062c2:	00db      	lsls	r3, r3, #3
 80062c4:	1a9b      	subs	r3, r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	440b      	add	r3, r1
 80062ca:	3330      	adds	r3, #48	; 0x30
 80062cc:	2200      	movs	r2, #0
 80062ce:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80062d0:	7dfb      	ldrb	r3, [r7, #23]
 80062d2:	3301      	adds	r3, #1
 80062d4:	75fb      	strb	r3, [r7, #23]
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80062d6:	7dfb      	ldrb	r3, [r7, #23]
 80062d8:	2b05      	cmp	r3, #5
 80062da:	d9bd      	bls.n	8006258 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3718      	adds	r7, #24
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	40017400 	.word	0x40017400
 80062ec:	58024400 	.word	0x58024400

080062f0 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8006302:	b2db      	uxtb	r3, r3
 8006304:	2b02      	cmp	r3, #2
 8006306:	d101      	bne.n	800630c <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8006308:	2302      	movs	r3, #2
 800630a:	e015      	b.n	8006338 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2202      	movs	r2, #2
 8006310:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	2b05      	cmp	r3, #5
 8006318:	d104      	bne.n	8006324 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 800631a:	6879      	ldr	r1, [r7, #4]
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 f8b2 	bl	8006486 <HRTIM_MasterBase_Config>
 8006322:	e004      	b.n	800632e <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	68b9      	ldr	r1, [r7, #8]
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f000 f8db 	bl	80064e4 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b02      	cmp	r3, #2
 8006356:	d101      	bne.n	800635c <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8006358:	2302      	movs	r3, #2
 800635a:	e05f      	b.n	800641c <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8006362:	2b01      	cmp	r3, #1
 8006364:	d101      	bne.n	800636a <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8006366:	2302      	movs	r3, #2
 8006368:	e058      	b.n	800641c <HAL_HRTIM_WaveformTimerConfig+0xdc>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2202      	movs	r2, #2
 8006376:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	2b05      	cmp	r3, #5
 800637e:	d104      	bne.n	800638a <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8006380:	6879      	ldr	r1, [r7, #4]
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f000 f8ee 	bl	8006564 <HRTIM_MasterWaveform_Config>
 8006388:	e004      	b.n	8006394 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	68b9      	ldr	r1, [r7, #8]
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f000 f94e 	bl	8006630 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6819      	ldr	r1, [r3, #0]
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	4613      	mov	r3, r2
 800639e:	00db      	lsls	r3, r3, #3
 80063a0:	1a9b      	subs	r3, r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	4403      	add	r3, r0
 80063a6:	3320      	adds	r3, #32
 80063a8:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6859      	ldr	r1, [r3, #4]
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	4613      	mov	r3, r2
 80063b4:	00db      	lsls	r3, r3, #3
 80063b6:	1a9b      	subs	r3, r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4403      	add	r3, r0
 80063bc:	3324      	adds	r3, #36	; 0x24
 80063be:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6899      	ldr	r1, [r3, #8]
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	4613      	mov	r3, r2
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	1a9b      	subs	r3, r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4403      	add	r3, r0
 80063d2:	3328      	adds	r3, #40	; 0x28
 80063d4:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	68d9      	ldr	r1, [r3, #12]
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	4613      	mov	r3, r2
 80063e0:	00db      	lsls	r3, r3, #3
 80063e2:	1a9b      	subs	r3, r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	4403      	add	r3, r0
 80063e8:	332c      	adds	r3, #44	; 0x2c
 80063ea:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6919      	ldr	r1, [r3, #16]
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	68ba      	ldr	r2, [r7, #8]
 80063f4:	4613      	mov	r3, r2
 80063f6:	00db      	lsls	r3, r3, #3
 80063f8:	1a9b      	subs	r3, r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4403      	add	r3, r0
 80063fe:	3330      	adds	r3, #48	; 0x30
 8006400:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8006402:	68b9      	ldr	r1, [r7, #8]
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f000 fb09 	bl	8006a1c <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	607a      	str	r2, [r7, #4]
 8006430:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b02      	cmp	r3, #2
 800643c:	d101      	bne.n	8006442 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 800643e:	2302      	movs	r3, #2
 8006440:	e01d      	b.n	800647e <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8006448:	2b01      	cmp	r3, #1
 800644a:	d101      	bne.n	8006450 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 800644c:	2302      	movs	r3, #2
 800644e:	e016      	b.n	800647e <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2202      	movs	r2, #2
 800645c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	68b9      	ldr	r1, [r7, #8]
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f000 fa22 	bl	80068b0 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                     HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8006486:	b480      	push	{r7}
 8006488:	b085      	sub	sp, #20
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f023 0307 	bic.w	r3, r3, #7
 800649e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f023 0318 	bic.w	r3, r3, #24
 80064b0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	6812      	ldr	r2, [r2, #0]
 80064cc:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	6852      	ldr	r2, [r2, #4]
 80064d6:	619a      	str	r2, [r3, #24]
}
 80064d8:	bf00      	nop
 80064da:	3714      	adds	r7, #20
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                         uint32_t TimerIdx ,
                                         HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b087      	sub	sp, #28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	3301      	adds	r3, #1
 80064f8:	01db      	lsls	r3, r3, #7
 80064fa:	4413      	add	r3, r2
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	f023 0307 	bic.w	r3, r3, #7
 8006506:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	4313      	orrs	r3, r2
 8006510:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f023 0318 	bic.w	r3, r3, #24
 8006518:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	4313      	orrs	r3, r2
 8006522:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	3301      	adds	r3, #1
 800652c:	01db      	lsls	r3, r3, #7
 800652e:	4413      	add	r3, r2
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6819      	ldr	r1, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	01db      	lsls	r3, r3, #7
 8006540:	440b      	add	r3, r1
 8006542:	3394      	adds	r3, #148	; 0x94
 8006544:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6819      	ldr	r1, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685a      	ldr	r2, [r3, #4]
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	01db      	lsls	r3, r3, #7
 8006552:	440b      	add	r3, r1
 8006554:	3398      	adds	r3, #152	; 0x98
 8006556:	601a      	str	r2, [r3, #0]
}
 8006558:	bf00      	nop
 800655a:	371c      	adds	r7, #28
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                         HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 800657e:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f023 0320 	bic.w	r3, r3, #32
 8006586:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	4313      	orrs	r3, r2
 8006590:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006598:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065aa:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	69db      	ldr	r3, [r3, #28]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80065bc:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload meachanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80065ce:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80065e0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80065f4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006606:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	4313      	orrs	r3, r2
 8006610:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8006624:	bf00      	nop
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8006630:	b480      	push	{r7}
 8006632:	b08b      	sub	sp, #44	; 0x2c
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	3301      	adds	r3, #1
 8006644:	01db      	lsls	r3, r3, #7
 8006646:	4413      	add	r3, r2
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	6811      	ldr	r1, [r2, #0]
 800664e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	3301      	adds	r3, #1
 8006656:	01db      	lsls	r3, r3, #7
 8006658:	440b      	add	r3, r1
 800665a:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	3301      	adds	r3, #1
 8006664:	01db      	lsls	r3, r3, #7
 8006666:	4413      	add	r3, r2
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	01db      	lsls	r3, r3, #7
 8006674:	4413      	add	r3, r2
 8006676:	33e8      	adds	r3, #232	; 0xe8
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	01db      	lsls	r3, r3, #7
 8006684:	4413      	add	r3, r2
 8006686:	33e4      	adds	r3, #228	; 0xe4
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8006694:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8006696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006698:	f023 0320 	bic.w	r3, r3, #32
 800669c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066a4:	4313      	orrs	r3, r2
 80066a6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 80066a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066ae:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066b6:	4313      	orrs	r3, r2
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066c0:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	69db      	ldr	r3, [r3, #28]
 80066c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066c8:	4313      	orrs	r3, r2
 80066ca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80066d2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a1b      	ldr	r3, [r3, #32]
 80066d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066da:	4313      	orrs	r3, r2
 80066dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload meachanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 80066de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e0:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80066e4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ec:	4313      	orrs	r3, r2
 80066ee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 80066f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80066f6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066fe:	4313      	orrs	r3, r2
 8006700:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8006702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006704:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006708:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006712:	d103      	bne.n	800671c <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800671a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 800671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006722:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800672a:	4313      	orrs	r3, r2
 800672c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 800672e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006730:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006734:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800673a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800673c:	4313      	orrs	r3, r2
 800673e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8006740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006742:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8006746:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800674c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800674e:	4313      	orrs	r3, r2
 8006750:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	f023 031f 	bic.w	r3, r3, #31
 8006758:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675e:	f003 031f 	and.w	r3, r3, #31
 8006762:	69ba      	ldr	r2, [r7, #24]
 8006764:	4313      	orrs	r3, r2
 8006766:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800676e:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006774:	69ba      	ldr	r2, [r7, #24]
 8006776:	4313      	orrs	r3, r2
 8006778:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800677e:	2b00      	cmp	r3, #0
 8006780:	d108      	bne.n	8006794 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006788:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678e:	6a3a      	ldr	r2, [r7, #32]
 8006790:	4313      	orrs	r3, r2
 8006792:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006798:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800679c:	d004      	beq.n	80067a8 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a2:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 80067a6:	d103      	bne.n	80067b0 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ac:	2b40      	cmp	r3, #64	; 0x40
 80067ae:	d108      	bne.n	80067c2 <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 80067b0:	6a3b      	ldr	r3, [r7, #32]
 80067b2:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 80067b6:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067bc:	6a3a      	ldr	r2, [r7, #32]
 80067be:	4313      	orrs	r3, r2
 80067c0:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c6:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	2b04      	cmp	r3, #4
 80067cc:	d843      	bhi.n	8006856 <HRTIM_TimingUnitWaveform_Config+0x226>
 80067ce:	a201      	add	r2, pc, #4	; (adr r2, 80067d4 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 80067d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d4:	080067e9 	.word	0x080067e9
 80067d8:	080067ff 	.word	0x080067ff
 80067dc:	08006815 	.word	0x08006815
 80067e0:	0800682b 	.word	0x0800682b
 80067e4:	08006841 	.word	0x08006841
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80067ee:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f4:	005b      	lsls	r3, r3, #1
 80067f6:	69fa      	ldr	r2, [r7, #28]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	61fb      	str	r3, [r7, #28]
      break;
 80067fc:	e02c      	b.n	8006858 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006804:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	69fa      	ldr	r2, [r7, #28]
 800680e:	4313      	orrs	r3, r2
 8006810:	61fb      	str	r3, [r7, #28]
      break;
 8006812:	e021      	b.n	8006858 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800681a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006820:	00db      	lsls	r3, r3, #3
 8006822:	69fa      	ldr	r2, [r7, #28]
 8006824:	4313      	orrs	r3, r2
 8006826:	61fb      	str	r3, [r7, #28]
      break;
 8006828:	e016      	b.n	8006858 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006830:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006836:	011b      	lsls	r3, r3, #4
 8006838:	69fa      	ldr	r2, [r7, #28]
 800683a:	4313      	orrs	r3, r2
 800683c:	61fb      	str	r3, [r7, #28]
      break;
 800683e:	e00b      	b.n	8006858 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006846:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684c:	015b      	lsls	r3, r3, #5
 800684e:	69fa      	ldr	r2, [r7, #28]
 8006850:	4313      	orrs	r3, r2
 8006852:	61fb      	str	r3, [r7, #28]
      break;
 8006854:	e000      	b.n	8006858 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8006856:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	3301      	adds	r3, #1
 8006860:	01db      	lsls	r3, r3, #7
 8006862:	4413      	add	r3, r2
 8006864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006866:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	01db      	lsls	r3, r3, #7
 8006870:	4413      	add	r3, r2
 8006872:	33e8      	adds	r3, #232	; 0xe8
 8006874:	69ba      	ldr	r2, [r7, #24]
 8006876:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	01db      	lsls	r3, r3, #7
 8006880:	4413      	add	r3, r2
 8006882:	33e4      	adds	r3, #228	; 0xe4
 8006884:	6a3a      	ldr	r2, [r7, #32]
 8006886:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	01db      	lsls	r3, r3, #7
 8006890:	4413      	add	r3, r2
 8006892:	33d4      	adds	r3, #212	; 0xd4
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	69fa      	ldr	r2, [r7, #28]
 800689e:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 80068a2:	bf00      	nop
 80068a4:	372c      	adds	r7, #44	; 0x2c
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop

080068b0 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b089      	sub	sp, #36	; 0x24
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
 80068bc:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 80068be:	2300      	movs	r3, #0
 80068c0:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	01db      	lsls	r3, r3, #7
 80068ca:	4413      	add	r3, r2
 80068cc:	33e4      	adds	r3, #228	; 0xe4
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	01db      	lsls	r3, r3, #7
 80068da:	4413      	add	r3, r2
 80068dc:	33b8      	adds	r3, #184	; 0xb8
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	617b      	str	r3, [r7, #20]

  switch (Output)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2b10      	cmp	r3, #16
 80068e6:	d01d      	beq.n	8006924 <HRTIM_OutputConfig+0x74>
 80068e8:	2b10      	cmp	r3, #16
 80068ea:	d80b      	bhi.n	8006904 <HRTIM_OutputConfig+0x54>
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d02c      	beq.n	800694a <HRTIM_OutputConfig+0x9a>
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d802      	bhi.n	80068fa <HRTIM_OutputConfig+0x4a>
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d015      	beq.n	8006924 <HRTIM_OutputConfig+0x74>
      shift = 16U;
      break;
    }

  default:
    break;
 80068f8:	e03c      	b.n	8006974 <HRTIM_OutputConfig+0xc4>
  switch (Output)
 80068fa:	2b04      	cmp	r3, #4
 80068fc:	d012      	beq.n	8006924 <HRTIM_OutputConfig+0x74>
 80068fe:	2b08      	cmp	r3, #8
 8006900:	d023      	beq.n	800694a <HRTIM_OutputConfig+0x9a>
    break;
 8006902:	e037      	b.n	8006974 <HRTIM_OutputConfig+0xc4>
  switch (Output)
 8006904:	2b80      	cmp	r3, #128	; 0x80
 8006906:	d020      	beq.n	800694a <HRTIM_OutputConfig+0x9a>
 8006908:	2b80      	cmp	r3, #128	; 0x80
 800690a:	d804      	bhi.n	8006916 <HRTIM_OutputConfig+0x66>
 800690c:	2b20      	cmp	r3, #32
 800690e:	d01c      	beq.n	800694a <HRTIM_OutputConfig+0x9a>
 8006910:	2b40      	cmp	r3, #64	; 0x40
 8006912:	d007      	beq.n	8006924 <HRTIM_OutputConfig+0x74>
    break;
 8006914:	e02e      	b.n	8006974 <HRTIM_OutputConfig+0xc4>
  switch (Output)
 8006916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800691a:	d003      	beq.n	8006924 <HRTIM_OutputConfig+0x74>
 800691c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006920:	d013      	beq.n	800694a <HRTIM_OutputConfig+0x9a>
    break;
 8006922:	e027      	b.n	8006974 <HRTIM_OutputConfig+0xc4>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6819      	ldr	r1, [r3, #0]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	01db      	lsls	r3, r3, #7
 8006930:	440b      	add	r3, r1
 8006932:	33bc      	adds	r3, #188	; 0xbc
 8006934:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6819      	ldr	r1, [r3, #0]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	689a      	ldr	r2, [r3, #8]
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	01db      	lsls	r3, r3, #7
 8006942:	440b      	add	r3, r1
 8006944:	33c0      	adds	r3, #192	; 0xc0
 8006946:	601a      	str	r2, [r3, #0]
      break;
 8006948:	e014      	b.n	8006974 <HRTIM_OutputConfig+0xc4>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6819      	ldr	r1, [r3, #0]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	01db      	lsls	r3, r3, #7
 8006956:	440b      	add	r3, r1
 8006958:	33c4      	adds	r3, #196	; 0xc4
 800695a:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6819      	ldr	r1, [r3, #0]
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	01db      	lsls	r3, r3, #7
 8006968:	440b      	add	r3, r1
 800696a:	33c8      	adds	r3, #200	; 0xc8
 800696c:	601a      	str	r2, [r3, #0]
      shift = 16U;
 800696e:	2310      	movs	r3, #16
 8006970:	61bb      	str	r3, [r7, #24]
      break;
 8006972:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8006974:	22fe      	movs	r2, #254	; 0xfe
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 800697c:	43db      	mvns	r3, r3
 800697e:	69fa      	ldr	r2, [r7, #28]
 8006980:	4013      	ands	r3, r2
 8006982:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	fa02 f303 	lsl.w	r3, r2, r3
 800698e:	69fa      	ldr	r2, [r7, #28]
 8006990:	4313      	orrs	r3, r2
 8006992:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	68da      	ldr	r2, [r3, #12]
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	fa02 f303 	lsl.w	r3, r2, r3
 800699e:	69fa      	ldr	r2, [r7, #28]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	691a      	ldr	r2, [r3, #16]
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	fa02 f303 	lsl.w	r3, r2, r3
 80069ae:	69fa      	ldr	r2, [r7, #28]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	695a      	ldr	r2, [r3, #20]
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	fa02 f303 	lsl.w	r3, r2, r3
 80069be:	69fa      	ldr	r2, [r7, #28]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	699a      	ldr	r2, [r3, #24]
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	fa02 f303 	lsl.w	r3, r2, r3
 80069ce:	69fa      	ldr	r2, [r7, #28]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	2b08      	cmp	r3, #8
 80069da:	d111      	bne.n	8006a00 <HRTIM_OutputConfig+0x150>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10c      	bne.n	8006a00 <HRTIM_OutputConfig+0x150>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d107      	bne.n	8006a00 <HRTIM_OutputConfig+0x150>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	69da      	ldr	r2, [r3, #28]
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	fa02 f303 	lsl.w	r3, r2, r3
 80069fa:	69fa      	ldr	r2, [r7, #28]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	01db      	lsls	r3, r3, #7
 8006a08:	4413      	add	r3, r2
 8006a0a:	33e4      	adds	r3, #228	; 0xe4
 8006a0c:	69fa      	ldr	r2, [r7, #28]
 8006a0e:	601a      	str	r2, [r3, #0]
}
 8006a10:	bf00      	nop
 8006a12:	3724      	adds	r7, #36	; 0x24
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	2b05      	cmp	r3, #5
 8006a2a:	d851      	bhi.n	8006ad0 <HRTIM_ForceRegistersUpdate+0xb4>
 8006a2c:	a201      	add	r2, pc, #4	; (adr r2, 8006a34 <HRTIM_ForceRegistersUpdate+0x18>)
 8006a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a32:	bf00      	nop
 8006a34:	08006a63 	.word	0x08006a63
 8006a38:	08006a79 	.word	0x08006a79
 8006a3c:	08006a8f 	.word	0x08006a8f
 8006a40:	08006aa5 	.word	0x08006aa5
 8006a44:	08006abb 	.word	0x08006abb
 8006a48:	08006a4d 	.word	0x08006a4d
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f042 0201 	orr.w	r2, r2, #1
 8006a5c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006a60:	e037      	b.n	8006ad2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0202 	orr.w	r2, r2, #2
 8006a72:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006a76:	e02c      	b.n	8006ad2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f042 0204 	orr.w	r2, r2, #4
 8006a88:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006a8c:	e021      	b.n	8006ad2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f042 0208 	orr.w	r2, r2, #8
 8006a9e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006aa2:	e016      	b.n	8006ad2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f042 0210 	orr.w	r2, r2, #16
 8006ab4:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006ab8:	e00b      	b.n	8006ad2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f042 0220 	orr.w	r2, r2, #32
 8006aca:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006ace:	e000      	b.n	8006ad2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8006ad0:	bf00      	nop
  }
}
 8006ad2:	bf00      	nop
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop

08006ae0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006ae8:	4a08      	ldr	r2, [pc, #32]	; (8006b0c <HAL_HSEM_FastTake+0x2c>)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	3320      	adds	r3, #32
 8006aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006af2:	4a07      	ldr	r2, [pc, #28]	; (8006b10 <HAL_HSEM_FastTake+0x30>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d101      	bne.n	8006afc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006af8:	2300      	movs	r3, #0
 8006afa:	e000      	b.n	8006afe <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	58026400 	.word	0x58026400
 8006b10:	80000300 	.word	0x80000300

08006b14 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006b1e:	4906      	ldr	r1, [pc, #24]	; (8006b38 <HAL_HSEM_Release+0x24>)
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr
 8006b38:	58026400 	.word	0x58026400

08006b3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e07f      	b.n	8006c4e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d106      	bne.n	8006b68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7fb fe4a 	bl	80027fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2224      	movs	r2, #36	; 0x24
 8006b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f022 0201 	bic.w	r2, r2, #1
 8006b7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006b8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	689a      	ldr	r2, [r3, #8]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d107      	bne.n	8006bb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	689a      	ldr	r2, [r3, #8]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bb2:	609a      	str	r2, [r3, #8]
 8006bb4:	e006      	b.n	8006bc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	689a      	ldr	r2, [r3, #8]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006bc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d104      	bne.n	8006bd6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bd4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6859      	ldr	r1, [r3, #4]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	4b1d      	ldr	r3, [pc, #116]	; (8006c58 <HAL_I2C_Init+0x11c>)
 8006be2:	430b      	orrs	r3, r1
 8006be4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68da      	ldr	r2, [r3, #12]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006bf4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	691a      	ldr	r2, [r3, #16]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	ea42 0103 	orr.w	r1, r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	021a      	lsls	r2, r3, #8
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	69d9      	ldr	r1, [r3, #28]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a1a      	ldr	r2, [r3, #32]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f042 0201 	orr.w	r2, r2, #1
 8006c2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2220      	movs	r2, #32
 8006c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	02008000 	.word	0x02008000

08006c5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b20      	cmp	r3, #32
 8006c70:	d138      	bne.n	8006ce4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d101      	bne.n	8006c80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	e032      	b.n	8006ce6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2224      	movs	r2, #36	; 0x24
 8006c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f022 0201 	bic.w	r2, r2, #1
 8006c9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006cae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6819      	ldr	r1, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	683a      	ldr	r2, [r7, #0]
 8006cbc:	430a      	orrs	r2, r1
 8006cbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f042 0201 	orr.w	r2, r2, #1
 8006cce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2220      	movs	r2, #32
 8006cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	e000      	b.n	8006ce6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006ce4:	2302      	movs	r3, #2
  }
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b085      	sub	sp, #20
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
 8006cfa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	2b20      	cmp	r3, #32
 8006d06:	d139      	bne.n	8006d7c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d101      	bne.n	8006d16 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d12:	2302      	movs	r3, #2
 8006d14:	e033      	b.n	8006d7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2224      	movs	r2, #36	; 0x24
 8006d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f022 0201 	bic.w	r2, r2, #1
 8006d34:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006d44:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	021b      	lsls	r3, r3, #8
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f042 0201 	orr.w	r2, r2, #1
 8006d66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2220      	movs	r2, #32
 8006d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	e000      	b.n	8006d7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006d7c:	2302      	movs	r3, #2
  }
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3714      	adds	r7, #20
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
	...

08006d8c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e08c      	b.n	8006eb8 <HAL_LPTIM_Init+0x12c>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d106      	bne.n	8006db8 <HAL_LPTIM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f7fb fdd8 	bl	8002968 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2202      	movs	r2, #2
 8006dbc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	60fb      	str	r3, [r7, #12]

  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d103      	bne.n	8006dd8 <HAL_LPTIM_Init+0x4c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL));
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f023 0306 	bic.w	r3, r3, #6
 8006dd6:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	695b      	ldr	r3, [r3, #20]
 8006ddc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d003      	beq.n	8006dec <HAL_LPTIM_Init+0x60>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRIGSEL));
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006dea:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d103      	bne.n	8006dfc <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_CKFLT));
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f023 03d8 	bic.w	r3, r3, #216	; 0xd8
 8006dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	4b30      	ldr	r3, [pc, #192]	; (8006ec0 <HAL_LPTIM_Init+0x134>)
 8006e00:	4013      	ands	r3, r2
 8006e02:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8006e0c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8006e12:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8006e18:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8006e1e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d107      	bne.n	8006e3e <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8006e36:	4313      	orrs	r3, r2
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the active edge or edges used by the counter only if LPTIM is
   * clocked by an external clock source
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d104      	bne.n	8006e50 <HAL_LPTIM_Init+0xc4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	60fb      	str	r3, [r7, #12]
  }

  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d007      	beq.n	8006e6c <HAL_LPTIM_Init+0xe0>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 8006e64:	4313      	orrs	r3, r2
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a12      	ldr	r2, [pc, #72]	; (8006ec4 <HAL_LPTIM_Init+0x138>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d004      	beq.n	8006e88 <HAL_LPTIM_Init+0xfc>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a11      	ldr	r2, [pc, #68]	; (8006ec8 <HAL_LPTIM_Init+0x13c>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d108      	bne.n	8006e9a <HAL_LPTIM_Init+0x10e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	430a      	orrs	r2, r1
 8006e96:	625a      	str	r2, [r3, #36]	; 0x24
 8006e98:	e009      	b.n	8006eae <HAL_LPTIM_Init+0x122>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a0b      	ldr	r2, [pc, #44]	; (8006ecc <HAL_LPTIM_Init+0x140>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d104      	bne.n	8006eae <HAL_LPTIM_Init+0x122>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006eac:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	ff19f1f8 	.word	0xff19f1f8
 8006ec4:	40002400 	.word	0x40002400
 8006ec8:	58002400 	.word	0x58002400
 8006ecc:	58002800 	.word	0x58002800

08006ed0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e0bf      	b.n	8007062 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d106      	bne.n	8006efc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f7fb fd80 	bl	80029fc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2202      	movs	r2, #2
 8006f00:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	699a      	ldr	r2, [r3, #24]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006f12:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6999      	ldr	r1, [r3, #24]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	685a      	ldr	r2, [r3, #4]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006f28:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	430a      	orrs	r2, r1
 8006f36:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	6899      	ldr	r1, [r3, #8]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	4b4a      	ldr	r3, [pc, #296]	; (800706c <HAL_LTDC_Init+0x19c>)
 8006f44:	400b      	ands	r3, r1
 8006f46:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	695b      	ldr	r3, [r3, #20]
 8006f4c:	041b      	lsls	r3, r3, #16
 8006f4e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	6899      	ldr	r1, [r3, #8]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	699a      	ldr	r2, [r3, #24]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	431a      	orrs	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	430a      	orrs	r2, r1
 8006f64:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68d9      	ldr	r1, [r3, #12]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	4b3e      	ldr	r3, [pc, #248]	; (800706c <HAL_LTDC_Init+0x19c>)
 8006f72:	400b      	ands	r3, r1
 8006f74:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	041b      	lsls	r3, r3, #16
 8006f7c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68d9      	ldr	r1, [r3, #12]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a1a      	ldr	r2, [r3, #32]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	431a      	orrs	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	430a      	orrs	r2, r1
 8006f92:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6919      	ldr	r1, [r3, #16]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	4b33      	ldr	r3, [pc, #204]	; (800706c <HAL_LTDC_Init+0x19c>)
 8006fa0:	400b      	ands	r3, r1
 8006fa2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa8:	041b      	lsls	r3, r3, #16
 8006faa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	6919      	ldr	r1, [r3, #16]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	431a      	orrs	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	430a      	orrs	r2, r1
 8006fc0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	6959      	ldr	r1, [r3, #20]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	4b27      	ldr	r3, [pc, #156]	; (800706c <HAL_LTDC_Init+0x19c>)
 8006fce:	400b      	ands	r3, r1
 8006fd0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd6:	041b      	lsls	r3, r3, #16
 8006fd8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	6959      	ldr	r1, [r3, #20]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	431a      	orrs	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	430a      	orrs	r2, r1
 8006fee:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ff6:	021b      	lsls	r3, r3, #8
 8006ff8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007000:	041b      	lsls	r3, r3, #16
 8007002:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007012:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	4313      	orrs	r3, r2
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007026:	431a      	orrs	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	430a      	orrs	r2, r1
 800702e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f042 0206 	orr.w	r2, r2, #6
 800703e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	699a      	ldr	r2, [r3, #24]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f042 0201 	orr.w	r2, r2, #1
 800704e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	f000f800 	.word	0xf000f800

08007070 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007070:	b5b0      	push	{r4, r5, r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007082:	2b01      	cmp	r3, #1
 8007084:	d101      	bne.n	800708a <HAL_LTDC_ConfigLayer+0x1a>
 8007086:	2302      	movs	r3, #2
 8007088:	e02c      	b.n	80070e4 <HAL_LTDC_ConfigLayer+0x74>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2202      	movs	r2, #2
 8007096:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2134      	movs	r1, #52	; 0x34
 80070a0:	fb01 f303 	mul.w	r3, r1, r3
 80070a4:	4413      	add	r3, r2
 80070a6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	4614      	mov	r4, r2
 80070ae:	461d      	mov	r5, r3
 80070b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070bc:	682b      	ldr	r3, [r5, #0]
 80070be:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	68b9      	ldr	r1, [r7, #8]
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f000 f811 	bl	80070ec <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2201      	movs	r2, #1
 80070d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bdb0      	pop	{r4, r5, r7, pc}

080070ec <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b089      	sub	sp, #36	; 0x24
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	685a      	ldr	r2, [r3, #4]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	0c1b      	lsrs	r3, r3, #16
 8007104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007108:	4413      	add	r3, r2
 800710a:	041b      	lsls	r3, r3, #16
 800710c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	461a      	mov	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	01db      	lsls	r3, r3, #7
 8007118:	4413      	add	r3, r2
 800711a:	3384      	adds	r3, #132	; 0x84
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	6812      	ldr	r2, [r2, #0]
 8007122:	4611      	mov	r1, r2
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	01d2      	lsls	r2, r2, #7
 8007128:	440a      	add	r2, r1
 800712a:	3284      	adds	r2, #132	; 0x84
 800712c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007130:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	0c1b      	lsrs	r3, r3, #16
 800713e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007142:	4413      	add	r3, r2
 8007144:	1c5a      	adds	r2, r3, #1
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4619      	mov	r1, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	01db      	lsls	r3, r3, #7
 8007150:	440b      	add	r3, r1
 8007152:	3384      	adds	r3, #132	; 0x84
 8007154:	4619      	mov	r1, r3
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	4313      	orrs	r3, r2
 800715a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	68da      	ldr	r2, [r3, #12]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800716a:	4413      	add	r3, r2
 800716c:	041b      	lsls	r3, r3, #16
 800716e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	461a      	mov	r2, r3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	01db      	lsls	r3, r3, #7
 800717a:	4413      	add	r3, r2
 800717c:	3384      	adds	r3, #132	; 0x84
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	6812      	ldr	r2, [r2, #0]
 8007184:	4611      	mov	r1, r2
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	01d2      	lsls	r2, r2, #7
 800718a:	440a      	add	r2, r1
 800718c:	3284      	adds	r2, #132	; 0x84
 800718e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007192:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	689a      	ldr	r2, [r3, #8]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071a2:	4413      	add	r3, r2
 80071a4:	1c5a      	adds	r2, r3, #1
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4619      	mov	r1, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	01db      	lsls	r3, r3, #7
 80071b0:	440b      	add	r3, r1
 80071b2:	3384      	adds	r3, #132	; 0x84
 80071b4:	4619      	mov	r1, r3
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	461a      	mov	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	01db      	lsls	r3, r3, #7
 80071c6:	4413      	add	r3, r2
 80071c8:	3384      	adds	r3, #132	; 0x84
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	6812      	ldr	r2, [r2, #0]
 80071d0:	4611      	mov	r1, r2
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	01d2      	lsls	r2, r2, #7
 80071d6:	440a      	add	r2, r1
 80071d8:	3284      	adds	r2, #132	; 0x84
 80071da:	f023 0307 	bic.w	r3, r3, #7
 80071de:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	461a      	mov	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	01db      	lsls	r3, r3, #7
 80071ea:	4413      	add	r3, r2
 80071ec:	3384      	adds	r3, #132	; 0x84
 80071ee:	461a      	mov	r2, r3
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80071fc:	021b      	lsls	r3, r3, #8
 80071fe:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007206:	041b      	lsls	r3, r3, #16
 8007208:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	061b      	lsls	r3, r3, #24
 8007210:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	461a      	mov	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	01db      	lsls	r3, r3, #7
 800721c:	4413      	add	r3, r2
 800721e:	3384      	adds	r3, #132	; 0x84
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	461a      	mov	r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	01db      	lsls	r3, r3, #7
 800722c:	4413      	add	r3, r2
 800722e:	3384      	adds	r3, #132	; 0x84
 8007230:	461a      	mov	r2, r3
 8007232:	2300      	movs	r3, #0
 8007234:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800723c:	461a      	mov	r2, r3
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	431a      	orrs	r2, r3
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	431a      	orrs	r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4619      	mov	r1, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	01db      	lsls	r3, r3, #7
 8007250:	440b      	add	r3, r1
 8007252:	3384      	adds	r3, #132	; 0x84
 8007254:	4619      	mov	r1, r3
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	4313      	orrs	r3, r2
 800725a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	461a      	mov	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	01db      	lsls	r3, r3, #7
 8007266:	4413      	add	r3, r2
 8007268:	3384      	adds	r3, #132	; 0x84
 800726a:	695b      	ldr	r3, [r3, #20]
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	6812      	ldr	r2, [r2, #0]
 8007270:	4611      	mov	r1, r2
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	01d2      	lsls	r2, r2, #7
 8007276:	440a      	add	r2, r1
 8007278:	3284      	adds	r2, #132	; 0x84
 800727a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800727e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	461a      	mov	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	01db      	lsls	r3, r3, #7
 800728a:	4413      	add	r3, r2
 800728c:	3384      	adds	r3, #132	; 0x84
 800728e:	461a      	mov	r2, r3
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	695b      	ldr	r3, [r3, #20]
 8007294:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	461a      	mov	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	01db      	lsls	r3, r3, #7
 80072a0:	4413      	add	r3, r2
 80072a2:	3384      	adds	r3, #132	; 0x84
 80072a4:	69da      	ldr	r2, [r3, #28]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4619      	mov	r1, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	01db      	lsls	r3, r3, #7
 80072b0:	440b      	add	r3, r1
 80072b2:	3384      	adds	r3, #132	; 0x84
 80072b4:	4619      	mov	r1, r3
 80072b6:	4b58      	ldr	r3, [pc, #352]	; (8007418 <LTDC_SetConfig+0x32c>)
 80072b8:	4013      	ands	r3, r2
 80072ba:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	69da      	ldr	r2, [r3, #28]
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	68f9      	ldr	r1, [r7, #12]
 80072c6:	6809      	ldr	r1, [r1, #0]
 80072c8:	4608      	mov	r0, r1
 80072ca:	6879      	ldr	r1, [r7, #4]
 80072cc:	01c9      	lsls	r1, r1, #7
 80072ce:	4401      	add	r1, r0
 80072d0:	3184      	adds	r1, #132	; 0x84
 80072d2:	4313      	orrs	r3, r2
 80072d4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	461a      	mov	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	01db      	lsls	r3, r3, #7
 80072e0:	4413      	add	r3, r2
 80072e2:	3384      	adds	r3, #132	; 0x84
 80072e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	461a      	mov	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	01db      	lsls	r3, r3, #7
 80072f0:	4413      	add	r3, r2
 80072f2:	3384      	adds	r3, #132	; 0x84
 80072f4:	461a      	mov	r2, r3
 80072f6:	2300      	movs	r3, #0
 80072f8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	461a      	mov	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	01db      	lsls	r3, r3, #7
 8007304:	4413      	add	r3, r2
 8007306:	3384      	adds	r3, #132	; 0x84
 8007308:	461a      	mov	r2, r3
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d102      	bne.n	800731e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007318:	2304      	movs	r3, #4
 800731a:	61fb      	str	r3, [r7, #28]
 800731c:	e01b      	b.n	8007356 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d102      	bne.n	800732c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007326:	2303      	movs	r3, #3
 8007328:	61fb      	str	r3, [r7, #28]
 800732a:	e014      	b.n	8007356 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	2b04      	cmp	r3, #4
 8007332:	d00b      	beq.n	800734c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007338:	2b02      	cmp	r3, #2
 800733a:	d007      	beq.n	800734c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007340:	2b03      	cmp	r3, #3
 8007342:	d003      	beq.n	800734c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007348:	2b07      	cmp	r3, #7
 800734a:	d102      	bne.n	8007352 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800734c:	2302      	movs	r3, #2
 800734e:	61fb      	str	r3, [r7, #28]
 8007350:	e001      	b.n	8007356 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007352:	2301      	movs	r3, #1
 8007354:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	461a      	mov	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	01db      	lsls	r3, r3, #7
 8007360:	4413      	add	r3, r2
 8007362:	3384      	adds	r3, #132	; 0x84
 8007364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	6812      	ldr	r2, [r2, #0]
 800736a:	4611      	mov	r1, r2
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	01d2      	lsls	r2, r2, #7
 8007370:	440a      	add	r2, r1
 8007372:	3284      	adds	r2, #132	; 0x84
 8007374:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007378:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737e:	69fa      	ldr	r2, [r7, #28]
 8007380:	fb02 f303 	mul.w	r3, r2, r3
 8007384:	041a      	lsls	r2, r3, #16
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	6859      	ldr	r1, [r3, #4]
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	1acb      	subs	r3, r1, r3
 8007390:	69f9      	ldr	r1, [r7, #28]
 8007392:	fb01 f303 	mul.w	r3, r1, r3
 8007396:	3307      	adds	r3, #7
 8007398:	68f9      	ldr	r1, [r7, #12]
 800739a:	6809      	ldr	r1, [r1, #0]
 800739c:	4608      	mov	r0, r1
 800739e:	6879      	ldr	r1, [r7, #4]
 80073a0:	01c9      	lsls	r1, r1, #7
 80073a2:	4401      	add	r1, r0
 80073a4:	3184      	adds	r1, #132	; 0x84
 80073a6:	4313      	orrs	r3, r2
 80073a8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	461a      	mov	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	01db      	lsls	r3, r3, #7
 80073b4:	4413      	add	r3, r2
 80073b6:	3384      	adds	r3, #132	; 0x84
 80073b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4619      	mov	r1, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	01db      	lsls	r3, r3, #7
 80073c4:	440b      	add	r3, r1
 80073c6:	3384      	adds	r3, #132	; 0x84
 80073c8:	4619      	mov	r1, r3
 80073ca:	4b14      	ldr	r3, [pc, #80]	; (800741c <LTDC_SetConfig+0x330>)
 80073cc:	4013      	ands	r3, r2
 80073ce:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	461a      	mov	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	01db      	lsls	r3, r3, #7
 80073da:	4413      	add	r3, r2
 80073dc:	3384      	adds	r3, #132	; 0x84
 80073de:	461a      	mov	r2, r3
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	461a      	mov	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	01db      	lsls	r3, r3, #7
 80073f0:	4413      	add	r3, r2
 80073f2:	3384      	adds	r3, #132	; 0x84
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	6812      	ldr	r2, [r2, #0]
 80073fa:	4611      	mov	r1, r2
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	01d2      	lsls	r2, r2, #7
 8007400:	440a      	add	r2, r1
 8007402:	3284      	adds	r2, #132	; 0x84
 8007404:	f043 0301 	orr.w	r3, r3, #1
 8007408:	6013      	str	r3, [r2, #0]
}
 800740a:	bf00      	nop
 800740c:	3724      	adds	r7, #36	; 0x24
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop
 8007418:	fffff8f8 	.word	0xfffff8f8
 800741c:	fffff800 	.word	0xfffff800

08007420 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007428:	4b29      	ldr	r3, [pc, #164]	; (80074d0 <HAL_PWREx_ConfigSupply+0xb0>)
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	f003 0307 	and.w	r3, r3, #7
 8007430:	2b06      	cmp	r3, #6
 8007432:	d00a      	beq.n	800744a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007434:	4b26      	ldr	r3, [pc, #152]	; (80074d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	429a      	cmp	r2, r3
 8007440:	d001      	beq.n	8007446 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e040      	b.n	80074c8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007446:	2300      	movs	r3, #0
 8007448:	e03e      	b.n	80074c8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800744a:	4b21      	ldr	r3, [pc, #132]	; (80074d0 <HAL_PWREx_ConfigSupply+0xb0>)
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8007452:	491f      	ldr	r1, [pc, #124]	; (80074d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4313      	orrs	r3, r2
 8007458:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800745a:	f7fc f9a5 	bl	80037a8 <HAL_GetTick>
 800745e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007460:	e009      	b.n	8007476 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007462:	f7fc f9a1 	bl	80037a8 <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007470:	d901      	bls.n	8007476 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e028      	b.n	80074c8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007476:	4b16      	ldr	r3, [pc, #88]	; (80074d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800747e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007482:	d1ee      	bne.n	8007462 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b1e      	cmp	r3, #30
 8007488:	d008      	beq.n	800749c <HAL_PWREx_ConfigSupply+0x7c>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2b2e      	cmp	r3, #46	; 0x2e
 800748e:	d005      	beq.n	800749c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b1d      	cmp	r3, #29
 8007494:	d002      	beq.n	800749c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2b2d      	cmp	r3, #45	; 0x2d
 800749a:	d114      	bne.n	80074c6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800749c:	f7fc f984 	bl	80037a8 <HAL_GetTick>
 80074a0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80074a2:	e009      	b.n	80074b8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80074a4:	f7fc f980 	bl	80037a8 <HAL_GetTick>
 80074a8:	4602      	mov	r2, r0
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074b2:	d901      	bls.n	80074b8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	e007      	b.n	80074c8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80074b8:	4b05      	ldr	r3, [pc, #20]	; (80074d0 <HAL_PWREx_ConfigSupply+0xb0>)
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074c4:	d1ee      	bne.n	80074a4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	58024800 	.word	0x58024800

080074d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b08c      	sub	sp, #48	; 0x30
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d101      	bne.n	80074e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e3ff      	b.n	8007ce6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0301 	and.w	r3, r3, #1
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f000 8087 	beq.w	8007602 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074f4:	4b99      	ldr	r3, [pc, #612]	; (800775c <HAL_RCC_OscConfig+0x288>)
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80074fe:	4b97      	ldr	r3, [pc, #604]	; (800775c <HAL_RCC_OscConfig+0x288>)
 8007500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007502:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007506:	2b10      	cmp	r3, #16
 8007508:	d007      	beq.n	800751a <HAL_RCC_OscConfig+0x46>
 800750a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800750c:	2b18      	cmp	r3, #24
 800750e:	d110      	bne.n	8007532 <HAL_RCC_OscConfig+0x5e>
 8007510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007512:	f003 0303 	and.w	r3, r3, #3
 8007516:	2b02      	cmp	r3, #2
 8007518:	d10b      	bne.n	8007532 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800751a:	4b90      	ldr	r3, [pc, #576]	; (800775c <HAL_RCC_OscConfig+0x288>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d06c      	beq.n	8007600 <HAL_RCC_OscConfig+0x12c>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d168      	bne.n	8007600 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e3d9      	b.n	8007ce6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800753a:	d106      	bne.n	800754a <HAL_RCC_OscConfig+0x76>
 800753c:	4b87      	ldr	r3, [pc, #540]	; (800775c <HAL_RCC_OscConfig+0x288>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a86      	ldr	r2, [pc, #536]	; (800775c <HAL_RCC_OscConfig+0x288>)
 8007542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007546:	6013      	str	r3, [r2, #0]
 8007548:	e02e      	b.n	80075a8 <HAL_RCC_OscConfig+0xd4>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10c      	bne.n	800756c <HAL_RCC_OscConfig+0x98>
 8007552:	4b82      	ldr	r3, [pc, #520]	; (800775c <HAL_RCC_OscConfig+0x288>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a81      	ldr	r2, [pc, #516]	; (800775c <HAL_RCC_OscConfig+0x288>)
 8007558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800755c:	6013      	str	r3, [r2, #0]
 800755e:	4b7f      	ldr	r3, [pc, #508]	; (800775c <HAL_RCC_OscConfig+0x288>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a7e      	ldr	r2, [pc, #504]	; (800775c <HAL_RCC_OscConfig+0x288>)
 8007564:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007568:	6013      	str	r3, [r2, #0]
 800756a:	e01d      	b.n	80075a8 <HAL_RCC_OscConfig+0xd4>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007574:	d10c      	bne.n	8007590 <HAL_RCC_OscConfig+0xbc>
 8007576:	4b79      	ldr	r3, [pc, #484]	; (800775c <HAL_RCC_OscConfig+0x288>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a78      	ldr	r2, [pc, #480]	; (800775c <HAL_RCC_OscConfig+0x288>)
 800757c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007580:	6013      	str	r3, [r2, #0]
 8007582:	4b76      	ldr	r3, [pc, #472]	; (800775c <HAL_RCC_OscConfig+0x288>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a75      	ldr	r2, [pc, #468]	; (800775c <HAL_RCC_OscConfig+0x288>)
 8007588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800758c:	6013      	str	r3, [r2, #0]
 800758e:	e00b      	b.n	80075a8 <HAL_RCC_OscConfig+0xd4>
 8007590:	4b72      	ldr	r3, [pc, #456]	; (800775c <HAL_RCC_OscConfig+0x288>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a71      	ldr	r2, [pc, #452]	; (800775c <HAL_RCC_OscConfig+0x288>)
 8007596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800759a:	6013      	str	r3, [r2, #0]
 800759c:	4b6f      	ldr	r3, [pc, #444]	; (800775c <HAL_RCC_OscConfig+0x288>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a6e      	ldr	r2, [pc, #440]	; (800775c <HAL_RCC_OscConfig+0x288>)
 80075a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d013      	beq.n	80075d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075b0:	f7fc f8fa 	bl	80037a8 <HAL_GetTick>
 80075b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80075b6:	e008      	b.n	80075ca <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075b8:	f7fc f8f6 	bl	80037a8 <HAL_GetTick>
 80075bc:	4602      	mov	r2, r0
 80075be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	2b64      	cmp	r3, #100	; 0x64
 80075c4:	d901      	bls.n	80075ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e38d      	b.n	8007ce6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80075ca:	4b64      	ldr	r3, [pc, #400]	; (800775c <HAL_RCC_OscConfig+0x288>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d0f0      	beq.n	80075b8 <HAL_RCC_OscConfig+0xe4>
 80075d6:	e014      	b.n	8007602 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075d8:	f7fc f8e6 	bl	80037a8 <HAL_GetTick>
 80075dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80075de:	e008      	b.n	80075f2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075e0:	f7fc f8e2 	bl	80037a8 <HAL_GetTick>
 80075e4:	4602      	mov	r2, r0
 80075e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	2b64      	cmp	r3, #100	; 0x64
 80075ec:	d901      	bls.n	80075f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e379      	b.n	8007ce6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80075f2:	4b5a      	ldr	r3, [pc, #360]	; (800775c <HAL_RCC_OscConfig+0x288>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1f0      	bne.n	80075e0 <HAL_RCC_OscConfig+0x10c>
 80075fe:	e000      	b.n	8007602 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 0302 	and.w	r3, r3, #2
 800760a:	2b00      	cmp	r3, #0
 800760c:	f000 80ae 	beq.w	800776c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007610:	4b52      	ldr	r3, [pc, #328]	; (800775c <HAL_RCC_OscConfig+0x288>)
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007618:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800761a:	4b50      	ldr	r3, [pc, #320]	; (800775c <HAL_RCC_OscConfig+0x288>)
 800761c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007620:	6a3b      	ldr	r3, [r7, #32]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d007      	beq.n	8007636 <HAL_RCC_OscConfig+0x162>
 8007626:	6a3b      	ldr	r3, [r7, #32]
 8007628:	2b18      	cmp	r3, #24
 800762a:	d13a      	bne.n	80076a2 <HAL_RCC_OscConfig+0x1ce>
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	f003 0303 	and.w	r3, r3, #3
 8007632:	2b00      	cmp	r3, #0
 8007634:	d135      	bne.n	80076a2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007636:	4b49      	ldr	r3, [pc, #292]	; (800775c <HAL_RCC_OscConfig+0x288>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 0304 	and.w	r3, r3, #4
 800763e:	2b00      	cmp	r3, #0
 8007640:	d005      	beq.n	800764e <HAL_RCC_OscConfig+0x17a>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d101      	bne.n	800764e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e34b      	b.n	8007ce6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800764e:	f7fc f8d9 	bl	8003804 <HAL_GetREVID>
 8007652:	4602      	mov	r2, r0
 8007654:	f241 0303 	movw	r3, #4099	; 0x1003
 8007658:	429a      	cmp	r2, r3
 800765a:	d817      	bhi.n	800768c <HAL_RCC_OscConfig+0x1b8>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	2b40      	cmp	r3, #64	; 0x40
 8007662:	d108      	bne.n	8007676 <HAL_RCC_OscConfig+0x1a2>
 8007664:	4b3d      	ldr	r3, [pc, #244]	; (800775c <HAL_RCC_OscConfig+0x288>)
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800766c:	4a3b      	ldr	r2, [pc, #236]	; (800775c <HAL_RCC_OscConfig+0x288>)
 800766e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007672:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007674:	e07a      	b.n	800776c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007676:	4b39      	ldr	r3, [pc, #228]	; (800775c <HAL_RCC_OscConfig+0x288>)
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	031b      	lsls	r3, r3, #12
 8007684:	4935      	ldr	r1, [pc, #212]	; (800775c <HAL_RCC_OscConfig+0x288>)
 8007686:	4313      	orrs	r3, r2
 8007688:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800768a:	e06f      	b.n	800776c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800768c:	4b33      	ldr	r3, [pc, #204]	; (800775c <HAL_RCC_OscConfig+0x288>)
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	061b      	lsls	r3, r3, #24
 800769a:	4930      	ldr	r1, [pc, #192]	; (800775c <HAL_RCC_OscConfig+0x288>)
 800769c:	4313      	orrs	r3, r2
 800769e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076a0:	e064      	b.n	800776c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d045      	beq.n	8007736 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80076aa:	4b2c      	ldr	r3, [pc, #176]	; (800775c <HAL_RCC_OscConfig+0x288>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f023 0219 	bic.w	r2, r3, #25
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	4929      	ldr	r1, [pc, #164]	; (800775c <HAL_RCC_OscConfig+0x288>)
 80076b8:	4313      	orrs	r3, r2
 80076ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076bc:	f7fc f874 	bl	80037a8 <HAL_GetTick>
 80076c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80076c2:	e008      	b.n	80076d6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076c4:	f7fc f870 	bl	80037a8 <HAL_GetTick>
 80076c8:	4602      	mov	r2, r0
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d901      	bls.n	80076d6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e307      	b.n	8007ce6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80076d6:	4b21      	ldr	r3, [pc, #132]	; (800775c <HAL_RCC_OscConfig+0x288>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 0304 	and.w	r3, r3, #4
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d0f0      	beq.n	80076c4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076e2:	f7fc f88f 	bl	8003804 <HAL_GetREVID>
 80076e6:	4602      	mov	r2, r0
 80076e8:	f241 0303 	movw	r3, #4099	; 0x1003
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d817      	bhi.n	8007720 <HAL_RCC_OscConfig+0x24c>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	2b40      	cmp	r3, #64	; 0x40
 80076f6:	d108      	bne.n	800770a <HAL_RCC_OscConfig+0x236>
 80076f8:	4b18      	ldr	r3, [pc, #96]	; (800775c <HAL_RCC_OscConfig+0x288>)
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007700:	4a16      	ldr	r2, [pc, #88]	; (800775c <HAL_RCC_OscConfig+0x288>)
 8007702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007706:	6053      	str	r3, [r2, #4]
 8007708:	e030      	b.n	800776c <HAL_RCC_OscConfig+0x298>
 800770a:	4b14      	ldr	r3, [pc, #80]	; (800775c <HAL_RCC_OscConfig+0x288>)
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	031b      	lsls	r3, r3, #12
 8007718:	4910      	ldr	r1, [pc, #64]	; (800775c <HAL_RCC_OscConfig+0x288>)
 800771a:	4313      	orrs	r3, r2
 800771c:	604b      	str	r3, [r1, #4]
 800771e:	e025      	b.n	800776c <HAL_RCC_OscConfig+0x298>
 8007720:	4b0e      	ldr	r3, [pc, #56]	; (800775c <HAL_RCC_OscConfig+0x288>)
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	061b      	lsls	r3, r3, #24
 800772e:	490b      	ldr	r1, [pc, #44]	; (800775c <HAL_RCC_OscConfig+0x288>)
 8007730:	4313      	orrs	r3, r2
 8007732:	604b      	str	r3, [r1, #4]
 8007734:	e01a      	b.n	800776c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007736:	4b09      	ldr	r3, [pc, #36]	; (800775c <HAL_RCC_OscConfig+0x288>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a08      	ldr	r2, [pc, #32]	; (800775c <HAL_RCC_OscConfig+0x288>)
 800773c:	f023 0301 	bic.w	r3, r3, #1
 8007740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007742:	f7fc f831 	bl	80037a8 <HAL_GetTick>
 8007746:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007748:	e00a      	b.n	8007760 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800774a:	f7fc f82d 	bl	80037a8 <HAL_GetTick>
 800774e:	4602      	mov	r2, r0
 8007750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	2b02      	cmp	r3, #2
 8007756:	d903      	bls.n	8007760 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8007758:	2303      	movs	r3, #3
 800775a:	e2c4      	b.n	8007ce6 <HAL_RCC_OscConfig+0x812>
 800775c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007760:	4ba4      	ldr	r3, [pc, #656]	; (80079f4 <HAL_RCC_OscConfig+0x520>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 0304 	and.w	r3, r3, #4
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1ee      	bne.n	800774a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 0310 	and.w	r3, r3, #16
 8007774:	2b00      	cmp	r3, #0
 8007776:	f000 80a9 	beq.w	80078cc <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800777a:	4b9e      	ldr	r3, [pc, #632]	; (80079f4 <HAL_RCC_OscConfig+0x520>)
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007782:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007784:	4b9b      	ldr	r3, [pc, #620]	; (80079f4 <HAL_RCC_OscConfig+0x520>)
 8007786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007788:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	2b08      	cmp	r3, #8
 800778e:	d007      	beq.n	80077a0 <HAL_RCC_OscConfig+0x2cc>
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	2b18      	cmp	r3, #24
 8007794:	d13a      	bne.n	800780c <HAL_RCC_OscConfig+0x338>
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	f003 0303 	and.w	r3, r3, #3
 800779c:	2b01      	cmp	r3, #1
 800779e:	d135      	bne.n	800780c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80077a0:	4b94      	ldr	r3, [pc, #592]	; (80079f4 <HAL_RCC_OscConfig+0x520>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d005      	beq.n	80077b8 <HAL_RCC_OscConfig+0x2e4>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	69db      	ldr	r3, [r3, #28]
 80077b0:	2b80      	cmp	r3, #128	; 0x80
 80077b2:	d001      	beq.n	80077b8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e296      	b.n	8007ce6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80077b8:	f7fc f824 	bl	8003804 <HAL_GetREVID>
 80077bc:	4602      	mov	r2, r0
 80077be:	f241 0303 	movw	r3, #4099	; 0x1003
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d817      	bhi.n	80077f6 <HAL_RCC_OscConfig+0x322>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a1b      	ldr	r3, [r3, #32]
 80077ca:	2b20      	cmp	r3, #32
 80077cc:	d108      	bne.n	80077e0 <HAL_RCC_OscConfig+0x30c>
 80077ce:	4b89      	ldr	r3, [pc, #548]	; (80079f4 <HAL_RCC_OscConfig+0x520>)
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80077d6:	4a87      	ldr	r2, [pc, #540]	; (80079f4 <HAL_RCC_OscConfig+0x520>)
 80077d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077dc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80077de:	e075      	b.n	80078cc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80077e0:	4b84      	ldr	r3, [pc, #528]	; (80079f4 <HAL_RCC_OscConfig+0x520>)
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a1b      	ldr	r3, [r3, #32]
 80077ec:	069b      	lsls	r3, r3, #26
 80077ee:	4981      	ldr	r1, [pc, #516]	; (80079f4 <HAL_RCC_OscConfig+0x520>)
 80077f0:	4313      	orrs	r3, r2
 80077f2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80077f4:	e06a      	b.n	80078cc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80077f6:	4b7f      	ldr	r3, [pc, #508]	; (80079f4 <HAL_RCC_OscConfig+0x520>)
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a1b      	ldr	r3, [r3, #32]
 8007802:	061b      	lsls	r3, r3, #24
 8007804:	497b      	ldr	r1, [pc, #492]	; (80079f4 <HAL_RCC_OscConfig+0x520>)
 8007806:	4313      	orrs	r3, r2
 8007808:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800780a:	e05f      	b.n	80078cc <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	69db      	ldr	r3, [r3, #28]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d042      	beq.n	800789a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007814:	4b77      	ldr	r3, [pc, #476]	; (80079f4 <HAL_RCC_OscConfig+0x520>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a76      	ldr	r2, [pc, #472]	; (80079f4 <HAL_RCC_OscConfig+0x520>)
 800781a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800781e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007820:	f7fb ffc2 	bl	80037a8 <HAL_GetTick>
 8007824:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007826:	e008      	b.n	800783a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007828:	f7fb ffbe 	bl	80037a8 <HAL_GetTick>
 800782c:	4602      	mov	r2, r0
 800782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	2b02      	cmp	r3, #2
 8007834:	d901      	bls.n	800783a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e255      	b.n	8007ce6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800783a:	4b6e      	ldr	r3, [pc, #440]	; (80079f4 <HAL_RCC_OscConfig+0x520>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007842:	2b00      	cmp	r3, #0
 8007844:	d0f0      	beq.n	8007828 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007846:	f7fb ffdd 	bl	8003804 <HAL_GetREVID>
 800784a:	4602      	mov	r2, r0
 800784c:	f241 0303 	movw	r3, #4099	; 0x1003
 8007850:	429a      	cmp	r2, r3
 8007852:	d817      	bhi.n	8007884 <HAL_RCC_OscConfig+0x3b0>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a1b      	ldr	r3, [r3, #32]
 8007858:	2b20      	cmp	r3, #32
 800785a:	d108      	bne.n	800786e <HAL_RCC_OscConfig+0x39a>
 800785c:	4b65      	ldr	r3, [pc, #404]	; (80079f4 <HAL_RCC_OscConfig+0x520>)
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007864:	4a63      	ldr	r2, [pc, #396]	; (80079f4 <HAL_RCC_OscConfig+0x520>)
 8007866:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800786a:	6053      	str	r3, [r2, #4]
 800786c:	e02e      	b.n	80078cc <HAL_RCC_OscConfig+0x3f8>
 800786e:	4b61      	ldr	r3, [pc, #388]	; (80079f4 <HAL_RCC_OscConfig+0x520>)
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	069b      	lsls	r3, r3, #26
 800787c:	495d      	ldr	r1, [pc, #372]	; (80079f4 <HAL_RCC_OscConfig+0x520>)
 800787e:	4313      	orrs	r3, r2
 8007880:	604b      	str	r3, [r1, #4]
 8007882:	e023      	b.n	80078cc <HAL_RCC_OscConfig+0x3f8>
 8007884:	4b5b      	ldr	r3, [pc, #364]	; (80079f4 <HAL_RCC_OscConfig+0x520>)
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a1b      	ldr	r3, [r3, #32]
 8007890:	061b      	lsls	r3, r3, #24
 8007892:	4958      	ldr	r1, [pc, #352]	; (80079f4 <HAL_RCC_OscConfig+0x520>)
 8007894:	4313      	orrs	r3, r2
 8007896:	60cb      	str	r3, [r1, #12]
 8007898:	e018      	b.n	80078cc <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800789a:	4b56      	ldr	r3, [pc, #344]	; (80079f4 <HAL_RCC_OscConfig+0x520>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a55      	ldr	r2, [pc, #340]	; (80079f4 <HAL_RCC_OscConfig+0x520>)
 80078a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078a6:	f7fb ff7f 	bl	80037a8 <HAL_GetTick>
 80078aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80078ac:	e008      	b.n	80078c0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80078ae:	f7fb ff7b 	bl	80037a8 <HAL_GetTick>
 80078b2:	4602      	mov	r2, r0
 80078b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d901      	bls.n	80078c0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80078bc:	2303      	movs	r3, #3
 80078be:	e212      	b.n	8007ce6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80078c0:	4b4c      	ldr	r3, [pc, #304]	; (80079f4 <HAL_RCC_OscConfig+0x520>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d1f0      	bne.n	80078ae <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 0308 	and.w	r3, r3, #8
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d036      	beq.n	8007946 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	695b      	ldr	r3, [r3, #20]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d019      	beq.n	8007914 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078e0:	4b44      	ldr	r3, [pc, #272]	; (80079f4 <HAL_RCC_OscConfig+0x520>)
 80078e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078e4:	4a43      	ldr	r2, [pc, #268]	; (80079f4 <HAL_RCC_OscConfig+0x520>)
 80078e6:	f043 0301 	orr.w	r3, r3, #1
 80078ea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078ec:	f7fb ff5c 	bl	80037a8 <HAL_GetTick>
 80078f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80078f2:	e008      	b.n	8007906 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078f4:	f7fb ff58 	bl	80037a8 <HAL_GetTick>
 80078f8:	4602      	mov	r2, r0
 80078fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d901      	bls.n	8007906 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	e1ef      	b.n	8007ce6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007906:	4b3b      	ldr	r3, [pc, #236]	; (80079f4 <HAL_RCC_OscConfig+0x520>)
 8007908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800790a:	f003 0302 	and.w	r3, r3, #2
 800790e:	2b00      	cmp	r3, #0
 8007910:	d0f0      	beq.n	80078f4 <HAL_RCC_OscConfig+0x420>
 8007912:	e018      	b.n	8007946 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007914:	4b37      	ldr	r3, [pc, #220]	; (80079f4 <HAL_RCC_OscConfig+0x520>)
 8007916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007918:	4a36      	ldr	r2, [pc, #216]	; (80079f4 <HAL_RCC_OscConfig+0x520>)
 800791a:	f023 0301 	bic.w	r3, r3, #1
 800791e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007920:	f7fb ff42 	bl	80037a8 <HAL_GetTick>
 8007924:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007926:	e008      	b.n	800793a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007928:	f7fb ff3e 	bl	80037a8 <HAL_GetTick>
 800792c:	4602      	mov	r2, r0
 800792e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	2b02      	cmp	r3, #2
 8007934:	d901      	bls.n	800793a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8007936:	2303      	movs	r3, #3
 8007938:	e1d5      	b.n	8007ce6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800793a:	4b2e      	ldr	r3, [pc, #184]	; (80079f4 <HAL_RCC_OscConfig+0x520>)
 800793c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800793e:	f003 0302 	and.w	r3, r3, #2
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1f0      	bne.n	8007928 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 0320 	and.w	r3, r3, #32
 800794e:	2b00      	cmp	r3, #0
 8007950:	d036      	beq.n	80079c0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d019      	beq.n	800798e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800795a:	4b26      	ldr	r3, [pc, #152]	; (80079f4 <HAL_RCC_OscConfig+0x520>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a25      	ldr	r2, [pc, #148]	; (80079f4 <HAL_RCC_OscConfig+0x520>)
 8007960:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007964:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007966:	f7fb ff1f 	bl	80037a8 <HAL_GetTick>
 800796a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800796c:	e008      	b.n	8007980 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800796e:	f7fb ff1b 	bl	80037a8 <HAL_GetTick>
 8007972:	4602      	mov	r2, r0
 8007974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	2b02      	cmp	r3, #2
 800797a:	d901      	bls.n	8007980 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800797c:	2303      	movs	r3, #3
 800797e:	e1b2      	b.n	8007ce6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007980:	4b1c      	ldr	r3, [pc, #112]	; (80079f4 <HAL_RCC_OscConfig+0x520>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007988:	2b00      	cmp	r3, #0
 800798a:	d0f0      	beq.n	800796e <HAL_RCC_OscConfig+0x49a>
 800798c:	e018      	b.n	80079c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800798e:	4b19      	ldr	r3, [pc, #100]	; (80079f4 <HAL_RCC_OscConfig+0x520>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a18      	ldr	r2, [pc, #96]	; (80079f4 <HAL_RCC_OscConfig+0x520>)
 8007994:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007998:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800799a:	f7fb ff05 	bl	80037a8 <HAL_GetTick>
 800799e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80079a0:	e008      	b.n	80079b4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80079a2:	f7fb ff01 	bl	80037a8 <HAL_GetTick>
 80079a6:	4602      	mov	r2, r0
 80079a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d901      	bls.n	80079b4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80079b0:	2303      	movs	r3, #3
 80079b2:	e198      	b.n	8007ce6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80079b4:	4b0f      	ldr	r3, [pc, #60]	; (80079f4 <HAL_RCC_OscConfig+0x520>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d1f0      	bne.n	80079a2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 0304 	and.w	r3, r3, #4
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f000 8085 	beq.w	8007ad8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80079ce:	4b0a      	ldr	r3, [pc, #40]	; (80079f8 <HAL_RCC_OscConfig+0x524>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a09      	ldr	r2, [pc, #36]	; (80079f8 <HAL_RCC_OscConfig+0x524>)
 80079d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80079da:	f7fb fee5 	bl	80037a8 <HAL_GetTick>
 80079de:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079e0:	e00c      	b.n	80079fc <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80079e2:	f7fb fee1 	bl	80037a8 <HAL_GetTick>
 80079e6:	4602      	mov	r2, r0
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	2b64      	cmp	r3, #100	; 0x64
 80079ee:	d905      	bls.n	80079fc <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e178      	b.n	8007ce6 <HAL_RCC_OscConfig+0x812>
 80079f4:	58024400 	.word	0x58024400
 80079f8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079fc:	4b96      	ldr	r3, [pc, #600]	; (8007c58 <HAL_RCC_OscConfig+0x784>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d0ec      	beq.n	80079e2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d106      	bne.n	8007a1e <HAL_RCC_OscConfig+0x54a>
 8007a10:	4b92      	ldr	r3, [pc, #584]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a14:	4a91      	ldr	r2, [pc, #580]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007a16:	f043 0301 	orr.w	r3, r3, #1
 8007a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8007a1c:	e02d      	b.n	8007a7a <HAL_RCC_OscConfig+0x5a6>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d10c      	bne.n	8007a40 <HAL_RCC_OscConfig+0x56c>
 8007a26:	4b8d      	ldr	r3, [pc, #564]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a2a:	4a8c      	ldr	r2, [pc, #560]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007a2c:	f023 0301 	bic.w	r3, r3, #1
 8007a30:	6713      	str	r3, [r2, #112]	; 0x70
 8007a32:	4b8a      	ldr	r3, [pc, #552]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a36:	4a89      	ldr	r2, [pc, #548]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007a38:	f023 0304 	bic.w	r3, r3, #4
 8007a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8007a3e:	e01c      	b.n	8007a7a <HAL_RCC_OscConfig+0x5a6>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	2b05      	cmp	r3, #5
 8007a46:	d10c      	bne.n	8007a62 <HAL_RCC_OscConfig+0x58e>
 8007a48:	4b84      	ldr	r3, [pc, #528]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a4c:	4a83      	ldr	r2, [pc, #524]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007a4e:	f043 0304 	orr.w	r3, r3, #4
 8007a52:	6713      	str	r3, [r2, #112]	; 0x70
 8007a54:	4b81      	ldr	r3, [pc, #516]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a58:	4a80      	ldr	r2, [pc, #512]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007a5a:	f043 0301 	orr.w	r3, r3, #1
 8007a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8007a60:	e00b      	b.n	8007a7a <HAL_RCC_OscConfig+0x5a6>
 8007a62:	4b7e      	ldr	r3, [pc, #504]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a66:	4a7d      	ldr	r2, [pc, #500]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007a68:	f023 0301 	bic.w	r3, r3, #1
 8007a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8007a6e:	4b7b      	ldr	r3, [pc, #492]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a72:	4a7a      	ldr	r2, [pc, #488]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007a74:	f023 0304 	bic.w	r3, r3, #4
 8007a78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d015      	beq.n	8007aae <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a82:	f7fb fe91 	bl	80037a8 <HAL_GetTick>
 8007a86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a88:	e00a      	b.n	8007aa0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a8a:	f7fb fe8d 	bl	80037a8 <HAL_GetTick>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d901      	bls.n	8007aa0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e122      	b.n	8007ce6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007aa0:	4b6e      	ldr	r3, [pc, #440]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa4:	f003 0302 	and.w	r3, r3, #2
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d0ee      	beq.n	8007a8a <HAL_RCC_OscConfig+0x5b6>
 8007aac:	e014      	b.n	8007ad8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007aae:	f7fb fe7b 	bl	80037a8 <HAL_GetTick>
 8007ab2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007ab4:	e00a      	b.n	8007acc <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ab6:	f7fb fe77 	bl	80037a8 <HAL_GetTick>
 8007aba:	4602      	mov	r2, r0
 8007abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d901      	bls.n	8007acc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	e10c      	b.n	8007ce6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007acc:	4b63      	ldr	r3, [pc, #396]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad0:	f003 0302 	and.w	r3, r3, #2
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1ee      	bne.n	8007ab6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f000 8101 	beq.w	8007ce4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007ae2:	4b5e      	ldr	r3, [pc, #376]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007aea:	2b18      	cmp	r3, #24
 8007aec:	f000 80bc 	beq.w	8007c68 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	f040 8095 	bne.w	8007c24 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007afa:	4b58      	ldr	r3, [pc, #352]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a57      	ldr	r2, [pc, #348]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007b00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b06:	f7fb fe4f 	bl	80037a8 <HAL_GetTick>
 8007b0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b0c:	e008      	b.n	8007b20 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b0e:	f7fb fe4b 	bl	80037a8 <HAL_GetTick>
 8007b12:	4602      	mov	r2, r0
 8007b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b16:	1ad3      	subs	r3, r2, r3
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d901      	bls.n	8007b20 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	e0e2      	b.n	8007ce6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b20:	4b4e      	ldr	r3, [pc, #312]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1f0      	bne.n	8007b0e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b2c:	4b4b      	ldr	r3, [pc, #300]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007b2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b30:	4b4b      	ldr	r3, [pc, #300]	; (8007c60 <HAL_RCC_OscConfig+0x78c>)
 8007b32:	4013      	ands	r3, r2
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007b3c:	0112      	lsls	r2, r2, #4
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	4946      	ldr	r1, [pc, #280]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007b42:	4313      	orrs	r3, r2
 8007b44:	628b      	str	r3, [r1, #40]	; 0x28
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b54:	3b01      	subs	r3, #1
 8007b56:	025b      	lsls	r3, r3, #9
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	431a      	orrs	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b60:	3b01      	subs	r3, #1
 8007b62:	041b      	lsls	r3, r3, #16
 8007b64:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b68:	431a      	orrs	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	061b      	lsls	r3, r3, #24
 8007b72:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b76:	4939      	ldr	r1, [pc, #228]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007b7c:	4b37      	ldr	r3, [pc, #220]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b80:	4a36      	ldr	r2, [pc, #216]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007b82:	f023 0301 	bic.w	r3, r3, #1
 8007b86:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007b88:	4b34      	ldr	r3, [pc, #208]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b8c:	4b35      	ldr	r3, [pc, #212]	; (8007c64 <HAL_RCC_OscConfig+0x790>)
 8007b8e:	4013      	ands	r3, r2
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007b94:	00d2      	lsls	r2, r2, #3
 8007b96:	4931      	ldr	r1, [pc, #196]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007b9c:	4b2f      	ldr	r3, [pc, #188]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba0:	f023 020c 	bic.w	r2, r3, #12
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba8:	492c      	ldr	r1, [pc, #176]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007bae:	4b2b      	ldr	r3, [pc, #172]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb2:	f023 0202 	bic.w	r2, r3, #2
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bba:	4928      	ldr	r1, [pc, #160]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007bc0:	4b26      	ldr	r3, [pc, #152]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc4:	4a25      	ldr	r2, [pc, #148]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bcc:	4b23      	ldr	r3, [pc, #140]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd0:	4a22      	ldr	r2, [pc, #136]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007bd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007bd8:	4b20      	ldr	r3, [pc, #128]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bdc:	4a1f      	ldr	r2, [pc, #124]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007bde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007be2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007be4:	4b1d      	ldr	r3, [pc, #116]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be8:	4a1c      	ldr	r2, [pc, #112]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007bea:	f043 0301 	orr.w	r3, r3, #1
 8007bee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007bf0:	4b1a      	ldr	r3, [pc, #104]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a19      	ldr	r2, [pc, #100]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007bf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007bfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bfc:	f7fb fdd4 	bl	80037a8 <HAL_GetTick>
 8007c00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007c02:	e008      	b.n	8007c16 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c04:	f7fb fdd0 	bl	80037a8 <HAL_GetTick>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0c:	1ad3      	subs	r3, r2, r3
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	d901      	bls.n	8007c16 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	e067      	b.n	8007ce6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007c16:	4b11      	ldr	r3, [pc, #68]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d0f0      	beq.n	8007c04 <HAL_RCC_OscConfig+0x730>
 8007c22:	e05f      	b.n	8007ce4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c24:	4b0d      	ldr	r3, [pc, #52]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a0c      	ldr	r2, [pc, #48]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007c2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c30:	f7fb fdba 	bl	80037a8 <HAL_GetTick>
 8007c34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c36:	e008      	b.n	8007c4a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c38:	f7fb fdb6 	bl	80037a8 <HAL_GetTick>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d901      	bls.n	8007c4a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e04d      	b.n	8007ce6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c4a:	4b04      	ldr	r3, [pc, #16]	; (8007c5c <HAL_RCC_OscConfig+0x788>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1f0      	bne.n	8007c38 <HAL_RCC_OscConfig+0x764>
 8007c56:	e045      	b.n	8007ce4 <HAL_RCC_OscConfig+0x810>
 8007c58:	58024800 	.word	0x58024800
 8007c5c:	58024400 	.word	0x58024400
 8007c60:	fffffc0c 	.word	0xfffffc0c
 8007c64:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007c68:	4b21      	ldr	r3, [pc, #132]	; (8007cf0 <HAL_RCC_OscConfig+0x81c>)
 8007c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c6c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007c6e:	4b20      	ldr	r3, [pc, #128]	; (8007cf0 <HAL_RCC_OscConfig+0x81c>)
 8007c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c72:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d031      	beq.n	8007ce0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	f003 0203 	and.w	r2, r3, #3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d12a      	bne.n	8007ce0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	091b      	lsrs	r3, r3, #4
 8007c8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d122      	bne.n	8007ce0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d11a      	bne.n	8007ce0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	0a5b      	lsrs	r3, r3, #9
 8007cae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d111      	bne.n	8007ce0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	0c1b      	lsrs	r3, r3, #16
 8007cc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d108      	bne.n	8007ce0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	0e1b      	lsrs	r3, r3, #24
 8007cd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cda:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d001      	beq.n	8007ce4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e000      	b.n	8007ce6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3730      	adds	r7, #48	; 0x30
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	58024400 	.word	0x58024400

08007cf4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b086      	sub	sp, #24
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d101      	bne.n	8007d08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	e19c      	b.n	8008042 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007d08:	4b8a      	ldr	r3, [pc, #552]	; (8007f34 <HAL_RCC_ClockConfig+0x240>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 030f 	and.w	r3, r3, #15
 8007d10:	683a      	ldr	r2, [r7, #0]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d910      	bls.n	8007d38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d16:	4b87      	ldr	r3, [pc, #540]	; (8007f34 <HAL_RCC_ClockConfig+0x240>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f023 020f 	bic.w	r2, r3, #15
 8007d1e:	4985      	ldr	r1, [pc, #532]	; (8007f34 <HAL_RCC_ClockConfig+0x240>)
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d26:	4b83      	ldr	r3, [pc, #524]	; (8007f34 <HAL_RCC_ClockConfig+0x240>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f003 030f 	and.w	r3, r3, #15
 8007d2e:	683a      	ldr	r2, [r7, #0]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d001      	beq.n	8007d38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e184      	b.n	8008042 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 0304 	and.w	r3, r3, #4
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d010      	beq.n	8007d66 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	691a      	ldr	r2, [r3, #16]
 8007d48:	4b7b      	ldr	r3, [pc, #492]	; (8007f38 <HAL_RCC_ClockConfig+0x244>)
 8007d4a:	699b      	ldr	r3, [r3, #24]
 8007d4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d908      	bls.n	8007d66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007d54:	4b78      	ldr	r3, [pc, #480]	; (8007f38 <HAL_RCC_ClockConfig+0x244>)
 8007d56:	699b      	ldr	r3, [r3, #24]
 8007d58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	4975      	ldr	r1, [pc, #468]	; (8007f38 <HAL_RCC_ClockConfig+0x244>)
 8007d62:	4313      	orrs	r3, r2
 8007d64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 0308 	and.w	r3, r3, #8
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d010      	beq.n	8007d94 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	695a      	ldr	r2, [r3, #20]
 8007d76:	4b70      	ldr	r3, [pc, #448]	; (8007f38 <HAL_RCC_ClockConfig+0x244>)
 8007d78:	69db      	ldr	r3, [r3, #28]
 8007d7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d908      	bls.n	8007d94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007d82:	4b6d      	ldr	r3, [pc, #436]	; (8007f38 <HAL_RCC_ClockConfig+0x244>)
 8007d84:	69db      	ldr	r3, [r3, #28]
 8007d86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	695b      	ldr	r3, [r3, #20]
 8007d8e:	496a      	ldr	r1, [pc, #424]	; (8007f38 <HAL_RCC_ClockConfig+0x244>)
 8007d90:	4313      	orrs	r3, r2
 8007d92:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 0310 	and.w	r3, r3, #16
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d010      	beq.n	8007dc2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	699a      	ldr	r2, [r3, #24]
 8007da4:	4b64      	ldr	r3, [pc, #400]	; (8007f38 <HAL_RCC_ClockConfig+0x244>)
 8007da6:	69db      	ldr	r3, [r3, #28]
 8007da8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d908      	bls.n	8007dc2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007db0:	4b61      	ldr	r3, [pc, #388]	; (8007f38 <HAL_RCC_ClockConfig+0x244>)
 8007db2:	69db      	ldr	r3, [r3, #28]
 8007db4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	699b      	ldr	r3, [r3, #24]
 8007dbc:	495e      	ldr	r1, [pc, #376]	; (8007f38 <HAL_RCC_ClockConfig+0x244>)
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 0320 	and.w	r3, r3, #32
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d010      	beq.n	8007df0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	69da      	ldr	r2, [r3, #28]
 8007dd2:	4b59      	ldr	r3, [pc, #356]	; (8007f38 <HAL_RCC_ClockConfig+0x244>)
 8007dd4:	6a1b      	ldr	r3, [r3, #32]
 8007dd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d908      	bls.n	8007df0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007dde:	4b56      	ldr	r3, [pc, #344]	; (8007f38 <HAL_RCC_ClockConfig+0x244>)
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	69db      	ldr	r3, [r3, #28]
 8007dea:	4953      	ldr	r1, [pc, #332]	; (8007f38 <HAL_RCC_ClockConfig+0x244>)
 8007dec:	4313      	orrs	r3, r2
 8007dee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 0302 	and.w	r3, r3, #2
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d010      	beq.n	8007e1e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	68da      	ldr	r2, [r3, #12]
 8007e00:	4b4d      	ldr	r3, [pc, #308]	; (8007f38 <HAL_RCC_ClockConfig+0x244>)
 8007e02:	699b      	ldr	r3, [r3, #24]
 8007e04:	f003 030f 	and.w	r3, r3, #15
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d908      	bls.n	8007e1e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e0c:	4b4a      	ldr	r3, [pc, #296]	; (8007f38 <HAL_RCC_ClockConfig+0x244>)
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	f023 020f 	bic.w	r2, r3, #15
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	4947      	ldr	r1, [pc, #284]	; (8007f38 <HAL_RCC_ClockConfig+0x244>)
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 0301 	and.w	r3, r3, #1
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d055      	beq.n	8007ed6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007e2a:	4b43      	ldr	r3, [pc, #268]	; (8007f38 <HAL_RCC_ClockConfig+0x244>)
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	4940      	ldr	r1, [pc, #256]	; (8007f38 <HAL_RCC_ClockConfig+0x244>)
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d107      	bne.n	8007e54 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e44:	4b3c      	ldr	r3, [pc, #240]	; (8007f38 <HAL_RCC_ClockConfig+0x244>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d121      	bne.n	8007e94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	e0f6      	b.n	8008042 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	2b03      	cmp	r3, #3
 8007e5a:	d107      	bne.n	8007e6c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007e5c:	4b36      	ldr	r3, [pc, #216]	; (8007f38 <HAL_RCC_ClockConfig+0x244>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d115      	bne.n	8007e94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e0ea      	b.n	8008042 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d107      	bne.n	8007e84 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007e74:	4b30      	ldr	r3, [pc, #192]	; (8007f38 <HAL_RCC_ClockConfig+0x244>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d109      	bne.n	8007e94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	e0de      	b.n	8008042 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e84:	4b2c      	ldr	r3, [pc, #176]	; (8007f38 <HAL_RCC_ClockConfig+0x244>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f003 0304 	and.w	r3, r3, #4
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d101      	bne.n	8007e94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e0d6      	b.n	8008042 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007e94:	4b28      	ldr	r3, [pc, #160]	; (8007f38 <HAL_RCC_ClockConfig+0x244>)
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	f023 0207 	bic.w	r2, r3, #7
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	4925      	ldr	r1, [pc, #148]	; (8007f38 <HAL_RCC_ClockConfig+0x244>)
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ea6:	f7fb fc7f 	bl	80037a8 <HAL_GetTick>
 8007eaa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007eac:	e00a      	b.n	8007ec4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007eae:	f7fb fc7b 	bl	80037a8 <HAL_GetTick>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	1ad3      	subs	r3, r2, r3
 8007eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d901      	bls.n	8007ec4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	e0be      	b.n	8008042 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ec4:	4b1c      	ldr	r3, [pc, #112]	; (8007f38 <HAL_RCC_ClockConfig+0x244>)
 8007ec6:	691b      	ldr	r3, [r3, #16]
 8007ec8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	00db      	lsls	r3, r3, #3
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d1eb      	bne.n	8007eae <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 0302 	and.w	r3, r3, #2
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d010      	beq.n	8007f04 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	68da      	ldr	r2, [r3, #12]
 8007ee6:	4b14      	ldr	r3, [pc, #80]	; (8007f38 <HAL_RCC_ClockConfig+0x244>)
 8007ee8:	699b      	ldr	r3, [r3, #24]
 8007eea:	f003 030f 	and.w	r3, r3, #15
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d208      	bcs.n	8007f04 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ef2:	4b11      	ldr	r3, [pc, #68]	; (8007f38 <HAL_RCC_ClockConfig+0x244>)
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	f023 020f 	bic.w	r2, r3, #15
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	490e      	ldr	r1, [pc, #56]	; (8007f38 <HAL_RCC_ClockConfig+0x244>)
 8007f00:	4313      	orrs	r3, r2
 8007f02:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007f04:	4b0b      	ldr	r3, [pc, #44]	; (8007f34 <HAL_RCC_ClockConfig+0x240>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 030f 	and.w	r3, r3, #15
 8007f0c:	683a      	ldr	r2, [r7, #0]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d214      	bcs.n	8007f3c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f12:	4b08      	ldr	r3, [pc, #32]	; (8007f34 <HAL_RCC_ClockConfig+0x240>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f023 020f 	bic.w	r2, r3, #15
 8007f1a:	4906      	ldr	r1, [pc, #24]	; (8007f34 <HAL_RCC_ClockConfig+0x240>)
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f22:	4b04      	ldr	r3, [pc, #16]	; (8007f34 <HAL_RCC_ClockConfig+0x240>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 030f 	and.w	r3, r3, #15
 8007f2a:	683a      	ldr	r2, [r7, #0]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d005      	beq.n	8007f3c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	e086      	b.n	8008042 <HAL_RCC_ClockConfig+0x34e>
 8007f34:	52002000 	.word	0x52002000
 8007f38:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 0304 	and.w	r3, r3, #4
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d010      	beq.n	8007f6a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	691a      	ldr	r2, [r3, #16]
 8007f4c:	4b3f      	ldr	r3, [pc, #252]	; (800804c <HAL_RCC_ClockConfig+0x358>)
 8007f4e:	699b      	ldr	r3, [r3, #24]
 8007f50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d208      	bcs.n	8007f6a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007f58:	4b3c      	ldr	r3, [pc, #240]	; (800804c <HAL_RCC_ClockConfig+0x358>)
 8007f5a:	699b      	ldr	r3, [r3, #24]
 8007f5c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	4939      	ldr	r1, [pc, #228]	; (800804c <HAL_RCC_ClockConfig+0x358>)
 8007f66:	4313      	orrs	r3, r2
 8007f68:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 0308 	and.w	r3, r3, #8
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d010      	beq.n	8007f98 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	695a      	ldr	r2, [r3, #20]
 8007f7a:	4b34      	ldr	r3, [pc, #208]	; (800804c <HAL_RCC_ClockConfig+0x358>)
 8007f7c:	69db      	ldr	r3, [r3, #28]
 8007f7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d208      	bcs.n	8007f98 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007f86:	4b31      	ldr	r3, [pc, #196]	; (800804c <HAL_RCC_ClockConfig+0x358>)
 8007f88:	69db      	ldr	r3, [r3, #28]
 8007f8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	695b      	ldr	r3, [r3, #20]
 8007f92:	492e      	ldr	r1, [pc, #184]	; (800804c <HAL_RCC_ClockConfig+0x358>)
 8007f94:	4313      	orrs	r3, r2
 8007f96:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 0310 	and.w	r3, r3, #16
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d010      	beq.n	8007fc6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	699a      	ldr	r2, [r3, #24]
 8007fa8:	4b28      	ldr	r3, [pc, #160]	; (800804c <HAL_RCC_ClockConfig+0x358>)
 8007faa:	69db      	ldr	r3, [r3, #28]
 8007fac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d208      	bcs.n	8007fc6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007fb4:	4b25      	ldr	r3, [pc, #148]	; (800804c <HAL_RCC_ClockConfig+0x358>)
 8007fb6:	69db      	ldr	r3, [r3, #28]
 8007fb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	4922      	ldr	r1, [pc, #136]	; (800804c <HAL_RCC_ClockConfig+0x358>)
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 0320 	and.w	r3, r3, #32
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d010      	beq.n	8007ff4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	69da      	ldr	r2, [r3, #28]
 8007fd6:	4b1d      	ldr	r3, [pc, #116]	; (800804c <HAL_RCC_ClockConfig+0x358>)
 8007fd8:	6a1b      	ldr	r3, [r3, #32]
 8007fda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d208      	bcs.n	8007ff4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007fe2:	4b1a      	ldr	r3, [pc, #104]	; (800804c <HAL_RCC_ClockConfig+0x358>)
 8007fe4:	6a1b      	ldr	r3, [r3, #32]
 8007fe6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	69db      	ldr	r3, [r3, #28]
 8007fee:	4917      	ldr	r1, [pc, #92]	; (800804c <HAL_RCC_ClockConfig+0x358>)
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007ff4:	f000 f834 	bl	8008060 <HAL_RCC_GetSysClockFreq>
 8007ff8:	4601      	mov	r1, r0
 8007ffa:	4b14      	ldr	r3, [pc, #80]	; (800804c <HAL_RCC_ClockConfig+0x358>)
 8007ffc:	699b      	ldr	r3, [r3, #24]
 8007ffe:	0a1b      	lsrs	r3, r3, #8
 8008000:	f003 030f 	and.w	r3, r3, #15
 8008004:	4a12      	ldr	r2, [pc, #72]	; (8008050 <HAL_RCC_ClockConfig+0x35c>)
 8008006:	5cd3      	ldrb	r3, [r2, r3]
 8008008:	f003 031f 	and.w	r3, r3, #31
 800800c:	fa21 f303 	lsr.w	r3, r1, r3
 8008010:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008012:	4b0e      	ldr	r3, [pc, #56]	; (800804c <HAL_RCC_ClockConfig+0x358>)
 8008014:	699b      	ldr	r3, [r3, #24]
 8008016:	f003 030f 	and.w	r3, r3, #15
 800801a:	4a0d      	ldr	r2, [pc, #52]	; (8008050 <HAL_RCC_ClockConfig+0x35c>)
 800801c:	5cd3      	ldrb	r3, [r2, r3]
 800801e:	f003 031f 	and.w	r3, r3, #31
 8008022:	693a      	ldr	r2, [r7, #16]
 8008024:	fa22 f303 	lsr.w	r3, r2, r3
 8008028:	4a0a      	ldr	r2, [pc, #40]	; (8008054 <HAL_RCC_ClockConfig+0x360>)
 800802a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800802c:	4a0a      	ldr	r2, [pc, #40]	; (8008058 <HAL_RCC_ClockConfig+0x364>)
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008032:	4b0a      	ldr	r3, [pc, #40]	; (800805c <HAL_RCC_ClockConfig+0x368>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4618      	mov	r0, r3
 8008038:	f7fb fb6c 	bl	8003714 <HAL_InitTick>
 800803c:	4603      	mov	r3, r0
 800803e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008040:	7bfb      	ldrb	r3, [r7, #15]
}
 8008042:	4618      	mov	r0, r3
 8008044:	3718      	adds	r7, #24
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	58024400 	.word	0x58024400
 8008050:	0800e720 	.word	0x0800e720
 8008054:	20000004 	.word	0x20000004
 8008058:	20000000 	.word	0x20000000
 800805c:	20000008 	.word	0x20000008

08008060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008060:	b480      	push	{r7}
 8008062:	b089      	sub	sp, #36	; 0x24
 8008064:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008066:	4baf      	ldr	r3, [pc, #700]	; (8008324 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008068:	691b      	ldr	r3, [r3, #16]
 800806a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800806e:	2b18      	cmp	r3, #24
 8008070:	f200 814e 	bhi.w	8008310 <HAL_RCC_GetSysClockFreq+0x2b0>
 8008074:	a201      	add	r2, pc, #4	; (adr r2, 800807c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800807a:	bf00      	nop
 800807c:	080080e1 	.word	0x080080e1
 8008080:	08008311 	.word	0x08008311
 8008084:	08008311 	.word	0x08008311
 8008088:	08008311 	.word	0x08008311
 800808c:	08008311 	.word	0x08008311
 8008090:	08008311 	.word	0x08008311
 8008094:	08008311 	.word	0x08008311
 8008098:	08008311 	.word	0x08008311
 800809c:	08008107 	.word	0x08008107
 80080a0:	08008311 	.word	0x08008311
 80080a4:	08008311 	.word	0x08008311
 80080a8:	08008311 	.word	0x08008311
 80080ac:	08008311 	.word	0x08008311
 80080b0:	08008311 	.word	0x08008311
 80080b4:	08008311 	.word	0x08008311
 80080b8:	08008311 	.word	0x08008311
 80080bc:	0800810d 	.word	0x0800810d
 80080c0:	08008311 	.word	0x08008311
 80080c4:	08008311 	.word	0x08008311
 80080c8:	08008311 	.word	0x08008311
 80080cc:	08008311 	.word	0x08008311
 80080d0:	08008311 	.word	0x08008311
 80080d4:	08008311 	.word	0x08008311
 80080d8:	08008311 	.word	0x08008311
 80080dc:	08008113 	.word	0x08008113
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080e0:	4b90      	ldr	r3, [pc, #576]	; (8008324 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 0320 	and.w	r3, r3, #32
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d009      	beq.n	8008100 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80080ec:	4b8d      	ldr	r3, [pc, #564]	; (8008324 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	08db      	lsrs	r3, r3, #3
 80080f2:	f003 0303 	and.w	r3, r3, #3
 80080f6:	4a8c      	ldr	r2, [pc, #560]	; (8008328 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80080f8:	fa22 f303 	lsr.w	r3, r2, r3
 80080fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80080fe:	e10a      	b.n	8008316 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008100:	4b89      	ldr	r3, [pc, #548]	; (8008328 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8008102:	61bb      	str	r3, [r7, #24]
    break;
 8008104:	e107      	b.n	8008316 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008106:	4b89      	ldr	r3, [pc, #548]	; (800832c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8008108:	61bb      	str	r3, [r7, #24]
    break;
 800810a:	e104      	b.n	8008316 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800810c:	4b88      	ldr	r3, [pc, #544]	; (8008330 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800810e:	61bb      	str	r3, [r7, #24]
    break;
 8008110:	e101      	b.n	8008316 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008112:	4b84      	ldr	r3, [pc, #528]	; (8008324 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008116:	f003 0303 	and.w	r3, r3, #3
 800811a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800811c:	4b81      	ldr	r3, [pc, #516]	; (8008324 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800811e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008120:	091b      	lsrs	r3, r3, #4
 8008122:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008126:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008128:	4b7e      	ldr	r3, [pc, #504]	; (8008324 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800812a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812c:	f003 0301 	and.w	r3, r3, #1
 8008130:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008132:	4b7c      	ldr	r3, [pc, #496]	; (8008324 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008136:	08db      	lsrs	r3, r3, #3
 8008138:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	fb02 f303 	mul.w	r3, r2, r3
 8008142:	ee07 3a90 	vmov	s15, r3
 8008146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800814a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	2b00      	cmp	r3, #0
 8008152:	f000 80da 	beq.w	800830a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	2b01      	cmp	r3, #1
 800815a:	d05a      	beq.n	8008212 <HAL_RCC_GetSysClockFreq+0x1b2>
 800815c:	2b01      	cmp	r3, #1
 800815e:	d302      	bcc.n	8008166 <HAL_RCC_GetSysClockFreq+0x106>
 8008160:	2b02      	cmp	r3, #2
 8008162:	d078      	beq.n	8008256 <HAL_RCC_GetSysClockFreq+0x1f6>
 8008164:	e099      	b.n	800829a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008166:	4b6f      	ldr	r3, [pc, #444]	; (8008324 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 0320 	and.w	r3, r3, #32
 800816e:	2b00      	cmp	r3, #0
 8008170:	d02d      	beq.n	80081ce <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008172:	4b6c      	ldr	r3, [pc, #432]	; (8008324 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	08db      	lsrs	r3, r3, #3
 8008178:	f003 0303 	and.w	r3, r3, #3
 800817c:	4a6a      	ldr	r2, [pc, #424]	; (8008328 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800817e:	fa22 f303 	lsr.w	r3, r2, r3
 8008182:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	ee07 3a90 	vmov	s15, r3
 800818a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	ee07 3a90 	vmov	s15, r3
 8008194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008198:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800819c:	4b61      	ldr	r3, [pc, #388]	; (8008324 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800819e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081a4:	ee07 3a90 	vmov	s15, r3
 80081a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80081b0:	eddf 5a60 	vldr	s11, [pc, #384]	; 8008334 <HAL_RCC_GetSysClockFreq+0x2d4>
 80081b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081c8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80081cc:	e087      	b.n	80082de <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	ee07 3a90 	vmov	s15, r3
 80081d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081d8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8008338 <HAL_RCC_GetSysClockFreq+0x2d8>
 80081dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081e0:	4b50      	ldr	r3, [pc, #320]	; (8008324 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80081e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081e8:	ee07 3a90 	vmov	s15, r3
 80081ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80081f4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8008334 <HAL_RCC_GetSysClockFreq+0x2d4>
 80081f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008200:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008204:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800820c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008210:	e065      	b.n	80082de <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	ee07 3a90 	vmov	s15, r3
 8008218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800821c:	eddf 6a47 	vldr	s13, [pc, #284]	; 800833c <HAL_RCC_GetSysClockFreq+0x2dc>
 8008220:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008224:	4b3f      	ldr	r3, [pc, #252]	; (8008324 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800822c:	ee07 3a90 	vmov	s15, r3
 8008230:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008234:	ed97 6a02 	vldr	s12, [r7, #8]
 8008238:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8008334 <HAL_RCC_GetSysClockFreq+0x2d4>
 800823c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008240:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008244:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008248:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800824c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008250:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008254:	e043      	b.n	80082de <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	ee07 3a90 	vmov	s15, r3
 800825c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008260:	eddf 6a37 	vldr	s13, [pc, #220]	; 8008340 <HAL_RCC_GetSysClockFreq+0x2e0>
 8008264:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008268:	4b2e      	ldr	r3, [pc, #184]	; (8008324 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800826a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800826c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008270:	ee07 3a90 	vmov	s15, r3
 8008274:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008278:	ed97 6a02 	vldr	s12, [r7, #8]
 800827c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8008334 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008280:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008284:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008288:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800828c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008294:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008298:	e021      	b.n	80082de <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	ee07 3a90 	vmov	s15, r3
 80082a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082a4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800833c <HAL_RCC_GetSysClockFreq+0x2dc>
 80082a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ac:	4b1d      	ldr	r3, [pc, #116]	; (8008324 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80082ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082b4:	ee07 3a90 	vmov	s15, r3
 80082b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082bc:	ed97 6a02 	vldr	s12, [r7, #8]
 80082c0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8008334 <HAL_RCC_GetSysClockFreq+0x2d4>
 80082c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082dc:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80082de:	4b11      	ldr	r3, [pc, #68]	; (8008324 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80082e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e2:	0a5b      	lsrs	r3, r3, #9
 80082e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082e8:	3301      	adds	r3, #1
 80082ea:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	ee07 3a90 	vmov	s15, r3
 80082f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80082f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80082fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008302:	ee17 3a90 	vmov	r3, s15
 8008306:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008308:	e005      	b.n	8008316 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800830a:	2300      	movs	r3, #0
 800830c:	61bb      	str	r3, [r7, #24]
    break;
 800830e:	e002      	b.n	8008316 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8008310:	4b06      	ldr	r3, [pc, #24]	; (800832c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8008312:	61bb      	str	r3, [r7, #24]
    break;
 8008314:	bf00      	nop
  }

  return sysclockfreq;
 8008316:	69bb      	ldr	r3, [r7, #24]
}
 8008318:	4618      	mov	r0, r3
 800831a:	3724      	adds	r7, #36	; 0x24
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr
 8008324:	58024400 	.word	0x58024400
 8008328:	03d09000 	.word	0x03d09000
 800832c:	003d0900 	.word	0x003d0900
 8008330:	016e3600 	.word	0x016e3600
 8008334:	46000000 	.word	0x46000000
 8008338:	4c742400 	.word	0x4c742400
 800833c:	4a742400 	.word	0x4a742400
 8008340:	4bb71b00 	.word	0x4bb71b00

08008344 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800834a:	f7ff fe89 	bl	8008060 <HAL_RCC_GetSysClockFreq>
 800834e:	4601      	mov	r1, r0
 8008350:	4b10      	ldr	r3, [pc, #64]	; (8008394 <HAL_RCC_GetHCLKFreq+0x50>)
 8008352:	699b      	ldr	r3, [r3, #24]
 8008354:	0a1b      	lsrs	r3, r3, #8
 8008356:	f003 030f 	and.w	r3, r3, #15
 800835a:	4a0f      	ldr	r2, [pc, #60]	; (8008398 <HAL_RCC_GetHCLKFreq+0x54>)
 800835c:	5cd3      	ldrb	r3, [r2, r3]
 800835e:	f003 031f 	and.w	r3, r3, #31
 8008362:	fa21 f303 	lsr.w	r3, r1, r3
 8008366:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008368:	4b0a      	ldr	r3, [pc, #40]	; (8008394 <HAL_RCC_GetHCLKFreq+0x50>)
 800836a:	699b      	ldr	r3, [r3, #24]
 800836c:	f003 030f 	and.w	r3, r3, #15
 8008370:	4a09      	ldr	r2, [pc, #36]	; (8008398 <HAL_RCC_GetHCLKFreq+0x54>)
 8008372:	5cd3      	ldrb	r3, [r2, r3]
 8008374:	f003 031f 	and.w	r3, r3, #31
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	fa22 f303 	lsr.w	r3, r2, r3
 800837e:	4a07      	ldr	r2, [pc, #28]	; (800839c <HAL_RCC_GetHCLKFreq+0x58>)
 8008380:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008382:	4a07      	ldr	r2, [pc, #28]	; (80083a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008388:	4b04      	ldr	r3, [pc, #16]	; (800839c <HAL_RCC_GetHCLKFreq+0x58>)
 800838a:	681b      	ldr	r3, [r3, #0]
}
 800838c:	4618      	mov	r0, r3
 800838e:	3708      	adds	r7, #8
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}
 8008394:	58024400 	.word	0x58024400
 8008398:	0800e720 	.word	0x0800e720
 800839c:	20000004 	.word	0x20000004
 80083a0:	20000000 	.word	0x20000000

080083a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80083a8:	f7ff ffcc 	bl	8008344 <HAL_RCC_GetHCLKFreq>
 80083ac:	4601      	mov	r1, r0
 80083ae:	4b06      	ldr	r3, [pc, #24]	; (80083c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80083b0:	69db      	ldr	r3, [r3, #28]
 80083b2:	091b      	lsrs	r3, r3, #4
 80083b4:	f003 0307 	and.w	r3, r3, #7
 80083b8:	4a04      	ldr	r2, [pc, #16]	; (80083cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80083ba:	5cd3      	ldrb	r3, [r2, r3]
 80083bc:	f003 031f 	and.w	r3, r3, #31
 80083c0:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	58024400 	.word	0x58024400
 80083cc:	0800e720 	.word	0x0800e720

080083d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80083d4:	f7ff ffb6 	bl	8008344 <HAL_RCC_GetHCLKFreq>
 80083d8:	4601      	mov	r1, r0
 80083da:	4b06      	ldr	r3, [pc, #24]	; (80083f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80083dc:	69db      	ldr	r3, [r3, #28]
 80083de:	0a1b      	lsrs	r3, r3, #8
 80083e0:	f003 0307 	and.w	r3, r3, #7
 80083e4:	4a04      	ldr	r2, [pc, #16]	; (80083f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80083e6:	5cd3      	ldrb	r3, [r2, r3]
 80083e8:	f003 031f 	and.w	r3, r3, #31
 80083ec:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	58024400 	.word	0x58024400
 80083f8:	0800e720 	.word	0x0800e720

080083fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b086      	sub	sp, #24
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008404:	2300      	movs	r3, #0
 8008406:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008408:	2300      	movs	r3, #0
 800840a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008414:	2b00      	cmp	r3, #0
 8008416:	d03d      	beq.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800841c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008420:	d013      	beq.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8008422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008426:	d802      	bhi.n	800842e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8008428:	2b00      	cmp	r3, #0
 800842a:	d007      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800842c:	e01f      	b.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800842e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008432:	d013      	beq.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8008434:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008438:	d01c      	beq.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800843a:	e018      	b.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800843c:	4baf      	ldr	r3, [pc, #700]	; (80086fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800843e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008440:	4aae      	ldr	r2, [pc, #696]	; (80086fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008442:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008446:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008448:	e015      	b.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	3304      	adds	r3, #4
 800844e:	2102      	movs	r1, #2
 8008450:	4618      	mov	r0, r3
 8008452:	f001 fd33 	bl	8009ebc <RCCEx_PLL2_Config>
 8008456:	4603      	mov	r3, r0
 8008458:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800845a:	e00c      	b.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	3324      	adds	r3, #36	; 0x24
 8008460:	2102      	movs	r1, #2
 8008462:	4618      	mov	r0, r3
 8008464:	f001 fddc 	bl	800a020 <RCCEx_PLL3_Config>
 8008468:	4603      	mov	r3, r0
 800846a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800846c:	e003      	b.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	75fb      	strb	r3, [r7, #23]
      break;
 8008472:	e000      	b.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8008474:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008476:	7dfb      	ldrb	r3, [r7, #23]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d109      	bne.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800847c:	4b9f      	ldr	r3, [pc, #636]	; (80086fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800847e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008480:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008488:	499c      	ldr	r1, [pc, #624]	; (80086fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800848a:	4313      	orrs	r3, r2
 800848c:	650b      	str	r3, [r1, #80]	; 0x50
 800848e:	e001      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008490:	7dfb      	ldrb	r3, [r7, #23]
 8008492:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800849c:	2b00      	cmp	r3, #0
 800849e:	d03d      	beq.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084a4:	2b04      	cmp	r3, #4
 80084a6:	d826      	bhi.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80084a8:	a201      	add	r2, pc, #4	; (adr r2, 80084b0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80084aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ae:	bf00      	nop
 80084b0:	080084c5 	.word	0x080084c5
 80084b4:	080084d3 	.word	0x080084d3
 80084b8:	080084e5 	.word	0x080084e5
 80084bc:	080084fd 	.word	0x080084fd
 80084c0:	080084fd 	.word	0x080084fd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084c4:	4b8d      	ldr	r3, [pc, #564]	; (80086fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80084c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c8:	4a8c      	ldr	r2, [pc, #560]	; (80086fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80084ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80084d0:	e015      	b.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	3304      	adds	r3, #4
 80084d6:	2100      	movs	r1, #0
 80084d8:	4618      	mov	r0, r3
 80084da:	f001 fcef 	bl	8009ebc <RCCEx_PLL2_Config>
 80084de:	4603      	mov	r3, r0
 80084e0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80084e2:	e00c      	b.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	3324      	adds	r3, #36	; 0x24
 80084e8:	2100      	movs	r1, #0
 80084ea:	4618      	mov	r0, r3
 80084ec:	f001 fd98 	bl	800a020 <RCCEx_PLL3_Config>
 80084f0:	4603      	mov	r3, r0
 80084f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80084f4:	e003      	b.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	75fb      	strb	r3, [r7, #23]
      break;
 80084fa:	e000      	b.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80084fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084fe:	7dfb      	ldrb	r3, [r7, #23]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d109      	bne.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008504:	4b7d      	ldr	r3, [pc, #500]	; (80086fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008508:	f023 0207 	bic.w	r2, r3, #7
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008510:	497a      	ldr	r1, [pc, #488]	; (80086fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008512:	4313      	orrs	r3, r2
 8008514:	650b      	str	r3, [r1, #80]	; 0x50
 8008516:	e001      	b.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008518:	7dfb      	ldrb	r3, [r7, #23]
 800851a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008524:	2b00      	cmp	r3, #0
 8008526:	d03e      	beq.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800852c:	2b80      	cmp	r3, #128	; 0x80
 800852e:	d01c      	beq.n	800856a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8008530:	2b80      	cmp	r3, #128	; 0x80
 8008532:	d804      	bhi.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8008534:	2b00      	cmp	r3, #0
 8008536:	d008      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8008538:	2b40      	cmp	r3, #64	; 0x40
 800853a:	d00d      	beq.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800853c:	e01e      	b.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800853e:	2bc0      	cmp	r3, #192	; 0xc0
 8008540:	d01f      	beq.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8008542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008546:	d01e      	beq.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008548:	e018      	b.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800854a:	4b6c      	ldr	r3, [pc, #432]	; (80086fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800854c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854e:	4a6b      	ldr	r2, [pc, #428]	; (80086fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008554:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008556:	e017      	b.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	3304      	adds	r3, #4
 800855c:	2100      	movs	r1, #0
 800855e:	4618      	mov	r0, r3
 8008560:	f001 fcac 	bl	8009ebc <RCCEx_PLL2_Config>
 8008564:	4603      	mov	r3, r0
 8008566:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008568:	e00e      	b.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	3324      	adds	r3, #36	; 0x24
 800856e:	2100      	movs	r1, #0
 8008570:	4618      	mov	r0, r3
 8008572:	f001 fd55 	bl	800a020 <RCCEx_PLL3_Config>
 8008576:	4603      	mov	r3, r0
 8008578:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800857a:	e005      	b.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	75fb      	strb	r3, [r7, #23]
      break;
 8008580:	e002      	b.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8008582:	bf00      	nop
 8008584:	e000      	b.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8008586:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008588:	7dfb      	ldrb	r3, [r7, #23]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d109      	bne.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800858e:	4b5b      	ldr	r3, [pc, #364]	; (80086fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008592:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800859a:	4958      	ldr	r1, [pc, #352]	; (80086fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800859c:	4313      	orrs	r3, r2
 800859e:	650b      	str	r3, [r1, #80]	; 0x50
 80085a0:	e001      	b.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085a2:	7dfb      	ldrb	r3, [r7, #23]
 80085a4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d044      	beq.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80085b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085bc:	d01f      	beq.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x202>
 80085be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085c2:	d805      	bhi.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00a      	beq.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80085c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085cc:	d00e      	beq.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80085ce:	e01f      	b.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80085d0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80085d4:	d01f      	beq.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80085d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80085da:	d01e      	beq.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80085dc:	e018      	b.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085de:	4b47      	ldr	r3, [pc, #284]	; (80086fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80085e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e2:	4a46      	ldr	r2, [pc, #280]	; (80086fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80085e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80085ea:	e017      	b.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	3304      	adds	r3, #4
 80085f0:	2100      	movs	r1, #0
 80085f2:	4618      	mov	r0, r3
 80085f4:	f001 fc62 	bl	8009ebc <RCCEx_PLL2_Config>
 80085f8:	4603      	mov	r3, r0
 80085fa:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80085fc:	e00e      	b.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	3324      	adds	r3, #36	; 0x24
 8008602:	2100      	movs	r1, #0
 8008604:	4618      	mov	r0, r3
 8008606:	f001 fd0b 	bl	800a020 <RCCEx_PLL3_Config>
 800860a:	4603      	mov	r3, r0
 800860c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800860e:	e005      	b.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	75fb      	strb	r3, [r7, #23]
      break;
 8008614:	e002      	b.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8008616:	bf00      	nop
 8008618:	e000      	b.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800861a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800861c:	7dfb      	ldrb	r3, [r7, #23]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d10a      	bne.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008622:	4b36      	ldr	r3, [pc, #216]	; (80086fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008626:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008630:	4932      	ldr	r1, [pc, #200]	; (80086fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008632:	4313      	orrs	r3, r2
 8008634:	658b      	str	r3, [r1, #88]	; 0x58
 8008636:	e001      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008638:	7dfb      	ldrb	r3, [r7, #23]
 800863a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008644:	2b00      	cmp	r3, #0
 8008646:	d044      	beq.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800864e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008652:	d01f      	beq.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008654:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008658:	d805      	bhi.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00a      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800865e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008662:	d00e      	beq.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8008664:	e01f      	b.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8008666:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800866a:	d01f      	beq.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800866c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008670:	d01e      	beq.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008672:	e018      	b.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008674:	4b21      	ldr	r3, [pc, #132]	; (80086fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008678:	4a20      	ldr	r2, [pc, #128]	; (80086fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800867a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800867e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008680:	e017      	b.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	3304      	adds	r3, #4
 8008686:	2100      	movs	r1, #0
 8008688:	4618      	mov	r0, r3
 800868a:	f001 fc17 	bl	8009ebc <RCCEx_PLL2_Config>
 800868e:	4603      	mov	r3, r0
 8008690:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008692:	e00e      	b.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	3324      	adds	r3, #36	; 0x24
 8008698:	2100      	movs	r1, #0
 800869a:	4618      	mov	r0, r3
 800869c:	f001 fcc0 	bl	800a020 <RCCEx_PLL3_Config>
 80086a0:	4603      	mov	r3, r0
 80086a2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80086a4:	e005      	b.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	75fb      	strb	r3, [r7, #23]
      break;
 80086aa:	e002      	b.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80086ac:	bf00      	nop
 80086ae:	e000      	b.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80086b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086b2:	7dfb      	ldrb	r3, [r7, #23]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d10a      	bne.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80086b8:	4b10      	ldr	r3, [pc, #64]	; (80086fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80086ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086bc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80086c6:	490d      	ldr	r1, [pc, #52]	; (80086fc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80086c8:	4313      	orrs	r3, r2
 80086ca:	658b      	str	r3, [r1, #88]	; 0x58
 80086cc:	e001      	b.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086ce:	7dfb      	ldrb	r3, [r7, #23]
 80086d0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d035      	beq.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086e2:	2b10      	cmp	r3, #16
 80086e4:	d00c      	beq.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80086e6:	2b10      	cmp	r3, #16
 80086e8:	d802      	bhi.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d01b      	beq.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80086ee:	e017      	b.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80086f0:	2b20      	cmp	r3, #32
 80086f2:	d00c      	beq.n	800870e <HAL_RCCEx_PeriphCLKConfig+0x312>
 80086f4:	2b30      	cmp	r3, #48	; 0x30
 80086f6:	d018      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80086f8:	e012      	b.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80086fa:	bf00      	nop
 80086fc:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008700:	4baf      	ldr	r3, [pc, #700]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008704:	4aae      	ldr	r2, [pc, #696]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800870a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800870c:	e00e      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	3304      	adds	r3, #4
 8008712:	2102      	movs	r1, #2
 8008714:	4618      	mov	r0, r3
 8008716:	f001 fbd1 	bl	8009ebc <RCCEx_PLL2_Config>
 800871a:	4603      	mov	r3, r0
 800871c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800871e:	e005      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	75fb      	strb	r3, [r7, #23]
      break;
 8008724:	e002      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8008726:	bf00      	nop
 8008728:	e000      	b.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800872a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800872c:	7dfb      	ldrb	r3, [r7, #23]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d109      	bne.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008732:	4ba3      	ldr	r3, [pc, #652]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008736:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800873e:	49a0      	ldr	r1, [pc, #640]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008740:	4313      	orrs	r3, r2
 8008742:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008744:	e001      	b.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008746:	7dfb      	ldrb	r3, [r7, #23]
 8008748:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008752:	2b00      	cmp	r3, #0
 8008754:	d042      	beq.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800875a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800875e:	d01f      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8008760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008764:	d805      	bhi.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00a      	beq.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800876a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800876e:	d00e      	beq.n	800878e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8008770:	e01f      	b.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8008772:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008776:	d01f      	beq.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008778:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800877c:	d01e      	beq.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800877e:	e018      	b.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008780:	4b8f      	ldr	r3, [pc, #572]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008784:	4a8e      	ldr	r2, [pc, #568]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800878a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800878c:	e017      	b.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	3304      	adds	r3, #4
 8008792:	2100      	movs	r1, #0
 8008794:	4618      	mov	r0, r3
 8008796:	f001 fb91 	bl	8009ebc <RCCEx_PLL2_Config>
 800879a:	4603      	mov	r3, r0
 800879c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800879e:	e00e      	b.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	3324      	adds	r3, #36	; 0x24
 80087a4:	2100      	movs	r1, #0
 80087a6:	4618      	mov	r0, r3
 80087a8:	f001 fc3a 	bl	800a020 <RCCEx_PLL3_Config>
 80087ac:	4603      	mov	r3, r0
 80087ae:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80087b0:	e005      	b.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	75fb      	strb	r3, [r7, #23]
      break;
 80087b6:	e002      	b.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80087b8:	bf00      	nop
 80087ba:	e000      	b.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80087bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087be:	7dfb      	ldrb	r3, [r7, #23]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d109      	bne.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80087c4:	4b7e      	ldr	r3, [pc, #504]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80087c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087c8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087d0:	497b      	ldr	r1, [pc, #492]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80087d2:	4313      	orrs	r3, r2
 80087d4:	650b      	str	r3, [r1, #80]	; 0x50
 80087d6:	e001      	b.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087d8:	7dfb      	ldrb	r3, [r7, #23]
 80087da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d042      	beq.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087f0:	d01b      	beq.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80087f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087f6:	d805      	bhi.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d022      	beq.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0x446>
 80087fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008800:	d00a      	beq.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008802:	e01b      	b.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8008804:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008808:	d01d      	beq.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800880a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800880e:	d01c      	beq.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8008810:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008814:	d01b      	beq.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8008816:	e011      	b.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	3304      	adds	r3, #4
 800881c:	2101      	movs	r1, #1
 800881e:	4618      	mov	r0, r3
 8008820:	f001 fb4c 	bl	8009ebc <RCCEx_PLL2_Config>
 8008824:	4603      	mov	r3, r0
 8008826:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008828:	e012      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	3324      	adds	r3, #36	; 0x24
 800882e:	2101      	movs	r1, #1
 8008830:	4618      	mov	r0, r3
 8008832:	f001 fbf5 	bl	800a020 <RCCEx_PLL3_Config>
 8008836:	4603      	mov	r3, r0
 8008838:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800883a:	e009      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	75fb      	strb	r3, [r7, #23]
      break;
 8008840:	e006      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008842:	bf00      	nop
 8008844:	e004      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008846:	bf00      	nop
 8008848:	e002      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800884a:	bf00      	nop
 800884c:	e000      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800884e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008850:	7dfb      	ldrb	r3, [r7, #23]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d109      	bne.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008856:	4b5a      	ldr	r3, [pc, #360]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800885a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008862:	4957      	ldr	r1, [pc, #348]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008864:	4313      	orrs	r3, r2
 8008866:	650b      	str	r3, [r1, #80]	; 0x50
 8008868:	e001      	b.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800886a:	7dfb      	ldrb	r3, [r7, #23]
 800886c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008876:	2b00      	cmp	r3, #0
 8008878:	d044      	beq.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008880:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008884:	d01b      	beq.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8008886:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800888a:	d805      	bhi.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800888c:	2b00      	cmp	r3, #0
 800888e:	d022      	beq.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008890:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008894:	d00a      	beq.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8008896:	e01b      	b.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8008898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800889c:	d01d      	beq.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800889e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088a2:	d01c      	beq.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80088a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80088a8:	d01b      	beq.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80088aa:	e011      	b.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	3304      	adds	r3, #4
 80088b0:	2101      	movs	r1, #1
 80088b2:	4618      	mov	r0, r3
 80088b4:	f001 fb02 	bl	8009ebc <RCCEx_PLL2_Config>
 80088b8:	4603      	mov	r3, r0
 80088ba:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80088bc:	e012      	b.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	3324      	adds	r3, #36	; 0x24
 80088c2:	2101      	movs	r1, #1
 80088c4:	4618      	mov	r0, r3
 80088c6:	f001 fbab 	bl	800a020 <RCCEx_PLL3_Config>
 80088ca:	4603      	mov	r3, r0
 80088cc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80088ce:	e009      	b.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	75fb      	strb	r3, [r7, #23]
      break;
 80088d4:	e006      	b.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80088d6:	bf00      	nop
 80088d8:	e004      	b.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80088da:	bf00      	nop
 80088dc:	e002      	b.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80088de:	bf00      	nop
 80088e0:	e000      	b.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80088e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088e4:	7dfb      	ldrb	r3, [r7, #23]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d10a      	bne.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80088ea:	4b35      	ldr	r3, [pc, #212]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80088ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088ee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80088f8:	4931      	ldr	r1, [pc, #196]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80088fa:	4313      	orrs	r3, r2
 80088fc:	658b      	str	r3, [r1, #88]	; 0x58
 80088fe:	e001      	b.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008900:	7dfb      	ldrb	r3, [r7, #23]
 8008902:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800890c:	2b00      	cmp	r3, #0
 800890e:	d02d      	beq.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008914:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008918:	d005      	beq.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800891a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800891e:	d009      	beq.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8008920:	2b00      	cmp	r3, #0
 8008922:	d013      	beq.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008924:	e00f      	b.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008926:	4b26      	ldr	r3, [pc, #152]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800892a:	4a25      	ldr	r2, [pc, #148]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800892c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008930:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008932:	e00c      	b.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	3304      	adds	r3, #4
 8008938:	2101      	movs	r1, #1
 800893a:	4618      	mov	r0, r3
 800893c:	f001 fabe 	bl	8009ebc <RCCEx_PLL2_Config>
 8008940:	4603      	mov	r3, r0
 8008942:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008944:	e003      	b.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	75fb      	strb	r3, [r7, #23]
      break;
 800894a:	e000      	b.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800894c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800894e:	7dfb      	ldrb	r3, [r7, #23]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d109      	bne.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008954:	4b1a      	ldr	r3, [pc, #104]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008958:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008960:	4917      	ldr	r1, [pc, #92]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008962:	4313      	orrs	r3, r2
 8008964:	650b      	str	r3, [r1, #80]	; 0x50
 8008966:	e001      	b.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008968:	7dfb      	ldrb	r3, [r7, #23]
 800896a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008974:	2b00      	cmp	r3, #0
 8008976:	d035      	beq.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800897c:	2b03      	cmp	r3, #3
 800897e:	d81b      	bhi.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008980:	a201      	add	r2, pc, #4	; (adr r2, 8008988 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8008982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008986:	bf00      	nop
 8008988:	080089c5 	.word	0x080089c5
 800898c:	08008999 	.word	0x08008999
 8008990:	080089a7 	.word	0x080089a7
 8008994:	080089c5 	.word	0x080089c5
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008998:	4b09      	ldr	r3, [pc, #36]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800899a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899c:	4a08      	ldr	r2, [pc, #32]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800899e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80089a4:	e00f      	b.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	3304      	adds	r3, #4
 80089aa:	2102      	movs	r1, #2
 80089ac:	4618      	mov	r0, r3
 80089ae:	f001 fa85 	bl	8009ebc <RCCEx_PLL2_Config>
 80089b2:	4603      	mov	r3, r0
 80089b4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80089b6:	e006      	b.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	75fb      	strb	r3, [r7, #23]
      break;
 80089bc:	e003      	b.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80089be:	bf00      	nop
 80089c0:	58024400 	.word	0x58024400
      break;
 80089c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089c6:	7dfb      	ldrb	r3, [r7, #23]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d109      	bne.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80089cc:	4bba      	ldr	r3, [pc, #744]	; (8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80089ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089d0:	f023 0203 	bic.w	r2, r3, #3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089d8:	49b7      	ldr	r1, [pc, #732]	; (8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80089da:	4313      	orrs	r3, r2
 80089dc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80089de:	e001      	b.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089e0:	7dfb      	ldrb	r3, [r7, #23]
 80089e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f000 8086 	beq.w	8008afe <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80089f2:	4bb2      	ldr	r3, [pc, #712]	; (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4ab1      	ldr	r2, [pc, #708]	; (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80089f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80089fe:	f7fa fed3 	bl	80037a8 <HAL_GetTick>
 8008a02:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a04:	e009      	b.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a06:	f7fa fecf 	bl	80037a8 <HAL_GetTick>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	1ad3      	subs	r3, r2, r3
 8008a10:	2b64      	cmp	r3, #100	; 0x64
 8008a12:	d902      	bls.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8008a14:	2303      	movs	r3, #3
 8008a16:	75fb      	strb	r3, [r7, #23]
        break;
 8008a18:	e005      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a1a:	4ba8      	ldr	r3, [pc, #672]	; (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d0ef      	beq.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8008a26:	7dfb      	ldrb	r3, [r7, #23]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d166      	bne.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008a2c:	4ba2      	ldr	r3, [pc, #648]	; (8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008a2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a36:	4053      	eors	r3, r2
 8008a38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d013      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008a40:	4b9d      	ldr	r3, [pc, #628]	; (8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a48:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008a4a:	4b9b      	ldr	r3, [pc, #620]	; (8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a4e:	4a9a      	ldr	r2, [pc, #616]	; (8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a54:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008a56:	4b98      	ldr	r3, [pc, #608]	; (8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a5a:	4a97      	ldr	r2, [pc, #604]	; (8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a60:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008a62:	4a95      	ldr	r2, [pc, #596]	; (8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a72:	d115      	bne.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a74:	f7fa fe98 	bl	80037a8 <HAL_GetTick>
 8008a78:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a7a:	e00b      	b.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a7c:	f7fa fe94 	bl	80037a8 <HAL_GetTick>
 8008a80:	4602      	mov	r2, r0
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d902      	bls.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8008a8e:	2303      	movs	r3, #3
 8008a90:	75fb      	strb	r3, [r7, #23]
            break;
 8008a92:	e005      	b.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a94:	4b88      	ldr	r3, [pc, #544]	; (8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a98:	f003 0302 	and.w	r3, r3, #2
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d0ed      	beq.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8008aa0:	7dfb      	ldrb	r3, [r7, #23]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d126      	bne.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008aac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ab0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ab4:	d10d      	bne.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8008ab6:	4b80      	ldr	r3, [pc, #512]	; (8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ac4:	0919      	lsrs	r1, r3, #4
 8008ac6:	4b7e      	ldr	r3, [pc, #504]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8008ac8:	400b      	ands	r3, r1
 8008aca:	497b      	ldr	r1, [pc, #492]	; (8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008acc:	4313      	orrs	r3, r2
 8008ace:	610b      	str	r3, [r1, #16]
 8008ad0:	e005      	b.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8008ad2:	4b79      	ldr	r3, [pc, #484]	; (8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	4a78      	ldr	r2, [pc, #480]	; (8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008ad8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008adc:	6113      	str	r3, [r2, #16]
 8008ade:	4b76      	ldr	r3, [pc, #472]	; (8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008ae0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008aec:	4972      	ldr	r1, [pc, #456]	; (8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008aee:	4313      	orrs	r3, r2
 8008af0:	670b      	str	r3, [r1, #112]	; 0x70
 8008af2:	e004      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008af4:	7dfb      	ldrb	r3, [r7, #23]
 8008af6:	75bb      	strb	r3, [r7, #22]
 8008af8:	e001      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008afa:	7dfb      	ldrb	r3, [r7, #23]
 8008afc:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 0301 	and.w	r3, r3, #1
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d07d      	beq.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b0e:	2b28      	cmp	r3, #40	; 0x28
 8008b10:	d866      	bhi.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8008b12:	a201      	add	r2, pc, #4	; (adr r2, 8008b18 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b18:	08008be7 	.word	0x08008be7
 8008b1c:	08008be1 	.word	0x08008be1
 8008b20:	08008be1 	.word	0x08008be1
 8008b24:	08008be1 	.word	0x08008be1
 8008b28:	08008be1 	.word	0x08008be1
 8008b2c:	08008be1 	.word	0x08008be1
 8008b30:	08008be1 	.word	0x08008be1
 8008b34:	08008be1 	.word	0x08008be1
 8008b38:	08008bbd 	.word	0x08008bbd
 8008b3c:	08008be1 	.word	0x08008be1
 8008b40:	08008be1 	.word	0x08008be1
 8008b44:	08008be1 	.word	0x08008be1
 8008b48:	08008be1 	.word	0x08008be1
 8008b4c:	08008be1 	.word	0x08008be1
 8008b50:	08008be1 	.word	0x08008be1
 8008b54:	08008be1 	.word	0x08008be1
 8008b58:	08008bcf 	.word	0x08008bcf
 8008b5c:	08008be1 	.word	0x08008be1
 8008b60:	08008be1 	.word	0x08008be1
 8008b64:	08008be1 	.word	0x08008be1
 8008b68:	08008be1 	.word	0x08008be1
 8008b6c:	08008be1 	.word	0x08008be1
 8008b70:	08008be1 	.word	0x08008be1
 8008b74:	08008be1 	.word	0x08008be1
 8008b78:	08008be7 	.word	0x08008be7
 8008b7c:	08008be1 	.word	0x08008be1
 8008b80:	08008be1 	.word	0x08008be1
 8008b84:	08008be1 	.word	0x08008be1
 8008b88:	08008be1 	.word	0x08008be1
 8008b8c:	08008be1 	.word	0x08008be1
 8008b90:	08008be1 	.word	0x08008be1
 8008b94:	08008be1 	.word	0x08008be1
 8008b98:	08008be7 	.word	0x08008be7
 8008b9c:	08008be1 	.word	0x08008be1
 8008ba0:	08008be1 	.word	0x08008be1
 8008ba4:	08008be1 	.word	0x08008be1
 8008ba8:	08008be1 	.word	0x08008be1
 8008bac:	08008be1 	.word	0x08008be1
 8008bb0:	08008be1 	.word	0x08008be1
 8008bb4:	08008be1 	.word	0x08008be1
 8008bb8:	08008be7 	.word	0x08008be7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	3304      	adds	r3, #4
 8008bc0:	2101      	movs	r1, #1
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f001 f97a 	bl	8009ebc <RCCEx_PLL2_Config>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008bcc:	e00c      	b.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	3324      	adds	r3, #36	; 0x24
 8008bd2:	2101      	movs	r1, #1
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f001 fa23 	bl	800a020 <RCCEx_PLL3_Config>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008bde:	e003      	b.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	75fb      	strb	r3, [r7, #23]
      break;
 8008be4:	e000      	b.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8008be6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008be8:	7dfb      	ldrb	r3, [r7, #23]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d109      	bne.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008bee:	4b32      	ldr	r3, [pc, #200]	; (8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bf2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008bfa:	492f      	ldr	r1, [pc, #188]	; (8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	654b      	str	r3, [r1, #84]	; 0x54
 8008c00:	e001      	b.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c02:	7dfb      	ldrb	r3, [r7, #23]
 8008c04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 0302 	and.w	r3, r3, #2
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d037      	beq.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c16:	2b05      	cmp	r3, #5
 8008c18:	d820      	bhi.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x860>
 8008c1a:	a201      	add	r2, pc, #4	; (adr r2, 8008c20 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c20:	08008c63 	.word	0x08008c63
 8008c24:	08008c39 	.word	0x08008c39
 8008c28:	08008c4b 	.word	0x08008c4b
 8008c2c:	08008c63 	.word	0x08008c63
 8008c30:	08008c63 	.word	0x08008c63
 8008c34:	08008c63 	.word	0x08008c63
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	3304      	adds	r3, #4
 8008c3c:	2101      	movs	r1, #1
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f001 f93c 	bl	8009ebc <RCCEx_PLL2_Config>
 8008c44:	4603      	mov	r3, r0
 8008c46:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008c48:	e00c      	b.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	3324      	adds	r3, #36	; 0x24
 8008c4e:	2101      	movs	r1, #1
 8008c50:	4618      	mov	r0, r3
 8008c52:	f001 f9e5 	bl	800a020 <RCCEx_PLL3_Config>
 8008c56:	4603      	mov	r3, r0
 8008c58:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008c5a:	e003      	b.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	75fb      	strb	r3, [r7, #23]
      break;
 8008c60:	e000      	b.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8008c62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c64:	7dfb      	ldrb	r3, [r7, #23]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d109      	bne.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008c6a:	4b13      	ldr	r3, [pc, #76]	; (8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c6e:	f023 0207 	bic.w	r2, r3, #7
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c76:	4910      	ldr	r1, [pc, #64]	; (8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	654b      	str	r3, [r1, #84]	; 0x54
 8008c7c:	e001      	b.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c7e:	7dfb      	ldrb	r3, [r7, #23]
 8008c80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f003 0304 	and.w	r3, r3, #4
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d040      	beq.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c94:	2b05      	cmp	r3, #5
 8008c96:	d827      	bhi.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8008c98:	a201      	add	r2, pc, #4	; (adr r2, 8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8008c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c9e:	bf00      	nop
 8008ca0:	08008cef 	.word	0x08008cef
 8008ca4:	08008cc5 	.word	0x08008cc5
 8008ca8:	08008cd7 	.word	0x08008cd7
 8008cac:	08008cef 	.word	0x08008cef
 8008cb0:	08008cef 	.word	0x08008cef
 8008cb4:	08008cef 	.word	0x08008cef
 8008cb8:	58024400 	.word	0x58024400
 8008cbc:	58024800 	.word	0x58024800
 8008cc0:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	3304      	adds	r3, #4
 8008cc8:	2101      	movs	r1, #1
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f001 f8f6 	bl	8009ebc <RCCEx_PLL2_Config>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008cd4:	e00c      	b.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	3324      	adds	r3, #36	; 0x24
 8008cda:	2101      	movs	r1, #1
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f001 f99f 	bl	800a020 <RCCEx_PLL3_Config>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008ce6:	e003      	b.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	75fb      	strb	r3, [r7, #23]
      break;
 8008cec:	e000      	b.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8008cee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cf0:	7dfb      	ldrb	r3, [r7, #23]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d10a      	bne.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008cf6:	4bb2      	ldr	r3, [pc, #712]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cfa:	f023 0207 	bic.w	r2, r3, #7
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d04:	49ae      	ldr	r1, [pc, #696]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008d06:	4313      	orrs	r3, r2
 8008d08:	658b      	str	r3, [r1, #88]	; 0x58
 8008d0a:	e001      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d0c:	7dfb      	ldrb	r3, [r7, #23]
 8008d0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f003 0320 	and.w	r3, r3, #32
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d044      	beq.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d26:	d01b      	beq.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8008d28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d2c:	d805      	bhi.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d022      	beq.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8008d32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d36:	d00a      	beq.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8008d38:	e01b      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8008d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d3e:	d01d      	beq.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8008d40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d44:	d01c      	beq.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8008d46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008d4a:	d01b      	beq.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8008d4c:	e011      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	3304      	adds	r3, #4
 8008d52:	2100      	movs	r1, #0
 8008d54:	4618      	mov	r0, r3
 8008d56:	f001 f8b1 	bl	8009ebc <RCCEx_PLL2_Config>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008d5e:	e012      	b.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	3324      	adds	r3, #36	; 0x24
 8008d64:	2102      	movs	r1, #2
 8008d66:	4618      	mov	r0, r3
 8008d68:	f001 f95a 	bl	800a020 <RCCEx_PLL3_Config>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008d70:	e009      	b.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	75fb      	strb	r3, [r7, #23]
      break;
 8008d76:	e006      	b.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008d78:	bf00      	nop
 8008d7a:	e004      	b.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008d7c:	bf00      	nop
 8008d7e:	e002      	b.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008d80:	bf00      	nop
 8008d82:	e000      	b.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008d84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d86:	7dfb      	ldrb	r3, [r7, #23]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d10a      	bne.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008d8c:	4b8c      	ldr	r3, [pc, #560]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d90:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d9a:	4989      	ldr	r1, [pc, #548]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	654b      	str	r3, [r1, #84]	; 0x54
 8008da0:	e001      	b.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008da2:	7dfb      	ldrb	r3, [r7, #23]
 8008da4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d044      	beq.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008db8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dbc:	d01b      	beq.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8008dbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dc2:	d805      	bhi.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d022      	beq.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dcc:	d00a      	beq.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8008dce:	e01b      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8008dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dd4:	d01d      	beq.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8008dd6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008dda:	d01c      	beq.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8008ddc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008de0:	d01b      	beq.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8008de2:	e011      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	3304      	adds	r3, #4
 8008de8:	2100      	movs	r1, #0
 8008dea:	4618      	mov	r0, r3
 8008dec:	f001 f866 	bl	8009ebc <RCCEx_PLL2_Config>
 8008df0:	4603      	mov	r3, r0
 8008df2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008df4:	e012      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	3324      	adds	r3, #36	; 0x24
 8008dfa:	2102      	movs	r1, #2
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f001 f90f 	bl	800a020 <RCCEx_PLL3_Config>
 8008e02:	4603      	mov	r3, r0
 8008e04:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008e06:	e009      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8008e0c:	e006      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008e0e:	bf00      	nop
 8008e10:	e004      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008e12:	bf00      	nop
 8008e14:	e002      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008e16:	bf00      	nop
 8008e18:	e000      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008e1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e1c:	7dfb      	ldrb	r3, [r7, #23]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d10a      	bne.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008e22:	4b67      	ldr	r3, [pc, #412]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e26:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e30:	4963      	ldr	r1, [pc, #396]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008e32:	4313      	orrs	r3, r2
 8008e34:	658b      	str	r3, [r1, #88]	; 0x58
 8008e36:	e001      	b.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e38:	7dfb      	ldrb	r3, [r7, #23]
 8008e3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d044      	beq.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008e4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e52:	d01b      	beq.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8008e54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e58:	d805      	bhi.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d022      	beq.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e62:	d00a      	beq.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008e64:	e01b      	b.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8008e66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e6a:	d01d      	beq.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8008e6c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008e70:	d01c      	beq.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8008e72:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008e76:	d01b      	beq.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8008e78:	e011      	b.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	3304      	adds	r3, #4
 8008e7e:	2100      	movs	r1, #0
 8008e80:	4618      	mov	r0, r3
 8008e82:	f001 f81b 	bl	8009ebc <RCCEx_PLL2_Config>
 8008e86:	4603      	mov	r3, r0
 8008e88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008e8a:	e012      	b.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	3324      	adds	r3, #36	; 0x24
 8008e90:	2102      	movs	r1, #2
 8008e92:	4618      	mov	r0, r3
 8008e94:	f001 f8c4 	bl	800a020 <RCCEx_PLL3_Config>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008e9c:	e009      	b.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	75fb      	strb	r3, [r7, #23]
      break;
 8008ea2:	e006      	b.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008ea4:	bf00      	nop
 8008ea6:	e004      	b.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008ea8:	bf00      	nop
 8008eaa:	e002      	b.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008eac:	bf00      	nop
 8008eae:	e000      	b.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8008eb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008eb2:	7dfb      	ldrb	r3, [r7, #23]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10a      	bne.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008eb8:	4b41      	ldr	r3, [pc, #260]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ebc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ec6:	493e      	ldr	r1, [pc, #248]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	658b      	str	r3, [r1, #88]	; 0x58
 8008ecc:	e001      	b.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ece:	7dfb      	ldrb	r3, [r7, #23]
 8008ed0:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f003 0308 	and.w	r3, r3, #8
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d01a      	beq.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ee8:	d10a      	bne.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	3324      	adds	r3, #36	; 0x24
 8008eee:	2102      	movs	r1, #2
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f001 f895 	bl	800a020 <RCCEx_PLL3_Config>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d001      	beq.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008f00:	4b2f      	ldr	r3, [pc, #188]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f0e:	492c      	ldr	r1, [pc, #176]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008f10:	4313      	orrs	r3, r2
 8008f12:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f003 0310 	and.w	r3, r3, #16
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d01a      	beq.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f2a:	d10a      	bne.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	3324      	adds	r3, #36	; 0x24
 8008f30:	2102      	movs	r1, #2
 8008f32:	4618      	mov	r0, r3
 8008f34:	f001 f874 	bl	800a020 <RCCEx_PLL3_Config>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d001      	beq.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008f42:	4b1f      	ldr	r3, [pc, #124]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f50:	491b      	ldr	r1, [pc, #108]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008f52:	4313      	orrs	r3, r2
 8008f54:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d032      	beq.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f6c:	d00d      	beq.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8008f6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f72:	d016      	beq.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d111      	bne.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	3304      	adds	r3, #4
 8008f7c:	2100      	movs	r1, #0
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f000 ff9c 	bl	8009ebc <RCCEx_PLL2_Config>
 8008f84:	4603      	mov	r3, r0
 8008f86:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008f88:	e00c      	b.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	3324      	adds	r3, #36	; 0x24
 8008f8e:	2102      	movs	r1, #2
 8008f90:	4618      	mov	r0, r3
 8008f92:	f001 f845 	bl	800a020 <RCCEx_PLL3_Config>
 8008f96:	4603      	mov	r3, r0
 8008f98:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008f9a:	e003      	b.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	75fb      	strb	r3, [r7, #23]
      break;
 8008fa0:	e000      	b.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8008fa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fa4:	7dfb      	ldrb	r3, [r7, #23]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d10c      	bne.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008faa:	4b05      	ldr	r3, [pc, #20]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008fb8:	4901      	ldr	r1, [pc, #4]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	658b      	str	r3, [r1, #88]	; 0x58
 8008fbe:	e003      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8008fc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fc4:	7dfb      	ldrb	r3, [r7, #23]
 8008fc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d02f      	beq.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008fde:	d00c      	beq.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008fe0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008fe4:	d015      	beq.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8008fe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fea:	d10f      	bne.n	800900c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fec:	4b79      	ldr	r3, [pc, #484]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff0:	4a78      	ldr	r2, [pc, #480]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008ff2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ff6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008ff8:	e00c      	b.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	3324      	adds	r3, #36	; 0x24
 8008ffe:	2101      	movs	r1, #1
 8009000:	4618      	mov	r0, r3
 8009002:	f001 f80d 	bl	800a020 <RCCEx_PLL3_Config>
 8009006:	4603      	mov	r3, r0
 8009008:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800900a:	e003      	b.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	75fb      	strb	r3, [r7, #23]
      break;
 8009010:	e000      	b.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8009012:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009014:	7dfb      	ldrb	r3, [r7, #23]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d10a      	bne.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800901a:	4b6e      	ldr	r3, [pc, #440]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800901c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800901e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009028:	496a      	ldr	r1, [pc, #424]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800902a:	4313      	orrs	r3, r2
 800902c:	654b      	str	r3, [r1, #84]	; 0x54
 800902e:	e001      	b.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009030:	7dfb      	ldrb	r3, [r7, #23]
 8009032:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800903c:	2b00      	cmp	r3, #0
 800903e:	d029      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009044:	2b00      	cmp	r3, #0
 8009046:	d003      	beq.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8009048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800904c:	d007      	beq.n	800905e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800904e:	e00f      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009050:	4b60      	ldr	r3, [pc, #384]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009054:	4a5f      	ldr	r2, [pc, #380]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800905a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800905c:	e00b      	b.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	3304      	adds	r3, #4
 8009062:	2102      	movs	r1, #2
 8009064:	4618      	mov	r0, r3
 8009066:	f000 ff29 	bl	8009ebc <RCCEx_PLL2_Config>
 800906a:	4603      	mov	r3, r0
 800906c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800906e:	e002      	b.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	75fb      	strb	r3, [r7, #23]
      break;
 8009074:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009076:	7dfb      	ldrb	r3, [r7, #23]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d109      	bne.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800907c:	4b55      	ldr	r3, [pc, #340]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800907e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009080:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009088:	4952      	ldr	r1, [pc, #328]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800908a:	4313      	orrs	r3, r2
 800908c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800908e:	e001      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009090:	7dfb      	ldrb	r3, [r7, #23]
 8009092:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800909c:	2b00      	cmp	r3, #0
 800909e:	d00a      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	3324      	adds	r3, #36	; 0x24
 80090a4:	2102      	movs	r1, #2
 80090a6:	4618      	mov	r0, r3
 80090a8:	f000 ffba 	bl	800a020 <RCCEx_PLL3_Config>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d001      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d02f      	beq.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090ca:	d00c      	beq.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80090cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090d0:	d802      	bhi.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d011      	beq.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80090d6:	e00d      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80090d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090dc:	d00f      	beq.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80090de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090e2:	d00e      	beq.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80090e4:	e006      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090e6:	4b3b      	ldr	r3, [pc, #236]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80090e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ea:	4a3a      	ldr	r2, [pc, #232]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80090ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80090f2:	e007      	b.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	75fb      	strb	r3, [r7, #23]
      break;
 80090f8:	e004      	b.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80090fa:	bf00      	nop
 80090fc:	e002      	b.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80090fe:	bf00      	nop
 8009100:	e000      	b.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8009102:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009104:	7dfb      	ldrb	r3, [r7, #23]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d109      	bne.n	800911e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800910a:	4b32      	ldr	r3, [pc, #200]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800910c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800910e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009116:	492f      	ldr	r1, [pc, #188]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009118:	4313      	orrs	r3, r2
 800911a:	654b      	str	r3, [r1, #84]	; 0x54
 800911c:	e001      	b.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800911e:	7dfb      	ldrb	r3, [r7, #23]
 8009120:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800912a:	2b00      	cmp	r3, #0
 800912c:	d008      	beq.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800912e:	4b29      	ldr	r3, [pc, #164]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009132:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800913a:	4926      	ldr	r1, [pc, #152]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800913c:	4313      	orrs	r3, r2
 800913e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009148:	2b00      	cmp	r3, #0
 800914a:	d009      	beq.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800914c:	4b21      	ldr	r3, [pc, #132]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800914e:	691b      	ldr	r3, [r3, #16]
 8009150:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800915a:	491e      	ldr	r1, [pc, #120]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800915c:	4313      	orrs	r3, r2
 800915e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009168:	2b00      	cmp	r3, #0
 800916a:	d008      	beq.n	800917e <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800916c:	4b19      	ldr	r3, [pc, #100]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800916e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009170:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009178:	4916      	ldr	r1, [pc, #88]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800917a:	4313      	orrs	r3, r2
 800917c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009186:	2b00      	cmp	r3, #0
 8009188:	d00d      	beq.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800918a:	4b12      	ldr	r3, [pc, #72]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	4a11      	ldr	r2, [pc, #68]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009190:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009194:	6113      	str	r3, [r2, #16]
 8009196:	4b0f      	ldr	r3, [pc, #60]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009198:	691a      	ldr	r2, [r3, #16]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80091a0:	490c      	ldr	r1, [pc, #48]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80091a2:	4313      	orrs	r3, r2
 80091a4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	da08      	bge.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80091ae:	4b09      	ldr	r3, [pc, #36]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80091b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091ba:	4906      	ldr	r1, [pc, #24]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80091bc:	4313      	orrs	r3, r2
 80091be:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80091c0:	7dbb      	ldrb	r3, [r7, #22]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d101      	bne.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80091c6:	2300      	movs	r3, #0
 80091c8:	e000      	b.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3718      	adds	r7, #24
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	58024400 	.word	0x58024400

080091d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b090      	sub	sp, #64	; 0x40
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091e6:	d150      	bne.n	800928a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80091e8:	4ba1      	ldr	r3, [pc, #644]	; (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80091ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091ec:	f003 0307 	and.w	r3, r3, #7
 80091f0:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80091f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f4:	2b04      	cmp	r3, #4
 80091f6:	d844      	bhi.n	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80091f8:	a201      	add	r2, pc, #4	; (adr r2, 8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80091fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091fe:	bf00      	nop
 8009200:	08009215 	.word	0x08009215
 8009204:	08009225 	.word	0x08009225
 8009208:	08009235 	.word	0x08009235
 800920c:	0800927d 	.word	0x0800927d
 8009210:	08009245 	.word	0x08009245
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009218:	4618      	mov	r0, r3
 800921a:	f000 fd03 	bl	8009c24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800921e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009220:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009222:	e241      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009224:	f107 0318 	add.w	r3, r7, #24
 8009228:	4618      	mov	r0, r3
 800922a:	f000 fa63 	bl	80096f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009232:	e239      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009234:	f107 030c 	add.w	r3, r7, #12
 8009238:	4618      	mov	r0, r3
 800923a:	f000 fba7 	bl	800998c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009242:	e231      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009244:	4b8a      	ldr	r3, [pc, #552]	; (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009248:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800924c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800924e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009250:	2b00      	cmp	r3, #0
 8009252:	d102      	bne.n	800925a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009254:	4b87      	ldr	r3, [pc, #540]	; (8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009256:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009258:	e226      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800925a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800925c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009260:	d102      	bne.n	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8009262:	4b85      	ldr	r3, [pc, #532]	; (8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009264:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009266:	e21f      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800926a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800926e:	d102      	bne.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8009270:	4b82      	ldr	r3, [pc, #520]	; (800947c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009272:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009274:	e218      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009276:	2300      	movs	r3, #0
 8009278:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800927a:	e215      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800927c:	4b80      	ldr	r3, [pc, #512]	; (8009480 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800927e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009280:	e212      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8009282:	2300      	movs	r3, #0
 8009284:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009286:	bf00      	nop
 8009288:	e20e      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009290:	d14f      	bne.n	8009332 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8009292:	4b77      	ldr	r3, [pc, #476]	; (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009296:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800929a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800929c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929e:	2b80      	cmp	r3, #128	; 0x80
 80092a0:	d01c      	beq.n	80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80092a2:	2b80      	cmp	r3, #128	; 0x80
 80092a4:	d804      	bhi.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d008      	beq.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80092aa:	2b40      	cmp	r3, #64	; 0x40
 80092ac:	d00e      	beq.n	80092cc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80092ae:	e03c      	b.n	800932a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80092b0:	2bc0      	cmp	r3, #192	; 0xc0
 80092b2:	d037      	beq.n	8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80092b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092b8:	d018      	beq.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80092ba:	e036      	b.n	800932a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092c0:	4618      	mov	r0, r3
 80092c2:	f000 fcaf 	bl	8009c24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80092c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092ca:	e1ed      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092cc:	f107 0318 	add.w	r3, r7, #24
 80092d0:	4618      	mov	r0, r3
 80092d2:	f000 fa0f 	bl	80096f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092da:	e1e5      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092dc:	f107 030c 	add.w	r3, r7, #12
 80092e0:	4618      	mov	r0, r3
 80092e2:	f000 fb53 	bl	800998c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092ea:	e1dd      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80092ec:	4b60      	ldr	r3, [pc, #384]	; (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80092ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80092f4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80092f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d102      	bne.n	8009302 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80092fc:	4b5d      	ldr	r3, [pc, #372]	; (8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80092fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009300:	e1d2      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009304:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009308:	d102      	bne.n	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800930a:	4b5b      	ldr	r3, [pc, #364]	; (8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800930c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800930e:	e1cb      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009312:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009316:	d102      	bne.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8009318:	4b58      	ldr	r3, [pc, #352]	; (800947c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800931a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800931c:	e1c4      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800931e:	2300      	movs	r3, #0
 8009320:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009322:	e1c1      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009324:	4b56      	ldr	r3, [pc, #344]	; (8009480 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009326:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009328:	e1be      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800932a:	2300      	movs	r3, #0
 800932c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800932e:	bf00      	nop
 8009330:	e1ba      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009338:	d153      	bne.n	80093e2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800933a:	4b4d      	ldr	r3, [pc, #308]	; (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800933c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800933e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009342:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800934a:	d01f      	beq.n	800938c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800934c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009350:	d805      	bhi.n	800935e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8009352:	2b00      	cmp	r3, #0
 8009354:	d00a      	beq.n	800936c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8009356:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800935a:	d00f      	beq.n	800937c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800935c:	e03d      	b.n	80093da <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800935e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009362:	d037      	beq.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8009364:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009368:	d018      	beq.n	800939c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800936a:	e036      	b.n	80093da <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800936c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009370:	4618      	mov	r0, r3
 8009372:	f000 fc57 	bl	8009c24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009378:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800937a:	e195      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800937c:	f107 0318 	add.w	r3, r7, #24
 8009380:	4618      	mov	r0, r3
 8009382:	f000 f9b7 	bl	80096f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800938a:	e18d      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800938c:	f107 030c 	add.w	r3, r7, #12
 8009390:	4618      	mov	r0, r3
 8009392:	f000 fafb 	bl	800998c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800939a:	e185      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800939c:	4b34      	ldr	r3, [pc, #208]	; (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800939e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80093a4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80093a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d102      	bne.n	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80093ac:	4b31      	ldr	r3, [pc, #196]	; (8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80093ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80093b0:	e17a      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80093b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093b8:	d102      	bne.n	80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 80093ba:	4b2f      	ldr	r3, [pc, #188]	; (8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80093bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093be:	e173      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80093c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093c6:	d102      	bne.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 80093c8:	4b2c      	ldr	r3, [pc, #176]	; (800947c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80093ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093cc:	e16c      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80093ce:	2300      	movs	r3, #0
 80093d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093d2:	e169      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80093d4:	4b2a      	ldr	r3, [pc, #168]	; (8009480 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80093d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093d8:	e166      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80093da:	2300      	movs	r3, #0
 80093dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093de:	bf00      	nop
 80093e0:	e162      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093e8:	d15d      	bne.n	80094a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80093ea:	4b21      	ldr	r3, [pc, #132]	; (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80093ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093ee:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80093f2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80093f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093fa:	d01f      	beq.n	800943c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80093fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009400:	d805      	bhi.n	800940e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00a      	beq.n	800941c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8009406:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800940a:	d00f      	beq.n	800942c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800940c:	e047      	b.n	800949e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800940e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009412:	d041      	beq.n	8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8009414:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009418:	d018      	beq.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800941a:	e040      	b.n	800949e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800941c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009420:	4618      	mov	r0, r3
 8009422:	f000 fbff 	bl	8009c24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009428:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800942a:	e13d      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800942c:	f107 0318 	add.w	r3, r7, #24
 8009430:	4618      	mov	r0, r3
 8009432:	f000 f95f 	bl	80096f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800943a:	e135      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800943c:	f107 030c 	add.w	r3, r7, #12
 8009440:	4618      	mov	r0, r3
 8009442:	f000 faa3 	bl	800998c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800944a:	e12d      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800944c:	4b08      	ldr	r3, [pc, #32]	; (8009470 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800944e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009450:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009454:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8009456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009458:	2b00      	cmp	r3, #0
 800945a:	d102      	bne.n	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800945c:	4b05      	ldr	r3, [pc, #20]	; (8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800945e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009460:	e122      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009464:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009468:	d10c      	bne.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800946a:	4b03      	ldr	r3, [pc, #12]	; (8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800946c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800946e:	e11b      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8009470:	58024400 	.word	0x58024400
 8009474:	03d09000 	.word	0x03d09000
 8009478:	003d0900 	.word	0x003d0900
 800947c:	016e3600 	.word	0x016e3600
 8009480:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009486:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800948a:	d102      	bne.n	8009492 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 800948c:	4b89      	ldr	r3, [pc, #548]	; (80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800948e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009490:	e10a      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009492:	2300      	movs	r3, #0
 8009494:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009496:	e107      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009498:	4b87      	ldr	r3, [pc, #540]	; (80096b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800949a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800949c:	e104      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800949e:	2300      	movs	r3, #0
 80094a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094a2:	bf00      	nop
 80094a4:	e100      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094ac:	d153      	bne.n	8009556 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80094ae:	4b83      	ldr	r3, [pc, #524]	; (80096bc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80094b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094b2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80094b6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80094b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094be:	d01f      	beq.n	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80094c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094c4:	d805      	bhi.n	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d00a      	beq.n	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80094ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094ce:	d00f      	beq.n	80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80094d0:	e03d      	b.n	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80094d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80094d6:	d037      	beq.n	8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80094d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094dc:	d018      	beq.n	8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80094de:	e036      	b.n	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094e4:	4618      	mov	r0, r3
 80094e6:	f000 fb9d 	bl	8009c24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80094ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094ee:	e0db      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094f0:	f107 0318 	add.w	r3, r7, #24
 80094f4:	4618      	mov	r0, r3
 80094f6:	f000 f8fd 	bl	80096f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80094fa:	69bb      	ldr	r3, [r7, #24]
 80094fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094fe:	e0d3      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009500:	f107 030c 	add.w	r3, r7, #12
 8009504:	4618      	mov	r0, r3
 8009506:	f000 fa41 	bl	800998c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800950e:	e0cb      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009510:	4b6a      	ldr	r3, [pc, #424]	; (80096bc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009514:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009518:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800951a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800951c:	2b00      	cmp	r3, #0
 800951e:	d102      	bne.n	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009520:	4b67      	ldr	r3, [pc, #412]	; (80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8009522:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009524:	e0c0      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009528:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800952c:	d102      	bne.n	8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800952e:	4b65      	ldr	r3, [pc, #404]	; (80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009530:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009532:	e0b9      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009536:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800953a:	d102      	bne.n	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800953c:	4b5d      	ldr	r3, [pc, #372]	; (80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800953e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009540:	e0b2      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009542:	2300      	movs	r3, #0
 8009544:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009546:	e0af      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009548:	4b5b      	ldr	r3, [pc, #364]	; (80096b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800954a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800954c:	e0ac      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800954e:	2300      	movs	r3, #0
 8009550:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009552:	bf00      	nop
 8009554:	e0a8      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800955c:	d13d      	bne.n	80095da <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800955e:	4b57      	ldr	r3, [pc, #348]	; (80096bc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009562:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009566:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800956e:	d00c      	beq.n	800958a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009570:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009574:	d011      	beq.n	800959a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009576:	2b00      	cmp	r3, #0
 8009578:	d12b      	bne.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800957a:	f107 0318 	add.w	r3, r7, #24
 800957e:	4618      	mov	r0, r3
 8009580:	f000 f8b8 	bl	80096f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009584:	69bb      	ldr	r3, [r7, #24]
 8009586:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009588:	e08e      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800958a:	f107 030c 	add.w	r3, r7, #12
 800958e:	4618      	mov	r0, r3
 8009590:	f000 f9fc 	bl	800998c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009598:	e086      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800959a:	4b48      	ldr	r3, [pc, #288]	; (80096bc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800959c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800959e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80095a2:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80095a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d102      	bne.n	80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80095aa:	4b45      	ldr	r3, [pc, #276]	; (80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80095ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80095ae:	e07b      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80095b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095b6:	d102      	bne.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 80095b8:	4b42      	ldr	r3, [pc, #264]	; (80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80095ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095bc:	e074      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80095be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095c4:	d102      	bne.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80095c6:	4b3b      	ldr	r3, [pc, #236]	; (80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80095c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095ca:	e06d      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80095cc:	2300      	movs	r3, #0
 80095ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095d0:	e06a      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80095d2:	2300      	movs	r3, #0
 80095d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095d6:	bf00      	nop
 80095d8:	e066      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095e0:	d11f      	bne.n	8009622 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80095e2:	4b36      	ldr	r3, [pc, #216]	; (80096bc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80095e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095ea:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80095ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d003      	beq.n	80095fa <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80095f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095f6:	d008      	beq.n	800960a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80095f8:	e00f      	b.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095fe:	4618      	mov	r0, r3
 8009600:	f000 fb10 	bl	8009c24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009606:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009608:	e04e      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800960a:	f107 0318 	add.w	r3, r7, #24
 800960e:	4618      	mov	r0, r3
 8009610:	f000 f870 	bl	80096f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009614:	6a3b      	ldr	r3, [r7, #32]
 8009616:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009618:	e046      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800961a:	2300      	movs	r3, #0
 800961c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800961e:	bf00      	nop
 8009620:	e042      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009628:	d13c      	bne.n	80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800962a:	4b24      	ldr	r3, [pc, #144]	; (80096bc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800962c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800962e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009632:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009636:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800963a:	d01e      	beq.n	800967a <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800963c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009640:	d805      	bhi.n	800964e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8009642:	2b00      	cmp	r3, #0
 8009644:	d00d      	beq.n	8009662 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8009646:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800964a:	d00e      	beq.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800964c:	e026      	b.n	800969c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800964e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009652:	d01d      	beq.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8009654:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009658:	d01d      	beq.n	8009696 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800965a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800965e:	d014      	beq.n	800968a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8009660:	e01c      	b.n	800969c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009662:	f000 f831 	bl	80096c8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009666:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8009668:	e01e      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800966a:	f107 0318 	add.w	r3, r7, #24
 800966e:	4618      	mov	r0, r3
 8009670:	f000 f840 	bl	80096f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009678:	e016      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800967a:	f107 030c 	add.w	r3, r7, #12
 800967e:	4618      	mov	r0, r3
 8009680:	f000 f984 	bl	800998c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009688:	e00e      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800968a:	4b0d      	ldr	r3, [pc, #52]	; (80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800968c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800968e:	e00b      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8009690:	4b0c      	ldr	r3, [pc, #48]	; (80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009692:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009694:	e008      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8009696:	4b07      	ldr	r3, [pc, #28]	; (80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8009698:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800969a:	e005      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800969c:	2300      	movs	r3, #0
 800969e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096a0:	bf00      	nop
 80096a2:	e001      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 80096a4:	2300      	movs	r3, #0
 80096a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80096a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3740      	adds	r7, #64	; 0x40
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	016e3600 	.word	0x016e3600
 80096b8:	00bb8000 	.word	0x00bb8000
 80096bc:	58024400 	.word	0x58024400
 80096c0:	03d09000 	.word	0x03d09000
 80096c4:	003d0900 	.word	0x003d0900

080096c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80096cc:	f7fe fe3a 	bl	8008344 <HAL_RCC_GetHCLKFreq>
 80096d0:	4601      	mov	r1, r0
 80096d2:	4b06      	ldr	r3, [pc, #24]	; (80096ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80096d4:	6a1b      	ldr	r3, [r3, #32]
 80096d6:	091b      	lsrs	r3, r3, #4
 80096d8:	f003 0307 	and.w	r3, r3, #7
 80096dc:	4a04      	ldr	r2, [pc, #16]	; (80096f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80096de:	5cd3      	ldrb	r3, [r2, r3]
 80096e0:	f003 031f 	and.w	r3, r3, #31
 80096e4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	58024400 	.word	0x58024400
 80096f0:	0800e720 	.word	0x0800e720

080096f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b089      	sub	sp, #36	; 0x24
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80096fc:	4b9d      	ldr	r3, [pc, #628]	; (8009974 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80096fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009700:	f003 0303 	and.w	r3, r3, #3
 8009704:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009706:	4b9b      	ldr	r3, [pc, #620]	; (8009974 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800970a:	0b1b      	lsrs	r3, r3, #12
 800970c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009710:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009712:	4b98      	ldr	r3, [pc, #608]	; (8009974 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009716:	091b      	lsrs	r3, r3, #4
 8009718:	f003 0301 	and.w	r3, r3, #1
 800971c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800971e:	4b95      	ldr	r3, [pc, #596]	; (8009974 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009722:	08db      	lsrs	r3, r3, #3
 8009724:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009728:	693a      	ldr	r2, [r7, #16]
 800972a:	fb02 f303 	mul.w	r3, r2, r3
 800972e:	ee07 3a90 	vmov	s15, r3
 8009732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009736:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	2b00      	cmp	r3, #0
 800973e:	f000 810a 	beq.w	8009956 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	2b01      	cmp	r3, #1
 8009746:	d05a      	beq.n	80097fe <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8009748:	2b01      	cmp	r3, #1
 800974a:	d302      	bcc.n	8009752 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800974c:	2b02      	cmp	r3, #2
 800974e:	d078      	beq.n	8009842 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8009750:	e099      	b.n	8009886 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009752:	4b88      	ldr	r3, [pc, #544]	; (8009974 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f003 0320 	and.w	r3, r3, #32
 800975a:	2b00      	cmp	r3, #0
 800975c:	d02d      	beq.n	80097ba <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800975e:	4b85      	ldr	r3, [pc, #532]	; (8009974 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	08db      	lsrs	r3, r3, #3
 8009764:	f003 0303 	and.w	r3, r3, #3
 8009768:	4a83      	ldr	r2, [pc, #524]	; (8009978 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800976a:	fa22 f303 	lsr.w	r3, r2, r3
 800976e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	ee07 3a90 	vmov	s15, r3
 8009776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	ee07 3a90 	vmov	s15, r3
 8009780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009784:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009788:	4b7a      	ldr	r3, [pc, #488]	; (8009974 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800978a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800978c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009790:	ee07 3a90 	vmov	s15, r3
 8009794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009798:	ed97 6a03 	vldr	s12, [r7, #12]
 800979c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800997c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80097a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097b4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80097b8:	e087      	b.n	80098ca <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	ee07 3a90 	vmov	s15, r3
 80097c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097c4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009980 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80097c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097cc:	4b69      	ldr	r3, [pc, #420]	; (8009974 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80097ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097d4:	ee07 3a90 	vmov	s15, r3
 80097d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80097e0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800997c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80097e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80097fc:	e065      	b.n	80098ca <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	ee07 3a90 	vmov	s15, r3
 8009804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009808:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009984 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800980c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009810:	4b58      	ldr	r3, [pc, #352]	; (8009974 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009818:	ee07 3a90 	vmov	s15, r3
 800981c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009820:	ed97 6a03 	vldr	s12, [r7, #12]
 8009824:	eddf 5a55 	vldr	s11, [pc, #340]	; 800997c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009828:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800982c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009830:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009834:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800983c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009840:	e043      	b.n	80098ca <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	ee07 3a90 	vmov	s15, r3
 8009848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800984c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009988 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8009850:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009854:	4b47      	ldr	r3, [pc, #284]	; (8009974 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800985c:	ee07 3a90 	vmov	s15, r3
 8009860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009864:	ed97 6a03 	vldr	s12, [r7, #12]
 8009868:	eddf 5a44 	vldr	s11, [pc, #272]	; 800997c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800986c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009870:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009874:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009878:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800987c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009880:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009884:	e021      	b.n	80098ca <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	ee07 3a90 	vmov	s15, r3
 800988c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009890:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8009984 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8009894:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009898:	4b36      	ldr	r3, [pc, #216]	; (8009974 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800989a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800989c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098a0:	ee07 3a90 	vmov	s15, r3
 80098a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80098ac:	eddf 5a33 	vldr	s11, [pc, #204]	; 800997c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80098b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098c8:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80098ca:	4b2a      	ldr	r3, [pc, #168]	; (8009974 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80098cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ce:	0a5b      	lsrs	r3, r3, #9
 80098d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098d4:	ee07 3a90 	vmov	s15, r3
 80098d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80098e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098f0:	ee17 2a90 	vmov	r2, s15
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80098f8:	4b1e      	ldr	r3, [pc, #120]	; (8009974 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80098fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098fc:	0c1b      	lsrs	r3, r3, #16
 80098fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009902:	ee07 3a90 	vmov	s15, r3
 8009906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800990a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800990e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009912:	edd7 6a07 	vldr	s13, [r7, #28]
 8009916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800991a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800991e:	ee17 2a90 	vmov	r2, s15
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009926:	4b13      	ldr	r3, [pc, #76]	; (8009974 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800992a:	0e1b      	lsrs	r3, r3, #24
 800992c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009930:	ee07 3a90 	vmov	s15, r3
 8009934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009938:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800993c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009940:	edd7 6a07 	vldr	s13, [r7, #28]
 8009944:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800994c:	ee17 2a90 	vmov	r2, s15
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009954:	e008      	b.n	8009968 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	609a      	str	r2, [r3, #8]
}
 8009968:	bf00      	nop
 800996a:	3724      	adds	r7, #36	; 0x24
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr
 8009974:	58024400 	.word	0x58024400
 8009978:	03d09000 	.word	0x03d09000
 800997c:	46000000 	.word	0x46000000
 8009980:	4c742400 	.word	0x4c742400
 8009984:	4a742400 	.word	0x4a742400
 8009988:	4bb71b00 	.word	0x4bb71b00

0800998c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800998c:	b480      	push	{r7}
 800998e:	b089      	sub	sp, #36	; 0x24
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009994:	4b9d      	ldr	r3, [pc, #628]	; (8009c0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009998:	f003 0303 	and.w	r3, r3, #3
 800999c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800999e:	4b9b      	ldr	r3, [pc, #620]	; (8009c0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80099a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099a2:	0d1b      	lsrs	r3, r3, #20
 80099a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80099aa:	4b98      	ldr	r3, [pc, #608]	; (8009c0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80099ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ae:	0a1b      	lsrs	r3, r3, #8
 80099b0:	f003 0301 	and.w	r3, r3, #1
 80099b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80099b6:	4b95      	ldr	r3, [pc, #596]	; (8009c0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80099b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099ba:	08db      	lsrs	r3, r3, #3
 80099bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80099c0:	693a      	ldr	r2, [r7, #16]
 80099c2:	fb02 f303 	mul.w	r3, r2, r3
 80099c6:	ee07 3a90 	vmov	s15, r3
 80099ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	f000 810a 	beq.w	8009bee <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d05a      	beq.n	8009a96 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d302      	bcc.n	80099ea <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80099e4:	2b02      	cmp	r3, #2
 80099e6:	d078      	beq.n	8009ada <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80099e8:	e099      	b.n	8009b1e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099ea:	4b88      	ldr	r3, [pc, #544]	; (8009c0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f003 0320 	and.w	r3, r3, #32
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d02d      	beq.n	8009a52 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80099f6:	4b85      	ldr	r3, [pc, #532]	; (8009c0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	08db      	lsrs	r3, r3, #3
 80099fc:	f003 0303 	and.w	r3, r3, #3
 8009a00:	4a83      	ldr	r2, [pc, #524]	; (8009c10 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8009a02:	fa22 f303 	lsr.w	r3, r2, r3
 8009a06:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	ee07 3a90 	vmov	s15, r3
 8009a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	ee07 3a90 	vmov	s15, r3
 8009a18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a20:	4b7a      	ldr	r3, [pc, #488]	; (8009c0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a28:	ee07 3a90 	vmov	s15, r3
 8009a2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a30:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a34:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009c14 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009a38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a4c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009a50:	e087      	b.n	8009b62 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	ee07 3a90 	vmov	s15, r3
 8009a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a5c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009c18 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8009a60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a64:	4b69      	ldr	r3, [pc, #420]	; (8009c0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a6c:	ee07 3a90 	vmov	s15, r3
 8009a70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a74:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a78:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009c14 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009a7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a90:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a94:	e065      	b.n	8009b62 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	ee07 3a90 	vmov	s15, r3
 8009a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aa0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8009aa4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aa8:	4b58      	ldr	r3, [pc, #352]	; (8009c0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ab0:	ee07 3a90 	vmov	s15, r3
 8009ab4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ab8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009abc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009c14 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009ac0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ac4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ac8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009acc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ad4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ad8:	e043      	b.n	8009b62 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	ee07 3a90 	vmov	s15, r3
 8009ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ae4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009c20 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8009ae8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aec:	4b47      	ldr	r3, [pc, #284]	; (8009c0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009af4:	ee07 3a90 	vmov	s15, r3
 8009af8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009afc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b00:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009c14 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009b04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b1c:	e021      	b.n	8009b62 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	ee07 3a90 	vmov	s15, r3
 8009b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b28:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8009c1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8009b2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b30:	4b36      	ldr	r3, [pc, #216]	; (8009c0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b38:	ee07 3a90 	vmov	s15, r3
 8009b3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b40:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b44:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009c14 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009b48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b60:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009b62:	4b2a      	ldr	r3, [pc, #168]	; (8009c0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b66:	0a5b      	lsrs	r3, r3, #9
 8009b68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b6c:	ee07 3a90 	vmov	s15, r3
 8009b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b88:	ee17 2a90 	vmov	r2, s15
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009b90:	4b1e      	ldr	r3, [pc, #120]	; (8009c0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b94:	0c1b      	lsrs	r3, r3, #16
 8009b96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b9a:	ee07 3a90 	vmov	s15, r3
 8009b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ba2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ba6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009baa:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bb6:	ee17 2a90 	vmov	r2, s15
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009bbe:	4b13      	ldr	r3, [pc, #76]	; (8009c0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bc2:	0e1b      	lsrs	r3, r3, #24
 8009bc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bc8:	ee07 3a90 	vmov	s15, r3
 8009bcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009bd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009be0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009be4:	ee17 2a90 	vmov	r2, s15
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009bec:	e008      	b.n	8009c00 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	609a      	str	r2, [r3, #8]
}
 8009c00:	bf00      	nop
 8009c02:	3724      	adds	r7, #36	; 0x24
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr
 8009c0c:	58024400 	.word	0x58024400
 8009c10:	03d09000 	.word	0x03d09000
 8009c14:	46000000 	.word	0x46000000
 8009c18:	4c742400 	.word	0x4c742400
 8009c1c:	4a742400 	.word	0x4a742400
 8009c20:	4bb71b00 	.word	0x4bb71b00

08009c24 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b089      	sub	sp, #36	; 0x24
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c2c:	4b9d      	ldr	r3, [pc, #628]	; (8009ea4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c30:	f003 0303 	and.w	r3, r3, #3
 8009c34:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009c36:	4b9b      	ldr	r3, [pc, #620]	; (8009ea4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c3a:	091b      	lsrs	r3, r3, #4
 8009c3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c40:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009c42:	4b98      	ldr	r3, [pc, #608]	; (8009ea4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c46:	f003 0301 	and.w	r3, r3, #1
 8009c4a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009c4c:	4b95      	ldr	r3, [pc, #596]	; (8009ea4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c50:	08db      	lsrs	r3, r3, #3
 8009c52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c56:	693a      	ldr	r2, [r7, #16]
 8009c58:	fb02 f303 	mul.w	r3, r2, r3
 8009c5c:	ee07 3a90 	vmov	s15, r3
 8009c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c64:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	f000 810a 	beq.w	8009e84 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8009c70:	69bb      	ldr	r3, [r7, #24]
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d05a      	beq.n	8009d2c <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	d302      	bcc.n	8009c80 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8009c7a:	2b02      	cmp	r3, #2
 8009c7c:	d078      	beq.n	8009d70 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8009c7e:	e099      	b.n	8009db4 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c80:	4b88      	ldr	r3, [pc, #544]	; (8009ea4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 0320 	and.w	r3, r3, #32
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d02d      	beq.n	8009ce8 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c8c:	4b85      	ldr	r3, [pc, #532]	; (8009ea4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	08db      	lsrs	r3, r3, #3
 8009c92:	f003 0303 	and.w	r3, r3, #3
 8009c96:	4a84      	ldr	r2, [pc, #528]	; (8009ea8 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8009c98:	fa22 f303 	lsr.w	r3, r2, r3
 8009c9c:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	ee07 3a90 	vmov	s15, r3
 8009ca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	ee07 3a90 	vmov	s15, r3
 8009cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cb6:	4b7b      	ldr	r3, [pc, #492]	; (8009ea4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cbe:	ee07 3a90 	vmov	s15, r3
 8009cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cca:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009eac <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ce2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009ce6:	e087      	b.n	8009df8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	ee07 3a90 	vmov	s15, r3
 8009cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cf2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009eb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8009cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cfa:	4b6a      	ldr	r3, [pc, #424]	; (8009ea4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d02:	ee07 3a90 	vmov	s15, r3
 8009d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d0e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009eac <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d2a:	e065      	b.n	8009df8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	ee07 3a90 	vmov	s15, r3
 8009d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d36:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8009d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d3e:	4b59      	ldr	r3, [pc, #356]	; (8009ea4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d46:	ee07 3a90 	vmov	s15, r3
 8009d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d52:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009eac <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d6e:	e043      	b.n	8009df8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	ee07 3a90 	vmov	s15, r3
 8009d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d7a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009eb8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d82:	4b48      	ldr	r3, [pc, #288]	; (8009ea4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d8a:	ee07 3a90 	vmov	s15, r3
 8009d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d92:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d96:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009eac <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009da2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009db2:	e021      	b.n	8009df8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	ee07 3a90 	vmov	s15, r3
 8009dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dbe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8009dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dc6:	4b37      	ldr	r3, [pc, #220]	; (8009ea4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dce:	ee07 3a90 	vmov	s15, r3
 8009dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dda:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009eac <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8009dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009de6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009df2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009df6:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009df8:	4b2a      	ldr	r3, [pc, #168]	; (8009ea4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dfc:	0a5b      	lsrs	r3, r3, #9
 8009dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e02:	ee07 3a90 	vmov	s15, r3
 8009e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e12:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e1e:	ee17 2a90 	vmov	r2, s15
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009e26:	4b1f      	ldr	r3, [pc, #124]	; (8009ea4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e2a:	0c1b      	lsrs	r3, r3, #16
 8009e2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e30:	ee07 3a90 	vmov	s15, r3
 8009e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e40:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e4c:	ee17 2a90 	vmov	r2, s15
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009e54:	4b13      	ldr	r3, [pc, #76]	; (8009ea4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e58:	0e1b      	lsrs	r3, r3, #24
 8009e5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e5e:	ee07 3a90 	vmov	s15, r3
 8009e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e7a:	ee17 2a90 	vmov	r2, s15
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009e82:	e008      	b.n	8009e96 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2200      	movs	r2, #0
 8009e94:	609a      	str	r2, [r3, #8]
}
 8009e96:	bf00      	nop
 8009e98:	3724      	adds	r7, #36	; 0x24
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr
 8009ea2:	bf00      	nop
 8009ea4:	58024400 	.word	0x58024400
 8009ea8:	03d09000 	.word	0x03d09000
 8009eac:	46000000 	.word	0x46000000
 8009eb0:	4c742400 	.word	0x4c742400
 8009eb4:	4a742400 	.word	0x4a742400
 8009eb8:	4bb71b00 	.word	0x4bb71b00

08009ebc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009eca:	4b53      	ldr	r3, [pc, #332]	; (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ece:	f003 0303 	and.w	r3, r3, #3
 8009ed2:	2b03      	cmp	r3, #3
 8009ed4:	d101      	bne.n	8009eda <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e099      	b.n	800a00e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009eda:	4b4f      	ldr	r3, [pc, #316]	; (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a4e      	ldr	r2, [pc, #312]	; (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009ee0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009ee4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ee6:	f7f9 fc5f 	bl	80037a8 <HAL_GetTick>
 8009eea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009eec:	e008      	b.n	8009f00 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009eee:	f7f9 fc5b 	bl	80037a8 <HAL_GetTick>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	1ad3      	subs	r3, r2, r3
 8009ef8:	2b02      	cmp	r3, #2
 8009efa:	d901      	bls.n	8009f00 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009efc:	2303      	movs	r3, #3
 8009efe:	e086      	b.n	800a00e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009f00:	4b45      	ldr	r3, [pc, #276]	; (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d1f0      	bne.n	8009eee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009f0c:	4b42      	ldr	r3, [pc, #264]	; (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f10:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	031b      	lsls	r3, r3, #12
 8009f1a:	493f      	ldr	r1, [pc, #252]	; (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	628b      	str	r3, [r1, #40]	; 0x28
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	3b01      	subs	r3, #1
 8009f26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	3b01      	subs	r3, #1
 8009f30:	025b      	lsls	r3, r3, #9
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	431a      	orrs	r2, r3
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	68db      	ldr	r3, [r3, #12]
 8009f3a:	3b01      	subs	r3, #1
 8009f3c:	041b      	lsls	r3, r3, #16
 8009f3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009f42:	431a      	orrs	r2, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	691b      	ldr	r3, [r3, #16]
 8009f48:	3b01      	subs	r3, #1
 8009f4a:	061b      	lsls	r3, r3, #24
 8009f4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009f50:	4931      	ldr	r1, [pc, #196]	; (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009f52:	4313      	orrs	r3, r2
 8009f54:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009f56:	4b30      	ldr	r3, [pc, #192]	; (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	695b      	ldr	r3, [r3, #20]
 8009f62:	492d      	ldr	r1, [pc, #180]	; (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009f64:	4313      	orrs	r3, r2
 8009f66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009f68:	4b2b      	ldr	r3, [pc, #172]	; (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f6c:	f023 0220 	bic.w	r2, r3, #32
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	699b      	ldr	r3, [r3, #24]
 8009f74:	4928      	ldr	r1, [pc, #160]	; (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009f76:	4313      	orrs	r3, r2
 8009f78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009f7a:	4b27      	ldr	r3, [pc, #156]	; (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f7e:	4a26      	ldr	r2, [pc, #152]	; (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009f80:	f023 0310 	bic.w	r3, r3, #16
 8009f84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009f86:	4b24      	ldr	r3, [pc, #144]	; (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009f88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f8a:	4b24      	ldr	r3, [pc, #144]	; (800a01c <RCCEx_PLL2_Config+0x160>)
 8009f8c:	4013      	ands	r3, r2
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	69d2      	ldr	r2, [r2, #28]
 8009f92:	00d2      	lsls	r2, r2, #3
 8009f94:	4920      	ldr	r1, [pc, #128]	; (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009f96:	4313      	orrs	r3, r2
 8009f98:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009f9a:	4b1f      	ldr	r3, [pc, #124]	; (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f9e:	4a1e      	ldr	r2, [pc, #120]	; (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009fa0:	f043 0310 	orr.w	r3, r3, #16
 8009fa4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d106      	bne.n	8009fba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009fac:	4b1a      	ldr	r3, [pc, #104]	; (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb0:	4a19      	ldr	r2, [pc, #100]	; (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009fb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009fb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009fb8:	e00f      	b.n	8009fda <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d106      	bne.n	8009fce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009fc0:	4b15      	ldr	r3, [pc, #84]	; (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc4:	4a14      	ldr	r2, [pc, #80]	; (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009fc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009fca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009fcc:	e005      	b.n	8009fda <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009fce:	4b12      	ldr	r3, [pc, #72]	; (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd2:	4a11      	ldr	r2, [pc, #68]	; (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009fd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009fd8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009fda:	4b0f      	ldr	r3, [pc, #60]	; (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a0e      	ldr	r2, [pc, #56]	; (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009fe0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009fe4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fe6:	f7f9 fbdf 	bl	80037a8 <HAL_GetTick>
 8009fea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009fec:	e008      	b.n	800a000 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009fee:	f7f9 fbdb 	bl	80037a8 <HAL_GetTick>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	1ad3      	subs	r3, r2, r3
 8009ff8:	2b02      	cmp	r3, #2
 8009ffa:	d901      	bls.n	800a000 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ffc:	2303      	movs	r3, #3
 8009ffe:	e006      	b.n	800a00e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a000:	4b05      	ldr	r3, [pc, #20]	; (800a018 <RCCEx_PLL2_Config+0x15c>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d0f0      	beq.n	8009fee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a00c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	58024400 	.word	0x58024400
 800a01c:	ffff0007 	.word	0xffff0007

0800a020 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a02a:	2300      	movs	r3, #0
 800a02c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a02e:	4b53      	ldr	r3, [pc, #332]	; (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a032:	f003 0303 	and.w	r3, r3, #3
 800a036:	2b03      	cmp	r3, #3
 800a038:	d101      	bne.n	800a03e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a03a:	2301      	movs	r3, #1
 800a03c:	e099      	b.n	800a172 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a03e:	4b4f      	ldr	r3, [pc, #316]	; (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4a4e      	ldr	r2, [pc, #312]	; (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a044:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a048:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a04a:	f7f9 fbad 	bl	80037a8 <HAL_GetTick>
 800a04e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a050:	e008      	b.n	800a064 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a052:	f7f9 fba9 	bl	80037a8 <HAL_GetTick>
 800a056:	4602      	mov	r2, r0
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	1ad3      	subs	r3, r2, r3
 800a05c:	2b02      	cmp	r3, #2
 800a05e:	d901      	bls.n	800a064 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a060:	2303      	movs	r3, #3
 800a062:	e086      	b.n	800a172 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a064:	4b45      	ldr	r3, [pc, #276]	; (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d1f0      	bne.n	800a052 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a070:	4b42      	ldr	r3, [pc, #264]	; (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a074:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	051b      	lsls	r3, r3, #20
 800a07e:	493f      	ldr	r1, [pc, #252]	; (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a080:	4313      	orrs	r3, r2
 800a082:	628b      	str	r3, [r1, #40]	; 0x28
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	3b01      	subs	r3, #1
 800a08a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	689b      	ldr	r3, [r3, #8]
 800a092:	3b01      	subs	r3, #1
 800a094:	025b      	lsls	r3, r3, #9
 800a096:	b29b      	uxth	r3, r3
 800a098:	431a      	orrs	r2, r3
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	3b01      	subs	r3, #1
 800a0a0:	041b      	lsls	r3, r3, #16
 800a0a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a0a6:	431a      	orrs	r2, r3
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	691b      	ldr	r3, [r3, #16]
 800a0ac:	3b01      	subs	r3, #1
 800a0ae:	061b      	lsls	r3, r3, #24
 800a0b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a0b4:	4931      	ldr	r1, [pc, #196]	; (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a0ba:	4b30      	ldr	r3, [pc, #192]	; (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	695b      	ldr	r3, [r3, #20]
 800a0c6:	492d      	ldr	r1, [pc, #180]	; (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a0cc:	4b2b      	ldr	r3, [pc, #172]	; (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	699b      	ldr	r3, [r3, #24]
 800a0d8:	4928      	ldr	r1, [pc, #160]	; (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a0de:	4b27      	ldr	r3, [pc, #156]	; (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a0e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e2:	4a26      	ldr	r2, [pc, #152]	; (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a0e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a0ea:	4b24      	ldr	r3, [pc, #144]	; (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a0ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0ee:	4b24      	ldr	r3, [pc, #144]	; (800a180 <RCCEx_PLL3_Config+0x160>)
 800a0f0:	4013      	ands	r3, r2
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	69d2      	ldr	r2, [r2, #28]
 800a0f6:	00d2      	lsls	r2, r2, #3
 800a0f8:	4920      	ldr	r1, [pc, #128]	; (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a0fe:	4b1f      	ldr	r3, [pc, #124]	; (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a102:	4a1e      	ldr	r2, [pc, #120]	; (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a108:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d106      	bne.n	800a11e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a110:	4b1a      	ldr	r3, [pc, #104]	; (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a114:	4a19      	ldr	r2, [pc, #100]	; (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a116:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a11a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a11c:	e00f      	b.n	800a13e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	2b01      	cmp	r3, #1
 800a122:	d106      	bne.n	800a132 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a124:	4b15      	ldr	r3, [pc, #84]	; (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a128:	4a14      	ldr	r2, [pc, #80]	; (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a12a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a12e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a130:	e005      	b.n	800a13e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a132:	4b12      	ldr	r3, [pc, #72]	; (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a136:	4a11      	ldr	r2, [pc, #68]	; (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a138:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a13c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a13e:	4b0f      	ldr	r3, [pc, #60]	; (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4a0e      	ldr	r2, [pc, #56]	; (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a148:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a14a:	f7f9 fb2d 	bl	80037a8 <HAL_GetTick>
 800a14e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a150:	e008      	b.n	800a164 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a152:	f7f9 fb29 	bl	80037a8 <HAL_GetTick>
 800a156:	4602      	mov	r2, r0
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	1ad3      	subs	r3, r2, r3
 800a15c:	2b02      	cmp	r3, #2
 800a15e:	d901      	bls.n	800a164 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a160:	2303      	movs	r3, #3
 800a162:	e006      	b.n	800a172 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a164:	4b05      	ldr	r3, [pc, #20]	; (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d0f0      	beq.n	800a152 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a170:	7bfb      	ldrb	r3, [r7, #15]
}
 800a172:	4618      	mov	r0, r3
 800a174:	3710      	adds	r7, #16
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
 800a17a:	bf00      	nop
 800a17c:	58024400 	.word	0x58024400
 800a180:	ffff0007 	.word	0xffff0007

0800a184 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b08a      	sub	sp, #40	; 0x28
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d101      	bne.n	800a196 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a192:	2301      	movs	r3, #1
 800a194:	e07c      	b.n	800a290 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a19c:	b2db      	uxtb	r3, r3
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d10c      	bne.n	800a1bc <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	699b      	ldr	r3, [r3, #24]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d102      	bne.n	800a1b6 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2202      	movs	r2, #2
 800a1b4:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f7f8 fd26 	bl	8002c08 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2203      	movs	r2, #3
 800a1c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 f867 	bl	800a298 <HAL_SD_InitCard>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d001      	beq.n	800a1d4 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e05d      	b.n	800a290 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800a1d4:	f107 0308 	add.w	r3, r7, #8
 800a1d8:	4619      	mov	r1, r3
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f000 faa6 	bl	800a72c <HAL_SD_GetCardStatus>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d001      	beq.n	800a1ea <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e052      	b.n	800a290 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800a1ea:	7e3b      	ldrb	r3, [r7, #24]
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a1f0:	7e7b      	ldrb	r3, [r7, #25]
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d10a      	bne.n	800a214 <HAL_SD_Init+0x90>
 800a1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a200:	2b00      	cmp	r3, #0
 800a202:	d102      	bne.n	800a20a <HAL_SD_Init+0x86>
 800a204:	6a3b      	ldr	r3, [r7, #32]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d004      	beq.n	800a214 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a210:	65da      	str	r2, [r3, #92]	; 0x5c
 800a212:	e00b      	b.n	800a22c <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d104      	bne.n	800a226 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a222:	65da      	str	r2, [r3, #92]	; 0x5c
 800a224:	e002      	b.n	800a22c <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2200      	movs	r2, #0
 800a22a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	4619      	mov	r1, r3
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 fb30 	bl	800a898 <HAL_SD_ConfigWideBusOperation>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d001      	beq.n	800a242 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800a23e:	2301      	movs	r3, #1
 800a240:	e026      	b.n	800a290 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800a242:	f7f9 fab1 	bl	80037a8 <HAL_GetTick>
 800a246:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a248:	e011      	b.n	800a26e <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800a24a:	f7f9 faad 	bl	80037a8 <HAL_GetTick>
 800a24e:	4602      	mov	r2, r0
 800a250:	69fb      	ldr	r3, [r7, #28]
 800a252:	1ad3      	subs	r3, r2, r3
 800a254:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a258:	d109      	bne.n	800a26e <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a260:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2201      	movs	r2, #1
 800a266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800a26a:	2303      	movs	r3, #3
 800a26c:	e010      	b.n	800a290 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 fbbc 	bl	800a9ec <HAL_SD_GetCardState>
 800a274:	4603      	mov	r3, r0
 800a276:	2b04      	cmp	r3, #4
 800a278:	d1e7      	bne.n	800a24a <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2200      	movs	r2, #0
 800a27e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2200      	movs	r2, #0
 800a284:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2201      	movs	r2, #1
 800a28a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a28e:	2300      	movs	r3, #0
}
 800a290:	4618      	mov	r0, r3
 800a292:	3728      	adds	r7, #40	; 0x28
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a298:	b5b0      	push	{r4, r5, r7, lr}
 800a29a:	b08e      	sub	sp, #56	; 0x38
 800a29c:	af04      	add	r7, sp, #16
 800a29e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a2b0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a2b4:	f7fe ff90 	bl	80091d8 <HAL_RCCEx_GetPeriphCLKFreq>
 800a2b8:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800a2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2bc:	0a1b      	lsrs	r3, r3, #8
 800a2be:	4a40      	ldr	r2, [pc, #256]	; (800a3c0 <HAL_SD_InitCard+0x128>)
 800a2c0:	fba2 2303 	umull	r2, r3, r2, r3
 800a2c4:	091b      	lsrs	r3, r3, #4
 800a2c6:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	699b      	ldr	r3, [r3, #24]
 800a2cc:	2b02      	cmp	r3, #2
 800a2ce:	d107      	bne.n	800a2e0 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f042 0210 	orr.w	r2, r2, #16
 800a2de:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681d      	ldr	r5, [r3, #0]
 800a2e4:	466c      	mov	r4, sp
 800a2e6:	f107 0314 	add.w	r3, r7, #20
 800a2ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a2ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a2f2:	f107 0308 	add.w	r3, r7, #8
 800a2f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	f003 fc8d 	bl	800dc18 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4618      	mov	r0, r3
 800a304:	f003 fcbf 	bl	800dc86 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800a308:	69bb      	ldr	r3, [r7, #24]
 800a30a:	005b      	lsls	r3, r3, #1
 800a30c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a30e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a312:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 800a314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a316:	2b00      	cmp	r3, #0
 800a318:	d008      	beq.n	800a32c <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800a31a:	4a2a      	ldr	r2, [pc, #168]	; (800a3c4 <HAL_SD_InitCard+0x12c>)
 800a31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a322:	3301      	adds	r3, #1
 800a324:	4618      	mov	r0, r3
 800a326:	f7f9 fa4b 	bl	80037c0 <HAL_Delay>
 800a32a:	e002      	b.n	800a332 <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 800a32c:	2002      	movs	r0, #2
 800a32e:	f7f9 fa47 	bl	80037c0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 fc38 	bl	800aba8 <SD_PowerON>
 800a338:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a33a:	6a3b      	ldr	r3, [r7, #32]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d00b      	beq.n	800a358 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2201      	movs	r2, #1
 800a344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a34c:	6a3b      	ldr	r3, [r7, #32]
 800a34e:	431a      	orrs	r2, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a354:	2301      	movs	r3, #1
 800a356:	e02e      	b.n	800a3b6 <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 fb67 	bl	800aa2c <SD_InitCard>
 800a35e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a360:	6a3b      	ldr	r3, [r7, #32]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00b      	beq.n	800a37e <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2201      	movs	r2, #1
 800a36a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a372:	6a3b      	ldr	r3, [r7, #32]
 800a374:	431a      	orrs	r2, r3
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a37a:	2301      	movs	r3, #1
 800a37c:	e01b      	b.n	800a3b6 <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a386:	4618      	mov	r0, r3
 800a388:	f003 fd12 	bl	800ddb0 <SDMMC_CmdBlockLength>
 800a38c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a38e:	6a3b      	ldr	r3, [r7, #32]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d00f      	beq.n	800a3b4 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a0b      	ldr	r2, [pc, #44]	; (800a3c8 <HAL_SD_InitCard+0x130>)
 800a39a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3a0:	6a3b      	ldr	r3, [r7, #32]
 800a3a2:	431a      	orrs	r2, r3
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	e000      	b.n	800a3b6 <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 800a3b4:	2300      	movs	r3, #0
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3728      	adds	r7, #40	; 0x28
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bdb0      	pop	{r4, r5, r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	014f8b59 	.word	0x014f8b59
 800a3c4:	00012110 	.word	0x00012110
 800a3c8:	1fe00fff 	.word	0x1fe00fff

0800a3cc <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800a3d6:	bf00      	nop
 800a3d8:	370c      	adds	r7, #12
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr
	...

0800a3e4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3f2:	0f9b      	lsrs	r3, r3, #30
 800a3f4:	b2da      	uxtb	r2, r3
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3fe:	0e9b      	lsrs	r3, r3, #26
 800a400:	b2db      	uxtb	r3, r3
 800a402:	f003 030f 	and.w	r3, r3, #15
 800a406:	b2da      	uxtb	r2, r3
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a410:	0e1b      	lsrs	r3, r3, #24
 800a412:	b2db      	uxtb	r3, r3
 800a414:	f003 0303 	and.w	r3, r3, #3
 800a418:	b2da      	uxtb	r2, r3
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a422:	0c1b      	lsrs	r3, r3, #16
 800a424:	b2da      	uxtb	r2, r3
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a42e:	0a1b      	lsrs	r3, r3, #8
 800a430:	b2da      	uxtb	r2, r3
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a43a:	b2da      	uxtb	r2, r3
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a444:	0d1b      	lsrs	r3, r3, #20
 800a446:	b29a      	uxth	r2, r3
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a450:	0c1b      	lsrs	r3, r3, #16
 800a452:	b2db      	uxtb	r3, r3
 800a454:	f003 030f 	and.w	r3, r3, #15
 800a458:	b2da      	uxtb	r2, r3
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a462:	0bdb      	lsrs	r3, r3, #15
 800a464:	b2db      	uxtb	r3, r3
 800a466:	f003 0301 	and.w	r3, r3, #1
 800a46a:	b2da      	uxtb	r2, r3
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a474:	0b9b      	lsrs	r3, r3, #14
 800a476:	b2db      	uxtb	r3, r3
 800a478:	f003 0301 	and.w	r3, r3, #1
 800a47c:	b2da      	uxtb	r2, r3
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a486:	0b5b      	lsrs	r3, r3, #13
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	f003 0301 	and.w	r3, r3, #1
 800a48e:	b2da      	uxtb	r2, r3
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a498:	0b1b      	lsrs	r3, r3, #12
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	f003 0301 	and.w	r3, r3, #1
 800a4a0:	b2da      	uxtb	r2, r3
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d163      	bne.n	800a57c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4b8:	009a      	lsls	r2, r3, #2
 800a4ba:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a4be:	4013      	ands	r3, r2
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a4c4:	0f92      	lsrs	r2, r2, #30
 800a4c6:	431a      	orrs	r2, r3
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4d0:	0edb      	lsrs	r3, r3, #27
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	f003 0307 	and.w	r3, r3, #7
 800a4d8:	b2da      	uxtb	r2, r3
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4e2:	0e1b      	lsrs	r3, r3, #24
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	f003 0307 	and.w	r3, r3, #7
 800a4ea:	b2da      	uxtb	r2, r3
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4f4:	0d5b      	lsrs	r3, r3, #21
 800a4f6:	b2db      	uxtb	r3, r3
 800a4f8:	f003 0307 	and.w	r3, r3, #7
 800a4fc:	b2da      	uxtb	r2, r3
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a506:	0c9b      	lsrs	r3, r3, #18
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	f003 0307 	and.w	r3, r3, #7
 800a50e:	b2da      	uxtb	r2, r3
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a518:	0bdb      	lsrs	r3, r3, #15
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	f003 0307 	and.w	r3, r3, #7
 800a520:	b2da      	uxtb	r2, r3
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	691b      	ldr	r3, [r3, #16]
 800a52a:	1c5a      	adds	r2, r3, #1
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	7e1b      	ldrb	r3, [r3, #24]
 800a534:	b2db      	uxtb	r3, r3
 800a536:	f003 0307 	and.w	r3, r3, #7
 800a53a:	3302      	adds	r3, #2
 800a53c:	2201      	movs	r2, #1
 800a53e:	fa02 f303 	lsl.w	r3, r2, r3
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800a546:	fb02 f203 	mul.w	r2, r2, r3
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	7a1b      	ldrb	r3, [r3, #8]
 800a552:	b2db      	uxtb	r3, r3
 800a554:	f003 030f 	and.w	r3, r3, #15
 800a558:	2201      	movs	r2, #1
 800a55a:	409a      	lsls	r2, r3
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a564:	687a      	ldr	r2, [r7, #4]
 800a566:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a568:	0a52      	lsrs	r2, r2, #9
 800a56a:	fb02 f203 	mul.w	r2, r2, r3
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a578:	659a      	str	r2, [r3, #88]	; 0x58
 800a57a:	e031      	b.n	800a5e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a580:	2b01      	cmp	r3, #1
 800a582:	d11d      	bne.n	800a5c0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a588:	041b      	lsls	r3, r3, #16
 800a58a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a592:	0c1b      	lsrs	r3, r3, #16
 800a594:	431a      	orrs	r2, r3
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	691b      	ldr	r3, [r3, #16]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	029a      	lsls	r2, r3, #10
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a5b4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	659a      	str	r2, [r3, #88]	; 0x58
 800a5be:	e00f      	b.n	800a5e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a58      	ldr	r2, [pc, #352]	; (800a728 <HAL_SD_GetCardCSD+0x344>)
 800a5c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	e09d      	b.n	800a71c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5e4:	0b9b      	lsrs	r3, r3, #14
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	f003 0301 	and.w	r3, r3, #1
 800a5ec:	b2da      	uxtb	r2, r3
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5f6:	09db      	lsrs	r3, r3, #7
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5fe:	b2da      	uxtb	r2, r3
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a60e:	b2da      	uxtb	r2, r3
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a618:	0fdb      	lsrs	r3, r3, #31
 800a61a:	b2da      	uxtb	r2, r3
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a624:	0f5b      	lsrs	r3, r3, #29
 800a626:	b2db      	uxtb	r3, r3
 800a628:	f003 0303 	and.w	r3, r3, #3
 800a62c:	b2da      	uxtb	r2, r3
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a636:	0e9b      	lsrs	r3, r3, #26
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	f003 0307 	and.w	r3, r3, #7
 800a63e:	b2da      	uxtb	r2, r3
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a648:	0d9b      	lsrs	r3, r3, #22
 800a64a:	b2db      	uxtb	r3, r3
 800a64c:	f003 030f 	and.w	r3, r3, #15
 800a650:	b2da      	uxtb	r2, r3
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a65a:	0d5b      	lsrs	r3, r3, #21
 800a65c:	b2db      	uxtb	r3, r3
 800a65e:	f003 0301 	and.w	r3, r3, #1
 800a662:	b2da      	uxtb	r2, r3
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	2200      	movs	r2, #0
 800a66e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a676:	0c1b      	lsrs	r3, r3, #16
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	f003 0301 	and.w	r3, r3, #1
 800a67e:	b2da      	uxtb	r2, r3
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a68a:	0bdb      	lsrs	r3, r3, #15
 800a68c:	b2db      	uxtb	r3, r3
 800a68e:	f003 0301 	and.w	r3, r3, #1
 800a692:	b2da      	uxtb	r2, r3
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a69e:	0b9b      	lsrs	r3, r3, #14
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	f003 0301 	and.w	r3, r3, #1
 800a6a6:	b2da      	uxtb	r2, r3
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6b2:	0b5b      	lsrs	r3, r3, #13
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	f003 0301 	and.w	r3, r3, #1
 800a6ba:	b2da      	uxtb	r2, r3
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6c6:	0b1b      	lsrs	r3, r3, #12
 800a6c8:	b2db      	uxtb	r3, r3
 800a6ca:	f003 0301 	and.w	r3, r3, #1
 800a6ce:	b2da      	uxtb	r2, r3
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6da:	0a9b      	lsrs	r3, r3, #10
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	f003 0303 	and.w	r3, r3, #3
 800a6e2:	b2da      	uxtb	r2, r3
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6ee:	0a1b      	lsrs	r3, r3, #8
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	f003 0303 	and.w	r3, r3, #3
 800a6f6:	b2da      	uxtb	r2, r3
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a702:	085b      	lsrs	r3, r3, #1
 800a704:	b2db      	uxtb	r3, r3
 800a706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a70a:	b2da      	uxtb	r2, r3
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	2201      	movs	r2, #1
 800a716:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a71a:	2300      	movs	r3, #0
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	370c      	adds	r7, #12
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr
 800a728:	1fe00fff 	.word	0x1fe00fff

0800a72c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b094      	sub	sp, #80	; 0x50
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a736:	2300      	movs	r3, #0
 800a738:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800a73c:	f107 0308 	add.w	r3, r7, #8
 800a740:	4619      	mov	r1, r3
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 fb38 	bl	800adb8 <SD_SendSDStatus>
 800a748:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800a74a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d011      	beq.n	800a774 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a4f      	ldr	r2, [pc, #316]	; (800a894 <HAL_SD_GetCardStatus+0x168>)
 800a756:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a75c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a75e:	431a      	orrs	r2, r3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2201      	movs	r2, #1
 800a768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800a76c:	2301      	movs	r3, #1
 800a76e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a772:	e070      	b.n	800a856 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	099b      	lsrs	r3, r3, #6
 800a778:	b2db      	uxtb	r3, r3
 800a77a:	f003 0303 	and.w	r3, r3, #3
 800a77e:	b2da      	uxtb	r2, r3
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	095b      	lsrs	r3, r3, #5
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	f003 0301 	and.w	r3, r3, #1
 800a78e:	b2da      	uxtb	r2, r3
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	0a1b      	lsrs	r3, r3, #8
 800a798:	b29b      	uxth	r3, r3
 800a79a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a79e:	b29a      	uxth	r2, r3
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	0e1b      	lsrs	r3, r3, #24
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	b29a      	uxth	r2, r3
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	061a      	lsls	r2, r3, #24
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	021b      	lsls	r3, r3, #8
 800a7b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a7ba:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	0a1b      	lsrs	r3, r3, #8
 800a7c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a7c4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	0e1b      	lsrs	r3, r3, #24
 800a7ca:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	b2da      	uxtb	r2, r3
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	0a1b      	lsrs	r3, r3, #8
 800a7dc:	b2da      	uxtb	r2, r3
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	0d1b      	lsrs	r3, r3, #20
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	f003 030f 	and.w	r3, r3, #15
 800a7ec:	b2da      	uxtb	r2, r3
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	0c1b      	lsrs	r3, r3, #16
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a7fc:	b29a      	uxth	r2, r3
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	b29b      	uxth	r3, r3
 800a802:	b2db      	uxtb	r3, r3
 800a804:	b29b      	uxth	r3, r3
 800a806:	4313      	orrs	r3, r2
 800a808:	b29a      	uxth	r2, r3
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	0a9b      	lsrs	r3, r3, #10
 800a812:	b2db      	uxtb	r3, r3
 800a814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a818:	b2da      	uxtb	r2, r3
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	0a1b      	lsrs	r3, r3, #8
 800a822:	b2db      	uxtb	r3, r3
 800a824:	f003 0303 	and.w	r3, r3, #3
 800a828:	b2da      	uxtb	r2, r3
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	091b      	lsrs	r3, r3, #4
 800a832:	b2db      	uxtb	r3, r3
 800a834:	f003 030f 	and.w	r3, r3, #15
 800a838:	b2da      	uxtb	r2, r3
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	b2db      	uxtb	r3, r3
 800a842:	f003 030f 	and.w	r3, r3, #15
 800a846:	b2da      	uxtb	r2, r3
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a84c:	69bb      	ldr	r3, [r7, #24]
 800a84e:	0e1b      	lsrs	r3, r3, #24
 800a850:	b2da      	uxtb	r2, r3
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a85e:	4618      	mov	r0, r3
 800a860:	f003 faa6 	bl	800ddb0 <SDMMC_CmdBlockLength>
 800a864:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800a866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d00d      	beq.n	800a888 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a08      	ldr	r2, [pc, #32]	; (800a894 <HAL_SD_GetCardStatus+0x168>)
 800a872:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a878:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2201      	movs	r2, #1
 800a87e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800a882:	2301      	movs	r3, #1
 800a884:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800a888:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3750      	adds	r7, #80	; 0x50
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}
 800a894:	1fe00fff 	.word	0x1fe00fff

0800a898 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a898:	b5b0      	push	{r4, r5, r7, lr}
 800a89a:	b08e      	sub	sp, #56	; 0x38
 800a89c:	af04      	add	r7, sp, #16
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2203      	movs	r2, #3
 800a8ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8b4:	2b03      	cmp	r3, #3
 800a8b6:	d02e      	beq.n	800a916 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8be:	d106      	bne.n	800a8ce <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	639a      	str	r2, [r3, #56]	; 0x38
 800a8cc:	e029      	b.n	800a922 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8d4:	d10a      	bne.n	800a8ec <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 fb66 	bl	800afa8 <SD_WideBus_Enable>
 800a8dc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8e2:	6a3b      	ldr	r3, [r7, #32]
 800a8e4:	431a      	orrs	r2, r3
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	639a      	str	r2, [r3, #56]	; 0x38
 800a8ea:	e01a      	b.n	800a922 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d10a      	bne.n	800a908 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 fba3 	bl	800b03e <SD_WideBus_Disable>
 800a8f8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8fe:	6a3b      	ldr	r3, [r7, #32]
 800a900:	431a      	orrs	r2, r3
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	639a      	str	r2, [r3, #56]	; 0x38
 800a906:	e00c      	b.n	800a922 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a90c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	639a      	str	r2, [r3, #56]	; 0x38
 800a914:	e005      	b.n	800a922 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a91a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a926:	2b00      	cmp	r3, #0
 800a928:	d007      	beq.n	800a93a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4a2e      	ldr	r2, [pc, #184]	; (800a9e8 <HAL_SD_ConfigWideBusOperation+0x150>)
 800a930:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a932:	2301      	movs	r3, #1
 800a934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a938:	e034      	b.n	800a9a4 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	689b      	ldr	r3, [r3, #8]
 800a944:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	691b      	ldr	r3, [r3, #16]
 800a94e:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	695b      	ldr	r3, [r3, #20]
 800a954:	2b03      	cmp	r3, #3
 800a956:	d903      	bls.n	800a960 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	695b      	ldr	r3, [r3, #20]
 800a95c:	61bb      	str	r3, [r7, #24]
 800a95e:	e012      	b.n	800a986 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a968:	d103      	bne.n	800a972 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	695b      	ldr	r3, [r3, #20]
 800a96e:	61bb      	str	r3, [r7, #24]
 800a970:	e009      	b.n	800a986 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a97a:	d102      	bne.n	800a982 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800a97c:	2302      	movs	r3, #2
 800a97e:	61bb      	str	r3, [r7, #24]
 800a980:	e001      	b.n	800a986 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800a982:	2304      	movs	r3, #4
 800a984:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681d      	ldr	r5, [r3, #0]
 800a98a:	466c      	mov	r4, sp
 800a98c:	f107 0314 	add.w	r3, r7, #20
 800a990:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a994:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a998:	f107 0308 	add.w	r3, r7, #8
 800a99c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a99e:	4628      	mov	r0, r5
 800a9a0:	f003 f93a 	bl	800dc18 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f003 f9ff 	bl	800ddb0 <SDMMC_CmdBlockLength>
 800a9b2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a9b4:	6a3b      	ldr	r3, [r7, #32]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00c      	beq.n	800a9d4 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4a0a      	ldr	r2, [pc, #40]	; (800a9e8 <HAL_SD_ConfigWideBusOperation+0x150>)
 800a9c0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9c6:	6a3b      	ldr	r3, [r7, #32]
 800a9c8:	431a      	orrs	r2, r3
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800a9dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3728      	adds	r7, #40	; 0x28
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bdb0      	pop	{r4, r5, r7, pc}
 800a9e8:	1fe00fff 	.word	0x1fe00fff

0800a9ec <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b086      	sub	sp, #24
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a9f8:	f107 030c 	add.w	r3, r7, #12
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 faaa 	bl	800af58 <SD_SendStatus>
 800aa04:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d005      	beq.n	800aa18 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	431a      	orrs	r2, r3
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	0a5b      	lsrs	r3, r3, #9
 800aa1c:	f003 030f 	and.w	r3, r3, #15
 800aa20:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800aa22:	693b      	ldr	r3, [r7, #16]
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3718      	adds	r7, #24
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800aa2c:	b590      	push	{r4, r7, lr}
 800aa2e:	b091      	sub	sp, #68	; 0x44
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800aa34:	2301      	movs	r3, #1
 800aa36:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f003 f933 	bl	800dca8 <SDMMC_GetPowerState>
 800aa42:	4603      	mov	r3, r0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d102      	bne.n	800aa4e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aa48:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800aa4c:	e0a8      	b.n	800aba0 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa52:	2b03      	cmp	r3, #3
 800aa54:	d02e      	beq.n	800aab4 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f003 fab5 	bl	800dfca <SDMMC_CmdSendCID>
 800aa60:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d001      	beq.n	800aa6c <SD_InitCard+0x40>
    {
      return errorstate;
 800aa68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa6a:	e099      	b.n	800aba0 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	2100      	movs	r1, #0
 800aa72:	4618      	mov	r0, r3
 800aa74:	f003 f95d 	bl	800dd32 <SDMMC_GetResponse>
 800aa78:	4602      	mov	r2, r0
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	2104      	movs	r1, #4
 800aa84:	4618      	mov	r0, r3
 800aa86:	f003 f954 	bl	800dd32 <SDMMC_GetResponse>
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	2108      	movs	r1, #8
 800aa96:	4618      	mov	r0, r3
 800aa98:	f003 f94b 	bl	800dd32 <SDMMC_GetResponse>
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	210c      	movs	r1, #12
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f003 f942 	bl	800dd32 <SDMMC_GetResponse>
 800aaae:	4602      	mov	r2, r0
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aab8:	2b03      	cmp	r3, #3
 800aaba:	d00d      	beq.n	800aad8 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f107 020e 	add.w	r2, r7, #14
 800aac4:	4611      	mov	r1, r2
 800aac6:	4618      	mov	r0, r3
 800aac8:	f003 fabe 	bl	800e048 <SDMMC_CmdSetRelAdd>
 800aacc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800aace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d001      	beq.n	800aad8 <SD_InitCard+0xac>
    {
      return errorstate;
 800aad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aad6:	e063      	b.n	800aba0 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aadc:	2b03      	cmp	r3, #3
 800aade:	d036      	beq.n	800ab4e <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800aae0:	89fb      	ldrh	r3, [r7, #14]
 800aae2:	461a      	mov	r2, r3
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aaf0:	041b      	lsls	r3, r3, #16
 800aaf2:	4619      	mov	r1, r3
 800aaf4:	4610      	mov	r0, r2
 800aaf6:	f003 fa87 	bl	800e008 <SDMMC_CmdSendCSD>
 800aafa:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800aafc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d001      	beq.n	800ab06 <SD_InitCard+0xda>
    {
      return errorstate;
 800ab02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab04:	e04c      	b.n	800aba0 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f003 f910 	bl	800dd32 <SDMMC_GetResponse>
 800ab12:	4602      	mov	r2, r0
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	2104      	movs	r1, #4
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f003 f907 	bl	800dd32 <SDMMC_GetResponse>
 800ab24:	4602      	mov	r2, r0
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2108      	movs	r1, #8
 800ab30:	4618      	mov	r0, r3
 800ab32:	f003 f8fe 	bl	800dd32 <SDMMC_GetResponse>
 800ab36:	4602      	mov	r2, r0
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	210c      	movs	r1, #12
 800ab42:	4618      	mov	r0, r3
 800ab44:	f003 f8f5 	bl	800dd32 <SDMMC_GetResponse>
 800ab48:	4602      	mov	r2, r0
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	2104      	movs	r1, #4
 800ab54:	4618      	mov	r0, r3
 800ab56:	f003 f8ec 	bl	800dd32 <SDMMC_GetResponse>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	0d1a      	lsrs	r2, r3, #20
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ab62:	f107 0310 	add.w	r3, r7, #16
 800ab66:	4619      	mov	r1, r3
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f7ff fc3b 	bl	800a3e4 <HAL_SD_GetCardCSD>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d002      	beq.n	800ab7a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ab74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ab78:	e012      	b.n	800aba0 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6819      	ldr	r1, [r3, #0]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab82:	041b      	lsls	r3, r3, #16
 800ab84:	f04f 0400 	mov.w	r4, #0
 800ab88:	461a      	mov	r2, r3
 800ab8a:	4623      	mov	r3, r4
 800ab8c:	4608      	mov	r0, r1
 800ab8e:	f003 f932 	bl	800ddf6 <SDMMC_CmdSelDesel>
 800ab92:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d001      	beq.n	800ab9e <SD_InitCard+0x172>
  {
    return errorstate;
 800ab9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab9c:	e000      	b.n	800aba0 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ab9e:	2300      	movs	r3, #0
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3744      	adds	r7, #68	; 0x44
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd90      	pop	{r4, r7, pc}

0800aba8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b088      	sub	sp, #32
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800abb0:	2300      	movs	r3, #0
 800abb2:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800abb4:	2300      	movs	r3, #0
 800abb6:	61fb      	str	r3, [r7, #28]
 800abb8:	2300      	movs	r3, #0
 800abba:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800abbc:	f7f8 fdf4 	bl	80037a8 <HAL_GetTick>
 800abc0:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4618      	mov	r0, r3
 800abc8:	f003 f939 	bl	800de3e <SDMMC_CmdGoIdleState>
 800abcc:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d001      	beq.n	800abd8 <SD_PowerON+0x30>
  {
    return errorstate;
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	e0e9      	b.n	800adac <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4618      	mov	r0, r3
 800abde:	f003 f94c 	bl	800de7a <SDMMC_CmdOperCond>
 800abe2:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d00d      	beq.n	800ac06 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2200      	movs	r2, #0
 800abee:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	4618      	mov	r0, r3
 800abf6:	f003 f922 	bl	800de3e <SDMMC_CmdGoIdleState>
 800abfa:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d004      	beq.n	800ac0c <SD_PowerON+0x64>
    {
      return errorstate;
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	e0d2      	b.n	800adac <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	d137      	bne.n	800ac84 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	2100      	movs	r1, #0
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f003 f94d 	bl	800deba <SDMMC_CmdAppCommand>
 800ac20:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d02d      	beq.n	800ac84 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ac28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ac2c:	e0be      	b.n	800adac <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	2100      	movs	r1, #0
 800ac34:	4618      	mov	r0, r3
 800ac36:	f003 f940 	bl	800deba <SDMMC_CmdAppCommand>
 800ac3a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d001      	beq.n	800ac46 <SD_PowerON+0x9e>
    {
      return errorstate;
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	e0b2      	b.n	800adac <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	495a      	ldr	r1, [pc, #360]	; (800adb4 <SD_PowerON+0x20c>)
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f003 f957 	bl	800df00 <SDMMC_CmdAppOperCommand>
 800ac52:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d002      	beq.n	800ac60 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ac5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ac5e:	e0a5      	b.n	800adac <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	2100      	movs	r1, #0
 800ac66:	4618      	mov	r0, r3
 800ac68:	f003 f863 	bl	800dd32 <SDMMC_GetResponse>
 800ac6c:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	0fdb      	lsrs	r3, r3, #31
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d101      	bne.n	800ac7a <SD_PowerON+0xd2>
 800ac76:	2301      	movs	r3, #1
 800ac78:	e000      	b.n	800ac7c <SD_PowerON+0xd4>
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	61bb      	str	r3, [r7, #24]

    count++;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	3301      	adds	r3, #1
 800ac82:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d802      	bhi.n	800ac94 <SD_PowerON+0xec>
 800ac8e:	69bb      	ldr	r3, [r7, #24]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d0cc      	beq.n	800ac2e <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d902      	bls.n	800aca4 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ac9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aca2:	e083      	b.n	800adac <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800aca4:	69fb      	ldr	r3, [r7, #28]
 800aca6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d07d      	beq.n	800adaa <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2201      	movs	r2, #1
 800acb2:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	699b      	ldr	r3, [r3, #24]
 800acb8:	2b02      	cmp	r3, #2
 800acba:	d176      	bne.n	800adaa <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800acbc:	69fb      	ldr	r3, [r7, #28]
 800acbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d071      	beq.n	800adaa <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800accc:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f042 0208 	orr.w	r2, r2, #8
 800acdc:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4618      	mov	r0, r3
 800ace4:	f003 fa17 	bl	800e116 <SDMMC_CmdVoltageSwitch>
 800ace8:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d00c      	beq.n	800ad0a <SD_PowerON+0x162>
        {
          return errorstate;
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	e05b      	b.n	800adac <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800acf4:	f7f8 fd58 	bl	80037a8 <HAL_GetTick>
 800acf8:	4602      	mov	r2, r0
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	1ad3      	subs	r3, r2, r3
 800acfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad02:	d102      	bne.n	800ad0a <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800ad04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad08:	e050      	b.n	800adac <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ad14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad18:	d1ec      	bne.n	800acf4 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800ad22:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad32:	d002      	beq.n	800ad3a <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800ad34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ad38:	e038      	b.n	800adac <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800ad3a:	2001      	movs	r0, #1
 800ad3c:	f7ff fb46 	bl	800a3cc <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	681a      	ldr	r2, [r3, #0]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f042 0204 	orr.w	r2, r2, #4
 800ad4e:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800ad50:	e00a      	b.n	800ad68 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ad52:	f7f8 fd29 	bl	80037a8 <HAL_GetTick>
 800ad56:	4602      	mov	r2, r0
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	1ad3      	subs	r3, r2, r3
 800ad5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad60:	d102      	bne.n	800ad68 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800ad62:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad66:	e021      	b.n	800adac <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad76:	d1ec      	bne.n	800ad52 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800ad80:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad90:	d102      	bne.n	800ad98 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ad92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ad96:	e009      	b.n	800adac <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	2213      	movs	r2, #19
 800ad9e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f04f 32ff 	mov.w	r2, #4294967295
 800ada8:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800adaa:	2300      	movs	r3, #0
}
 800adac:	4618      	mov	r0, r3
 800adae:	3720      	adds	r7, #32
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	c1100000 	.word	0xc1100000

0800adb8 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b08c      	sub	sp, #48	; 0x30
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800adc2:	f7f8 fcf1 	bl	80037a8 <HAL_GetTick>
 800adc6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	2100      	movs	r1, #0
 800add2:	4618      	mov	r0, r3
 800add4:	f002 ffad 	bl	800dd32 <SDMMC_GetResponse>
 800add8:	4603      	mov	r3, r0
 800adda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ade2:	d102      	bne.n	800adea <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ade4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ade8:	e0b0      	b.n	800af4c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	2140      	movs	r1, #64	; 0x40
 800adf0:	4618      	mov	r0, r3
 800adf2:	f002 ffdd 	bl	800ddb0 <SDMMC_CmdBlockLength>
 800adf6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800adf8:	6a3b      	ldr	r3, [r7, #32]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d005      	beq.n	800ae0a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800ae06:	6a3b      	ldr	r3, [r7, #32]
 800ae08:	e0a0      	b.n	800af4c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681a      	ldr	r2, [r3, #0]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae12:	041b      	lsls	r3, r3, #16
 800ae14:	4619      	mov	r1, r3
 800ae16:	4610      	mov	r0, r2
 800ae18:	f003 f84f 	bl	800deba <SDMMC_CmdAppCommand>
 800ae1c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae1e:	6a3b      	ldr	r3, [r7, #32]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d005      	beq.n	800ae30 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800ae2c:	6a3b      	ldr	r3, [r7, #32]
 800ae2e:	e08d      	b.n	800af4c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ae30:	f04f 33ff 	mov.w	r3, #4294967295
 800ae34:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800ae36:	2340      	movs	r3, #64	; 0x40
 800ae38:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800ae3a:	2360      	movs	r3, #96	; 0x60
 800ae3c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ae3e:	2302      	movs	r3, #2
 800ae40:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ae42:	2300      	movs	r3, #0
 800ae44:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ae46:	2301      	movs	r3, #1
 800ae48:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f107 0208 	add.w	r2, r7, #8
 800ae52:	4611      	mov	r1, r2
 800ae54:	4618      	mov	r0, r3
 800ae56:	f002 ff7f 	bl	800dd58 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f003 f937 	bl	800e0d2 <SDMMC_CmdStatusRegister>
 800ae64:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae66:	6a3b      	ldr	r3, [r7, #32]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d02b      	beq.n	800aec4 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800ae74:	6a3b      	ldr	r3, [r7, #32]
 800ae76:	e069      	b.n	800af4c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d013      	beq.n	800aeae <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800ae86:	2300      	movs	r3, #0
 800ae88:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae8a:	e00d      	b.n	800aea8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4618      	mov	r0, r3
 800ae92:	f002 feeb 	bl	800dc6c <SDMMC_ReadFIFO>
 800ae96:	4602      	mov	r2, r0
 800ae98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae9a:	601a      	str	r2, [r3, #0]
        pData++;
 800ae9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae9e:	3304      	adds	r3, #4
 800aea0:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800aea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea4:	3301      	adds	r3, #1
 800aea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeaa:	2b07      	cmp	r3, #7
 800aeac:	d9ee      	bls.n	800ae8c <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800aeae:	f7f8 fc7b 	bl	80037a8 <HAL_GetTick>
 800aeb2:	4602      	mov	r2, r0
 800aeb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb6:	1ad3      	subs	r3, r2, r3
 800aeb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aebc:	d102      	bne.n	800aec4 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800aebe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aec2:	e043      	b.n	800af4c <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeca:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d0d2      	beq.n	800ae78 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aed8:	f003 0308 	and.w	r3, r3, #8
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d001      	beq.n	800aee4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800aee0:	2308      	movs	r3, #8
 800aee2:	e033      	b.n	800af4c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeea:	f003 0302 	and.w	r3, r3, #2
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d001      	beq.n	800aef6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800aef2:	2302      	movs	r3, #2
 800aef4:	e02a      	b.n	800af4c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aefc:	f003 0320 	and.w	r3, r3, #32
 800af00:	2b00      	cmp	r3, #0
 800af02:	d017      	beq.n	800af34 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800af04:	2320      	movs	r3, #32
 800af06:	e021      	b.n	800af4c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4618      	mov	r0, r3
 800af0e:	f002 fead 	bl	800dc6c <SDMMC_ReadFIFO>
 800af12:	4602      	mov	r2, r0
 800af14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af16:	601a      	str	r2, [r3, #0]
    pData++;
 800af18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af1a:	3304      	adds	r3, #4
 800af1c:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800af1e:	f7f8 fc43 	bl	80037a8 <HAL_GetTick>
 800af22:	4602      	mov	r2, r0
 800af24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af26:	1ad3      	subs	r3, r2, r3
 800af28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af2c:	d102      	bne.n	800af34 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800af2e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af32:	e00b      	b.n	800af4c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d1e2      	bne.n	800af08 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4a03      	ldr	r2, [pc, #12]	; (800af54 <SD_SendSDStatus+0x19c>)
 800af48:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800af4a:	2300      	movs	r3, #0
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3730      	adds	r7, #48	; 0x30
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}
 800af54:	18000f3a 	.word	0x18000f3a

0800af58 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d102      	bne.n	800af6e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800af68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800af6c:	e018      	b.n	800afa0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681a      	ldr	r2, [r3, #0]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af76:	041b      	lsls	r3, r3, #16
 800af78:	4619      	mov	r1, r3
 800af7a:	4610      	mov	r0, r2
 800af7c:	f003 f886 	bl	800e08c <SDMMC_CmdSendStatus>
 800af80:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d001      	beq.n	800af8c <SD_SendStatus+0x34>
  {
    return errorstate;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	e009      	b.n	800afa0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2100      	movs	r1, #0
 800af92:	4618      	mov	r0, r3
 800af94:	f002 fecd 	bl	800dd32 <SDMMC_GetResponse>
 800af98:	4602      	mov	r2, r0
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800af9e:	2300      	movs	r3, #0
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3710      	adds	r7, #16
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b086      	sub	sp, #24
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800afb0:	2300      	movs	r3, #0
 800afb2:	60fb      	str	r3, [r7, #12]
 800afb4:	2300      	movs	r3, #0
 800afb6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	2100      	movs	r1, #0
 800afbe:	4618      	mov	r0, r3
 800afc0:	f002 feb7 	bl	800dd32 <SDMMC_GetResponse>
 800afc4:	4603      	mov	r3, r0
 800afc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afce:	d102      	bne.n	800afd6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800afd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800afd4:	e02f      	b.n	800b036 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800afd6:	f107 030c 	add.w	r3, r7, #12
 800afda:	4619      	mov	r1, r3
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 f879 	bl	800b0d4 <SD_FindSCR>
 800afe2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d001      	beq.n	800afee <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	e023      	b.n	800b036 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d01c      	beq.n	800b032 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681a      	ldr	r2, [r3, #0]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b000:	041b      	lsls	r3, r3, #16
 800b002:	4619      	mov	r1, r3
 800b004:	4610      	mov	r0, r2
 800b006:	f002 ff58 	bl	800deba <SDMMC_CmdAppCommand>
 800b00a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d001      	beq.n	800b016 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	e00f      	b.n	800b036 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	2102      	movs	r1, #2
 800b01c:	4618      	mov	r0, r3
 800b01e:	f002 ff8f 	bl	800df40 <SDMMC_CmdBusWidth>
 800b022:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d001      	beq.n	800b02e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	e003      	b.n	800b036 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b02e:	2300      	movs	r3, #0
 800b030:	e001      	b.n	800b036 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b032:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b036:	4618      	mov	r0, r3
 800b038:	3718      	adds	r7, #24
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b03e:	b580      	push	{r7, lr}
 800b040:	b086      	sub	sp, #24
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b046:	2300      	movs	r3, #0
 800b048:	60fb      	str	r3, [r7, #12]
 800b04a:	2300      	movs	r3, #0
 800b04c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	2100      	movs	r1, #0
 800b054:	4618      	mov	r0, r3
 800b056:	f002 fe6c 	bl	800dd32 <SDMMC_GetResponse>
 800b05a:	4603      	mov	r3, r0
 800b05c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b060:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b064:	d102      	bne.n	800b06c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b066:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b06a:	e02f      	b.n	800b0cc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b06c:	f107 030c 	add.w	r3, r7, #12
 800b070:	4619      	mov	r1, r3
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 f82e 	bl	800b0d4 <SD_FindSCR>
 800b078:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d001      	beq.n	800b084 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	e023      	b.n	800b0cc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d01c      	beq.n	800b0c8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681a      	ldr	r2, [r3, #0]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b096:	041b      	lsls	r3, r3, #16
 800b098:	4619      	mov	r1, r3
 800b09a:	4610      	mov	r0, r2
 800b09c:	f002 ff0d 	bl	800deba <SDMMC_CmdAppCommand>
 800b0a0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d001      	beq.n	800b0ac <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	e00f      	b.n	800b0cc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2100      	movs	r1, #0
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f002 ff44 	bl	800df40 <SDMMC_CmdBusWidth>
 800b0b8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d001      	beq.n	800b0c4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	e003      	b.n	800b0cc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	e001      	b.n	800b0cc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b0c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3718      	adds	r7, #24
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b08e      	sub	sp, #56	; 0x38
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b0de:	f7f8 fb63 	bl	80037a8 <HAL_GetTick>
 800b0e2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	60bb      	str	r3, [r7, #8]
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	2108      	movs	r1, #8
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f002 fe58 	bl	800ddb0 <SDMMC_CmdBlockLength>
 800b100:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b104:	2b00      	cmp	r3, #0
 800b106:	d001      	beq.n	800b10c <SD_FindSCR+0x38>
  {
    return errorstate;
 800b108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b10a:	e0ad      	b.n	800b268 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681a      	ldr	r2, [r3, #0]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b114:	041b      	lsls	r3, r3, #16
 800b116:	4619      	mov	r1, r3
 800b118:	4610      	mov	r0, r2
 800b11a:	f002 fece 	bl	800deba <SDMMC_CmdAppCommand>
 800b11e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b122:	2b00      	cmp	r3, #0
 800b124:	d001      	beq.n	800b12a <SD_FindSCR+0x56>
  {
    return errorstate;
 800b126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b128:	e09e      	b.n	800b268 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b12a:	f04f 33ff 	mov.w	r3, #4294967295
 800b12e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b130:	2308      	movs	r3, #8
 800b132:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b134:	2330      	movs	r3, #48	; 0x30
 800b136:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b138:	2302      	movs	r3, #2
 800b13a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b13c:	2300      	movs	r3, #0
 800b13e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b140:	2301      	movs	r3, #1
 800b142:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f107 0210 	add.w	r2, r7, #16
 800b14c:	4611      	mov	r1, r2
 800b14e:	4618      	mov	r0, r3
 800b150:	f002 fe02 	bl	800dd58 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4618      	mov	r0, r3
 800b15a:	f002 ff14 	bl	800df86 <SDMMC_CmdSendSCR>
 800b15e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b162:	2b00      	cmp	r3, #0
 800b164:	d027      	beq.n	800b1b6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800b166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b168:	e07e      	b.n	800b268 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b170:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b174:	2b00      	cmp	r3, #0
 800b176:	d113      	bne.n	800b1a0 <SD_FindSCR+0xcc>
 800b178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d110      	bne.n	800b1a0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	4618      	mov	r0, r3
 800b184:	f002 fd72 	bl	800dc6c <SDMMC_ReadFIFO>
 800b188:	4603      	mov	r3, r0
 800b18a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4618      	mov	r0, r3
 800b192:	f002 fd6b 	bl	800dc6c <SDMMC_ReadFIFO>
 800b196:	4603      	mov	r3, r0
 800b198:	60fb      	str	r3, [r7, #12]
      index++;
 800b19a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b19c:	3301      	adds	r3, #1
 800b19e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b1a0:	f7f8 fb02 	bl	80037a8 <HAL_GetTick>
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a8:	1ad3      	subs	r3, r2, r3
 800b1aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1ae:	d102      	bne.n	800b1b6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b1b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1b4:	e058      	b.n	800b268 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b1bc:	f240 532a 	movw	r3, #1322	; 0x52a
 800b1c0:	4013      	ands	r3, r2
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d0d1      	beq.n	800b16a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1cc:	f003 0308 	and.w	r3, r3, #8
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d005      	beq.n	800b1e0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	2208      	movs	r2, #8
 800b1da:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b1dc:	2308      	movs	r3, #8
 800b1de:	e043      	b.n	800b268 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1e6:	f003 0302 	and.w	r3, r3, #2
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d005      	beq.n	800b1fa <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	2202      	movs	r2, #2
 800b1f4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b1f6:	2302      	movs	r3, #2
 800b1f8:	e036      	b.n	800b268 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b200:	f003 0320 	and.w	r3, r3, #32
 800b204:	2b00      	cmp	r3, #0
 800b206:	d005      	beq.n	800b214 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	2220      	movs	r2, #32
 800b20e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b210:	2320      	movs	r3, #32
 800b212:	e029      	b.n	800b268 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4a15      	ldr	r2, [pc, #84]	; (800b270 <SD_FindSCR+0x19c>)
 800b21a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	061a      	lsls	r2, r3, #24
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	021b      	lsls	r3, r3, #8
 800b224:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b228:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	0a1b      	lsrs	r3, r3, #8
 800b22e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b232:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	0e1b      	lsrs	r3, r3, #24
 800b238:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b23c:	601a      	str	r2, [r3, #0]
    scr++;
 800b23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b240:	3304      	adds	r3, #4
 800b242:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	061a      	lsls	r2, r3, #24
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	021b      	lsls	r3, r3, #8
 800b24c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b250:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	0a1b      	lsrs	r3, r3, #8
 800b256:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b25a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	0e1b      	lsrs	r3, r3, #24
 800b260:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b264:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b266:	2300      	movs	r3, #0
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3738      	adds	r7, #56	; 0x38
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}
 800b270:	18000f3a 	.word	0x18000f3a

0800b274 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b082      	sub	sp, #8
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d101      	bne.n	800b286 <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 800b282:	2301      	movs	r3, #1
 800b284:	e0a8      	b.n	800b3d8 <HAL_SMBUS_Init+0x164>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d106      	bne.n	800b29c <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2200      	movs	r2, #0
 800b292:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f7f7 fafa 	bl	8002890 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2202      	movs	r2, #2
 800b2a0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	681a      	ldr	r2, [r3, #0]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f022 0201 	bic.w	r2, r2, #1
 800b2b0:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	685a      	ldr	r2, [r3, #4]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b2be:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	695a      	ldr	r2, [r3, #20]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b2ce:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	695a      	ldr	r2, [r3, #20]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800b2de:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b2e8:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	689a      	ldr	r2, [r3, #8]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b2f8:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	68db      	ldr	r3, [r3, #12]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d012      	beq.n	800b328 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	691b      	ldr	r3, [r3, #16]
 800b306:	2b01      	cmp	r3, #1
 800b308:	d107      	bne.n	800b31a <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	68da      	ldr	r2, [r3, #12]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b316:	609a      	str	r2, [r3, #8]
 800b318:	e006      	b.n	800b328 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	68da      	ldr	r2, [r3, #12]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b326:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	691b      	ldr	r3, [r3, #16]
 800b32c:	2b02      	cmp	r3, #2
 800b32e:	d104      	bne.n	800b33a <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b338:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	6859      	ldr	r1, [r3, #4]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681a      	ldr	r2, [r3, #0]
 800b344:	4b26      	ldr	r3, [pc, #152]	; (800b3e0 <HAL_SMBUS_Init+0x16c>)
 800b346:	430b      	orrs	r3, r1
 800b348:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | (hsmbus->Init.OwnAddress2Masks << 8U));
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	695a      	ldr	r2, [r3, #20]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	699b      	ldr	r3, [r3, #24]
 800b352:	ea42 0103 	orr.w	r1, r2, r3
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	69db      	ldr	r3, [r3, #28]
 800b35a:	021a      	lsls	r2, r3, #8
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	430a      	orrs	r2, r1
 800b362:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | hsmbus->Init.AnalogFilter);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6a1a      	ldr	r2, [r3, #32]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b36c:	431a      	orrs	r2, r3
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b372:	431a      	orrs	r2, r3
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b378:	ea42 0103 	orr.w	r1, r2, r3
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	689a      	ldr	r2, [r3, #8]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	430a      	orrs	r2, r1
 800b386:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b38c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b390:	d110      	bne.n	800b3b4 <HAL_SMBUS_Init+0x140>
      && ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b396:	2b00      	cmp	r3, #0
 800b398:	d004      	beq.n	800b3a4 <HAL_SMBUS_Init+0x130>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b39e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b3a2:	d107      	bne.n	800b3b4 <HAL_SMBUS_Init+0x140>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	681a      	ldr	r2, [r3, #0]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b3b2:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	681a      	ldr	r2, [r3, #0]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f042 0201 	orr.w	r2, r2, #1
 800b3c2:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 800b3d6:	2300      	movs	r3, #0
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3708      	adds	r7, #8
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}
 800b3e0:	02008000 	.word	0x02008000

0800b3e4 <HAL_SMBUS_ConfigDigitalFilter>:
  *                the configuration information for the specified SMBUS.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_ConfigDigitalFilter(SMBUS_HandleTypeDef *hsmbus, uint32_t DigitalFilter)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b085      	sub	sp, #20
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SMBUS_ALL_INSTANCE(hsmbus->Instance));
  assert_param(IS_SMBUS_DIGITAL_FILTER(DigitalFilter));

  if (hsmbus->State == HAL_SMBUS_STATE_READY)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3f2:	2b01      	cmp	r3, #1
 800b3f4:	d137      	bne.n	800b466 <HAL_SMBUS_ConfigDigitalFilter+0x82>
  {
    /* Process Locked */
    __HAL_LOCK(hsmbus);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d101      	bne.n	800b404 <HAL_SMBUS_ConfigDigitalFilter+0x20>
 800b400:	2302      	movs	r3, #2
 800b402:	e031      	b.n	800b468 <HAL_SMBUS_ConfigDigitalFilter+0x84>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2201      	movs	r2, #1
 800b408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    hsmbus->State = HAL_SMBUS_STATE_BUSY;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2202      	movs	r2, #2
 800b410:	649a      	str	r2, [r3, #72]	; 0x48

    /* Disable the selected SMBUS peripheral */
    __HAL_SMBUS_DISABLE(hsmbus);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	681a      	ldr	r2, [r3, #0]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f022 0201 	bic.w	r2, r2, #1
 800b420:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hsmbus->Instance->CR1;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	60fb      	str	r3, [r7, #12]

    /* Reset I2C DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b430:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << I2C_CR1_DNF_Pos;
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	021b      	lsls	r3, r3, #8
 800b436:	68fa      	ldr	r2, [r7, #12]
 800b438:	4313      	orrs	r3, r2
 800b43a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hsmbus->Instance->CR1 = tmpreg;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	68fa      	ldr	r2, [r7, #12]
 800b442:	601a      	str	r2, [r3, #0]

    __HAL_SMBUS_ENABLE(hsmbus);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	681a      	ldr	r2, [r3, #0]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f042 0201 	orr.w	r2, r2, #1
 800b452:	601a      	str	r2, [r3, #0]

    hsmbus->State = HAL_SMBUS_STATE_READY;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2201      	movs	r2, #1
 800b458:	649a      	str	r2, [r3, #72]	; 0x48

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2200      	movs	r2, #0
 800b45e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    return HAL_OK;
 800b462:	2300      	movs	r3, #0
 800b464:	e000      	b.n	800b468 <HAL_SMBUS_ConfigDigitalFilter+0x84>
  }
  else
  {
    return HAL_BUSY;
 800b466:	2302      	movs	r3, #2
  }
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3714      	adds	r7, #20
 800b46c:	46bd      	mov	sp, r7
 800b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b472:	4770      	bx	lr

0800b474 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800b47c:	2300      	movs	r3, #0
 800b47e:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d101      	bne.n	800b48a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800b486:	2301      	movs	r3, #1
 800b488:	e0e2      	b.n	800b650 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2200      	movs	r2, #0
 800b48e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	4a70      	ldr	r2, [pc, #448]	; (800b658 <HAL_SPI_Init+0x1e4>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d00f      	beq.n	800b4ba <HAL_SPI_Init+0x46>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	4a6f      	ldr	r2, [pc, #444]	; (800b65c <HAL_SPI_Init+0x1e8>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d00a      	beq.n	800b4ba <HAL_SPI_Init+0x46>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a6d      	ldr	r2, [pc, #436]	; (800b660 <HAL_SPI_Init+0x1ec>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d005      	beq.n	800b4ba <HAL_SPI_Init+0x46>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	68db      	ldr	r3, [r3, #12]
 800b4b2:	2b0f      	cmp	r3, #15
 800b4b4:	d901      	bls.n	800b4ba <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	e0ca      	b.n	800b650 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f000 f8d2 	bl	800b664 <SPI_GetPacketSize>
 800b4c0:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4a64      	ldr	r2, [pc, #400]	; (800b658 <HAL_SPI_Init+0x1e4>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d00c      	beq.n	800b4e6 <HAL_SPI_Init+0x72>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4a62      	ldr	r2, [pc, #392]	; (800b65c <HAL_SPI_Init+0x1e8>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d007      	beq.n	800b4e6 <HAL_SPI_Init+0x72>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4a61      	ldr	r2, [pc, #388]	; (800b660 <HAL_SPI_Init+0x1ec>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d002      	beq.n	800b4e6 <HAL_SPI_Init+0x72>
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	2b08      	cmp	r3, #8
 800b4e4:	d811      	bhi.n	800b50a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b4ea:	4a5b      	ldr	r2, [pc, #364]	; (800b658 <HAL_SPI_Init+0x1e4>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d009      	beq.n	800b504 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4a59      	ldr	r2, [pc, #356]	; (800b65c <HAL_SPI_Init+0x1e8>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d004      	beq.n	800b504 <HAL_SPI_Init+0x90>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a58      	ldr	r2, [pc, #352]	; (800b660 <HAL_SPI_Init+0x1ec>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d104      	bne.n	800b50e <HAL_SPI_Init+0x9a>
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	2b10      	cmp	r3, #16
 800b508:	d901      	bls.n	800b50e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800b50a:	2301      	movs	r3, #1
 800b50c:	e0a0      	b.n	800b650 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b514:	b2db      	uxtb	r3, r3
 800b516:	2b00      	cmp	r3, #0
 800b518:	d106      	bne.n	800b528 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2200      	movs	r2, #0
 800b51e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f7f7 fbdc 	bl	8002ce0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2202      	movs	r2, #2
 800b52c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	681a      	ldr	r2, [r3, #0]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f022 0201 	bic.w	r2, r2, #1
 800b53e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	699b      	ldr	r3, [r3, #24]
 800b544:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b548:	d110      	bne.n	800b56c <HAL_SPI_Init+0xf8>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b552:	d10b      	bne.n	800b56c <HAL_SPI_Init+0xf8>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d107      	bne.n	800b56c <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b56a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	69da      	ldr	r2, [r3, #28]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b574:	431a      	orrs	r2, r3
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	431a      	orrs	r2, r3
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b57e:	ea42 0103 	orr.w	r1, r2, r3
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	68da      	ldr	r2, [r3, #12]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	430a      	orrs	r2, r1
 800b58c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b596:	431a      	orrs	r2, r3
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b59c:	431a      	orrs	r2, r3
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	699b      	ldr	r3, [r3, #24]
 800b5a2:	431a      	orrs	r2, r3
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	691b      	ldr	r3, [r3, #16]
 800b5a8:	431a      	orrs	r2, r3
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	695b      	ldr	r3, [r3, #20]
 800b5ae:	431a      	orrs	r2, r3
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6a1b      	ldr	r3, [r3, #32]
 800b5b4:	431a      	orrs	r2, r3
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	431a      	orrs	r2, r3
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5c0:	431a      	orrs	r2, r3
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	689b      	ldr	r3, [r3, #8]
 800b5c6:	431a      	orrs	r2, r3
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5cc:	ea42 0103 	orr.w	r1, r2, r3
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	430a      	orrs	r2, r1
 800b5da:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d113      	bne.n	800b60c <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	689b      	ldr	r3, [r3, #8]
 800b5ea:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b5f6:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	689b      	ldr	r3, [r3, #8]
 800b5fe:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b60a:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f022 0201 	bic.w	r2, r2, #1
 800b61a:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b624:	2b00      	cmp	r3, #0
 800b626:	d00a      	beq.n	800b63e <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	68db      	ldr	r3, [r3, #12]
 800b62e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	430a      	orrs	r2, r1
 800b63c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2200      	movs	r2, #0
 800b642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2201      	movs	r2, #1
 800b64a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b64e:	2300      	movs	r3, #0
}
 800b650:	4618      	mov	r0, r3
 800b652:	3710      	adds	r7, #16
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}
 800b658:	40013000 	.word	0x40013000
 800b65c:	40003800 	.word	0x40003800
 800b660:	40003c00 	.word	0x40003c00

0800b664 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b664:	b480      	push	{r7}
 800b666:	b085      	sub	sp, #20
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b670:	095b      	lsrs	r3, r3, #5
 800b672:	3301      	adds	r3, #1
 800b674:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	68db      	ldr	r3, [r3, #12]
 800b67a:	3301      	adds	r3, #1
 800b67c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	3307      	adds	r3, #7
 800b682:	08db      	lsrs	r3, r3, #3
 800b684:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	68fa      	ldr	r2, [r7, #12]
 800b68a:	fb02 f303 	mul.w	r3, r2, r3
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3714      	adds	r7, #20
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr

0800b69a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b69a:	b580      	push	{r7, lr}
 800b69c:	b082      	sub	sp, #8
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d101      	bne.n	800b6ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	e049      	b.n	800b740 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d106      	bne.n	800b6c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f7f7 fc75 	bl	8002fb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2202      	movs	r2, #2
 800b6ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681a      	ldr	r2, [r3, #0]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	3304      	adds	r3, #4
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	4610      	mov	r0, r2
 800b6da:	f000 fac9 	bl	800bc70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2201      	movs	r2, #1
 800b6ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2201      	movs	r2, #1
 800b6fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2201      	movs	r2, #1
 800b702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2201      	movs	r2, #1
 800b70a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2201      	movs	r2, #1
 800b712:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2201      	movs	r2, #1
 800b71a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2201      	movs	r2, #1
 800b722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2201      	movs	r2, #1
 800b72a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2201      	movs	r2, #1
 800b732:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2201      	movs	r2, #1
 800b73a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b73e:	2300      	movs	r3, #0
}
 800b740:	4618      	mov	r0, r3
 800b742:	3708      	adds	r7, #8
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d101      	bne.n	800b75a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b756:	2301      	movs	r3, #1
 800b758:	e049      	b.n	800b7ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b760:	b2db      	uxtb	r3, r3
 800b762:	2b00      	cmp	r3, #0
 800b764:	d106      	bne.n	800b774 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2200      	movs	r2, #0
 800b76a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f7f7 fb44 	bl	8002dfc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2202      	movs	r2, #2
 800b778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681a      	ldr	r2, [r3, #0]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	3304      	adds	r3, #4
 800b784:	4619      	mov	r1, r3
 800b786:	4610      	mov	r0, r2
 800b788:	f000 fa72 	bl	800bc70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2201      	movs	r2, #1
 800b790:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2201      	movs	r2, #1
 800b798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2201      	movs	r2, #1
 800b7a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2201      	movs	r2, #1
 800b7c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2201      	movs	r2, #1
 800b7e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b7ec:	2300      	movs	r3, #0
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3708      	adds	r7, #8
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}

0800b7f6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800b7f6:	b580      	push	{r7, lr}
 800b7f8:	b082      	sub	sp, #8
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d101      	bne.n	800b808 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800b804:	2301      	movs	r3, #1
 800b806:	e049      	b.n	800b89c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b80e:	b2db      	uxtb	r3, r3
 800b810:	2b00      	cmp	r3, #0
 800b812:	d106      	bne.n	800b822 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2200      	movs	r2, #0
 800b818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f7f7 fb7d 	bl	8002f1c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2202      	movs	r2, #2
 800b826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681a      	ldr	r2, [r3, #0]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	3304      	adds	r3, #4
 800b832:	4619      	mov	r1, r3
 800b834:	4610      	mov	r0, r2
 800b836:	f000 fa1b 	bl	800bc70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2201      	movs	r2, #1
 800b83e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2201      	movs	r2, #1
 800b846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2201      	movs	r2, #1
 800b84e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2201      	movs	r2, #1
 800b856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2201      	movs	r2, #1
 800b85e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2201      	movs	r2, #1
 800b866:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2201      	movs	r2, #1
 800b86e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2201      	movs	r2, #1
 800b876:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2201      	movs	r2, #1
 800b87e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2201      	movs	r2, #1
 800b886:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2201      	movs	r2, #1
 800b88e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2201      	movs	r2, #1
 800b896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b89a:	2300      	movs	r3, #0
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3708      	adds	r7, #8
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b084      	sub	sp, #16
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	60b9      	str	r1, [r7, #8]
 800b8ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8b6:	2b01      	cmp	r3, #1
 800b8b8:	d101      	bne.n	800b8be <HAL_TIM_IC_ConfigChannel+0x1a>
 800b8ba:	2302      	movs	r3, #2
 800b8bc:	e082      	b.n	800b9c4 <HAL_TIM_IC_ConfigChannel+0x120>
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2201      	movs	r2, #1
 800b8c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d11b      	bne.n	800b904 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	6818      	ldr	r0, [r3, #0]
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	6819      	ldr	r1, [r3, #0]
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	685a      	ldr	r2, [r3, #4]
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	68db      	ldr	r3, [r3, #12]
 800b8dc:	f000 fdfa 	bl	800c4d4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	699a      	ldr	r2, [r3, #24]
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f022 020c 	bic.w	r2, r2, #12
 800b8ee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	6999      	ldr	r1, [r3, #24]
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	689a      	ldr	r2, [r3, #8]
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	430a      	orrs	r2, r1
 800b900:	619a      	str	r2, [r3, #24]
 800b902:	e05a      	b.n	800b9ba <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2b04      	cmp	r3, #4
 800b908:	d11c      	bne.n	800b944 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	6818      	ldr	r0, [r3, #0]
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	6819      	ldr	r1, [r3, #0]
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	685a      	ldr	r2, [r3, #4]
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	68db      	ldr	r3, [r3, #12]
 800b91a:	f000 fe7e 	bl	800c61a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	699a      	ldr	r2, [r3, #24]
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b92c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	6999      	ldr	r1, [r3, #24]
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	689b      	ldr	r3, [r3, #8]
 800b938:	021a      	lsls	r2, r3, #8
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	430a      	orrs	r2, r1
 800b940:	619a      	str	r2, [r3, #24]
 800b942:	e03a      	b.n	800b9ba <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2b08      	cmp	r3, #8
 800b948:	d11b      	bne.n	800b982 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	6818      	ldr	r0, [r3, #0]
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	6819      	ldr	r1, [r3, #0]
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	685a      	ldr	r2, [r3, #4]
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	68db      	ldr	r3, [r3, #12]
 800b95a:	f000 fecb 	bl	800c6f4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	69da      	ldr	r2, [r3, #28]
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f022 020c 	bic.w	r2, r2, #12
 800b96c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	69d9      	ldr	r1, [r3, #28]
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	689a      	ldr	r2, [r3, #8]
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	430a      	orrs	r2, r1
 800b97e:	61da      	str	r2, [r3, #28]
 800b980:	e01b      	b.n	800b9ba <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	6818      	ldr	r0, [r3, #0]
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	6819      	ldr	r1, [r3, #0]
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	685a      	ldr	r2, [r3, #4]
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	68db      	ldr	r3, [r3, #12]
 800b992:	f000 feeb 	bl	800c76c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	69da      	ldr	r2, [r3, #28]
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b9a4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	69d9      	ldr	r1, [r3, #28]
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	689b      	ldr	r3, [r3, #8]
 800b9b0:	021a      	lsls	r2, r3, #8
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	430a      	orrs	r2, r1
 800b9b8:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b9c2:	2300      	movs	r3, #0
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3710      	adds	r7, #16
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b084      	sub	sp, #16
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	60b9      	str	r1, [r7, #8]
 800b9d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9de:	2b01      	cmp	r3, #1
 800b9e0:	d101      	bne.n	800b9e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b9e2:	2302      	movs	r3, #2
 800b9e4:	e0fd      	b.n	800bbe2 <HAL_TIM_PWM_ConfigChannel+0x216>
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2b14      	cmp	r3, #20
 800b9f2:	f200 80f0 	bhi.w	800bbd6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800b9f6:	a201      	add	r2, pc, #4	; (adr r2, 800b9fc <HAL_TIM_PWM_ConfigChannel+0x30>)
 800b9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9fc:	0800ba51 	.word	0x0800ba51
 800ba00:	0800bbd7 	.word	0x0800bbd7
 800ba04:	0800bbd7 	.word	0x0800bbd7
 800ba08:	0800bbd7 	.word	0x0800bbd7
 800ba0c:	0800ba91 	.word	0x0800ba91
 800ba10:	0800bbd7 	.word	0x0800bbd7
 800ba14:	0800bbd7 	.word	0x0800bbd7
 800ba18:	0800bbd7 	.word	0x0800bbd7
 800ba1c:	0800bad3 	.word	0x0800bad3
 800ba20:	0800bbd7 	.word	0x0800bbd7
 800ba24:	0800bbd7 	.word	0x0800bbd7
 800ba28:	0800bbd7 	.word	0x0800bbd7
 800ba2c:	0800bb13 	.word	0x0800bb13
 800ba30:	0800bbd7 	.word	0x0800bbd7
 800ba34:	0800bbd7 	.word	0x0800bbd7
 800ba38:	0800bbd7 	.word	0x0800bbd7
 800ba3c:	0800bb55 	.word	0x0800bb55
 800ba40:	0800bbd7 	.word	0x0800bbd7
 800ba44:	0800bbd7 	.word	0x0800bbd7
 800ba48:	0800bbd7 	.word	0x0800bbd7
 800ba4c:	0800bb95 	.word	0x0800bb95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	68b9      	ldr	r1, [r7, #8]
 800ba56:	4618      	mov	r0, r3
 800ba58:	f000 f9a4 	bl	800bda4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	699a      	ldr	r2, [r3, #24]
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f042 0208 	orr.w	r2, r2, #8
 800ba6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	699a      	ldr	r2, [r3, #24]
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f022 0204 	bic.w	r2, r2, #4
 800ba7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	6999      	ldr	r1, [r3, #24]
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	691a      	ldr	r2, [r3, #16]
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	430a      	orrs	r2, r1
 800ba8c:	619a      	str	r2, [r3, #24]
      break;
 800ba8e:	e0a3      	b.n	800bbd8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	68b9      	ldr	r1, [r7, #8]
 800ba96:	4618      	mov	r0, r3
 800ba98:	f000 fa14 	bl	800bec4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	699a      	ldr	r2, [r3, #24]
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800baaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	699a      	ldr	r2, [r3, #24]
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800baba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	6999      	ldr	r1, [r3, #24]
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	691b      	ldr	r3, [r3, #16]
 800bac6:	021a      	lsls	r2, r3, #8
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	430a      	orrs	r2, r1
 800bace:	619a      	str	r2, [r3, #24]
      break;
 800bad0:	e082      	b.n	800bbd8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	68b9      	ldr	r1, [r7, #8]
 800bad8:	4618      	mov	r0, r3
 800bada:	f000 fa7d 	bl	800bfd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	69da      	ldr	r2, [r3, #28]
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f042 0208 	orr.w	r2, r2, #8
 800baec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	69da      	ldr	r2, [r3, #28]
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f022 0204 	bic.w	r2, r2, #4
 800bafc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	69d9      	ldr	r1, [r3, #28]
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	691a      	ldr	r2, [r3, #16]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	430a      	orrs	r2, r1
 800bb0e:	61da      	str	r2, [r3, #28]
      break;
 800bb10:	e062      	b.n	800bbd8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	68b9      	ldr	r1, [r7, #8]
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f000 fae3 	bl	800c0e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	69da      	ldr	r2, [r3, #28]
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	69da      	ldr	r2, [r3, #28]
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	69d9      	ldr	r1, [r3, #28]
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	691b      	ldr	r3, [r3, #16]
 800bb48:	021a      	lsls	r2, r3, #8
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	430a      	orrs	r2, r1
 800bb50:	61da      	str	r2, [r3, #28]
      break;
 800bb52:	e041      	b.n	800bbd8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	68b9      	ldr	r1, [r7, #8]
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f000 fb2a 	bl	800c1b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f042 0208 	orr.w	r2, r2, #8
 800bb6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f022 0204 	bic.w	r2, r2, #4
 800bb7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	691a      	ldr	r2, [r3, #16]
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	430a      	orrs	r2, r1
 800bb90:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bb92:	e021      	b.n	800bbd8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	68b9      	ldr	r1, [r7, #8]
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f000 fb6c 	bl	800c278 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bbae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbbe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	691b      	ldr	r3, [r3, #16]
 800bbca:	021a      	lsls	r2, r3, #8
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	430a      	orrs	r2, r1
 800bbd2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bbd4:	e000      	b.n	800bbd8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800bbd6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bbe0:	2300      	movs	r3, #0
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3710      	adds	r7, #16
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
 800bbea:	bf00      	nop

0800bbec <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b082      	sub	sp, #8
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbfc:	2b01      	cmp	r3, #1
 800bbfe:	d101      	bne.n	800bc04 <HAL_TIM_SlaveConfigSynchro+0x18>
 800bc00:	2302      	movs	r3, #2
 800bc02:	e031      	b.n	800bc68 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2201      	movs	r2, #1
 800bc08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2202      	movs	r2, #2
 800bc10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800bc14:	6839      	ldr	r1, [r7, #0]
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 fb92 	bl	800c340 <TIM_SlaveTimer_SetConfig>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d009      	beq.n	800bc36 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2201      	movs	r2, #1
 800bc26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800bc32:	2301      	movs	r3, #1
 800bc34:	e018      	b.n	800bc68 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	68da      	ldr	r2, [r3, #12]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc44:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	68da      	ldr	r2, [r3, #12]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bc54:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2201      	movs	r2, #1
 800bc5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2200      	movs	r2, #0
 800bc62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc66:	2300      	movs	r3, #0
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3708      	adds	r7, #8
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}

0800bc70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b085      	sub	sp, #20
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	4a40      	ldr	r2, [pc, #256]	; (800bd84 <TIM_Base_SetConfig+0x114>)
 800bc84:	4293      	cmp	r3, r2
 800bc86:	d013      	beq.n	800bcb0 <TIM_Base_SetConfig+0x40>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc8e:	d00f      	beq.n	800bcb0 <TIM_Base_SetConfig+0x40>
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	4a3d      	ldr	r2, [pc, #244]	; (800bd88 <TIM_Base_SetConfig+0x118>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d00b      	beq.n	800bcb0 <TIM_Base_SetConfig+0x40>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	4a3c      	ldr	r2, [pc, #240]	; (800bd8c <TIM_Base_SetConfig+0x11c>)
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d007      	beq.n	800bcb0 <TIM_Base_SetConfig+0x40>
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	4a3b      	ldr	r2, [pc, #236]	; (800bd90 <TIM_Base_SetConfig+0x120>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d003      	beq.n	800bcb0 <TIM_Base_SetConfig+0x40>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	4a3a      	ldr	r2, [pc, #232]	; (800bd94 <TIM_Base_SetConfig+0x124>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d108      	bne.n	800bcc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	68fa      	ldr	r2, [r7, #12]
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	4a2f      	ldr	r2, [pc, #188]	; (800bd84 <TIM_Base_SetConfig+0x114>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d01f      	beq.n	800bd0a <TIM_Base_SetConfig+0x9a>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcd0:	d01b      	beq.n	800bd0a <TIM_Base_SetConfig+0x9a>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	4a2c      	ldr	r2, [pc, #176]	; (800bd88 <TIM_Base_SetConfig+0x118>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d017      	beq.n	800bd0a <TIM_Base_SetConfig+0x9a>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	4a2b      	ldr	r2, [pc, #172]	; (800bd8c <TIM_Base_SetConfig+0x11c>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d013      	beq.n	800bd0a <TIM_Base_SetConfig+0x9a>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	4a2a      	ldr	r2, [pc, #168]	; (800bd90 <TIM_Base_SetConfig+0x120>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d00f      	beq.n	800bd0a <TIM_Base_SetConfig+0x9a>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	4a29      	ldr	r2, [pc, #164]	; (800bd94 <TIM_Base_SetConfig+0x124>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d00b      	beq.n	800bd0a <TIM_Base_SetConfig+0x9a>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	4a28      	ldr	r2, [pc, #160]	; (800bd98 <TIM_Base_SetConfig+0x128>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d007      	beq.n	800bd0a <TIM_Base_SetConfig+0x9a>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	4a27      	ldr	r2, [pc, #156]	; (800bd9c <TIM_Base_SetConfig+0x12c>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d003      	beq.n	800bd0a <TIM_Base_SetConfig+0x9a>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	4a26      	ldr	r2, [pc, #152]	; (800bda0 <TIM_Base_SetConfig+0x130>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d108      	bne.n	800bd1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	68db      	ldr	r3, [r3, #12]
 800bd16:	68fa      	ldr	r2, [r7, #12]
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	695b      	ldr	r3, [r3, #20]
 800bd26:	4313      	orrs	r3, r2
 800bd28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	68fa      	ldr	r2, [r7, #12]
 800bd2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	689a      	ldr	r2, [r3, #8]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	4a10      	ldr	r2, [pc, #64]	; (800bd84 <TIM_Base_SetConfig+0x114>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d00f      	beq.n	800bd68 <TIM_Base_SetConfig+0xf8>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	4a12      	ldr	r2, [pc, #72]	; (800bd94 <TIM_Base_SetConfig+0x124>)
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d00b      	beq.n	800bd68 <TIM_Base_SetConfig+0xf8>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	4a11      	ldr	r2, [pc, #68]	; (800bd98 <TIM_Base_SetConfig+0x128>)
 800bd54:	4293      	cmp	r3, r2
 800bd56:	d007      	beq.n	800bd68 <TIM_Base_SetConfig+0xf8>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	4a10      	ldr	r2, [pc, #64]	; (800bd9c <TIM_Base_SetConfig+0x12c>)
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	d003      	beq.n	800bd68 <TIM_Base_SetConfig+0xf8>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	4a0f      	ldr	r2, [pc, #60]	; (800bda0 <TIM_Base_SetConfig+0x130>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d103      	bne.n	800bd70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	691a      	ldr	r2, [r3, #16]
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2201      	movs	r2, #1
 800bd74:	615a      	str	r2, [r3, #20]
}
 800bd76:	bf00      	nop
 800bd78:	3714      	adds	r7, #20
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd80:	4770      	bx	lr
 800bd82:	bf00      	nop
 800bd84:	40010000 	.word	0x40010000
 800bd88:	40000400 	.word	0x40000400
 800bd8c:	40000800 	.word	0x40000800
 800bd90:	40000c00 	.word	0x40000c00
 800bd94:	40010400 	.word	0x40010400
 800bd98:	40014000 	.word	0x40014000
 800bd9c:	40014400 	.word	0x40014400
 800bda0:	40014800 	.word	0x40014800

0800bda4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b087      	sub	sp, #28
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6a1b      	ldr	r3, [r3, #32]
 800bdb2:	f023 0201 	bic.w	r2, r3, #1
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6a1b      	ldr	r3, [r3, #32]
 800bdbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	699b      	ldr	r3, [r3, #24]
 800bdca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bdcc:	68fa      	ldr	r2, [r7, #12]
 800bdce:	4b37      	ldr	r3, [pc, #220]	; (800beac <TIM_OC1_SetConfig+0x108>)
 800bdd0:	4013      	ands	r3, r2
 800bdd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f023 0303 	bic.w	r3, r3, #3
 800bdda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	68fa      	ldr	r2, [r7, #12]
 800bde2:	4313      	orrs	r3, r2
 800bde4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	f023 0302 	bic.w	r3, r3, #2
 800bdec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	689b      	ldr	r3, [r3, #8]
 800bdf2:	697a      	ldr	r2, [r7, #20]
 800bdf4:	4313      	orrs	r3, r2
 800bdf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	4a2d      	ldr	r2, [pc, #180]	; (800beb0 <TIM_OC1_SetConfig+0x10c>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d00f      	beq.n	800be20 <TIM_OC1_SetConfig+0x7c>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	4a2c      	ldr	r2, [pc, #176]	; (800beb4 <TIM_OC1_SetConfig+0x110>)
 800be04:	4293      	cmp	r3, r2
 800be06:	d00b      	beq.n	800be20 <TIM_OC1_SetConfig+0x7c>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	4a2b      	ldr	r2, [pc, #172]	; (800beb8 <TIM_OC1_SetConfig+0x114>)
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d007      	beq.n	800be20 <TIM_OC1_SetConfig+0x7c>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	4a2a      	ldr	r2, [pc, #168]	; (800bebc <TIM_OC1_SetConfig+0x118>)
 800be14:	4293      	cmp	r3, r2
 800be16:	d003      	beq.n	800be20 <TIM_OC1_SetConfig+0x7c>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	4a29      	ldr	r2, [pc, #164]	; (800bec0 <TIM_OC1_SetConfig+0x11c>)
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d10c      	bne.n	800be3a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	f023 0308 	bic.w	r3, r3, #8
 800be26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	68db      	ldr	r3, [r3, #12]
 800be2c:	697a      	ldr	r2, [r7, #20]
 800be2e:	4313      	orrs	r3, r2
 800be30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	f023 0304 	bic.w	r3, r3, #4
 800be38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	4a1c      	ldr	r2, [pc, #112]	; (800beb0 <TIM_OC1_SetConfig+0x10c>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d00f      	beq.n	800be62 <TIM_OC1_SetConfig+0xbe>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	4a1b      	ldr	r2, [pc, #108]	; (800beb4 <TIM_OC1_SetConfig+0x110>)
 800be46:	4293      	cmp	r3, r2
 800be48:	d00b      	beq.n	800be62 <TIM_OC1_SetConfig+0xbe>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	4a1a      	ldr	r2, [pc, #104]	; (800beb8 <TIM_OC1_SetConfig+0x114>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d007      	beq.n	800be62 <TIM_OC1_SetConfig+0xbe>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	4a19      	ldr	r2, [pc, #100]	; (800bebc <TIM_OC1_SetConfig+0x118>)
 800be56:	4293      	cmp	r3, r2
 800be58:	d003      	beq.n	800be62 <TIM_OC1_SetConfig+0xbe>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	4a18      	ldr	r2, [pc, #96]	; (800bec0 <TIM_OC1_SetConfig+0x11c>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d111      	bne.n	800be86 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800be70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	695b      	ldr	r3, [r3, #20]
 800be76:	693a      	ldr	r2, [r7, #16]
 800be78:	4313      	orrs	r3, r2
 800be7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	699b      	ldr	r3, [r3, #24]
 800be80:	693a      	ldr	r2, [r7, #16]
 800be82:	4313      	orrs	r3, r2
 800be84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	693a      	ldr	r2, [r7, #16]
 800be8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	68fa      	ldr	r2, [r7, #12]
 800be90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	685a      	ldr	r2, [r3, #4]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	697a      	ldr	r2, [r7, #20]
 800be9e:	621a      	str	r2, [r3, #32]
}
 800bea0:	bf00      	nop
 800bea2:	371c      	adds	r7, #28
 800bea4:	46bd      	mov	sp, r7
 800bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beaa:	4770      	bx	lr
 800beac:	fffeff8f 	.word	0xfffeff8f
 800beb0:	40010000 	.word	0x40010000
 800beb4:	40010400 	.word	0x40010400
 800beb8:	40014000 	.word	0x40014000
 800bebc:	40014400 	.word	0x40014400
 800bec0:	40014800 	.word	0x40014800

0800bec4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b087      	sub	sp, #28
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6a1b      	ldr	r3, [r3, #32]
 800bed2:	f023 0210 	bic.w	r2, r3, #16
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6a1b      	ldr	r3, [r3, #32]
 800bede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	699b      	ldr	r3, [r3, #24]
 800beea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800beec:	68fa      	ldr	r2, [r7, #12]
 800beee:	4b34      	ldr	r3, [pc, #208]	; (800bfc0 <TIM_OC2_SetConfig+0xfc>)
 800bef0:	4013      	ands	r3, r2
 800bef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800befa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	021b      	lsls	r3, r3, #8
 800bf02:	68fa      	ldr	r2, [r7, #12]
 800bf04:	4313      	orrs	r3, r2
 800bf06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	f023 0320 	bic.w	r3, r3, #32
 800bf0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	689b      	ldr	r3, [r3, #8]
 800bf14:	011b      	lsls	r3, r3, #4
 800bf16:	697a      	ldr	r2, [r7, #20]
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	4a29      	ldr	r2, [pc, #164]	; (800bfc4 <TIM_OC2_SetConfig+0x100>)
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d003      	beq.n	800bf2c <TIM_OC2_SetConfig+0x68>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	4a28      	ldr	r2, [pc, #160]	; (800bfc8 <TIM_OC2_SetConfig+0x104>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d10d      	bne.n	800bf48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	68db      	ldr	r3, [r3, #12]
 800bf38:	011b      	lsls	r3, r3, #4
 800bf3a:	697a      	ldr	r2, [r7, #20]
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	4a1e      	ldr	r2, [pc, #120]	; (800bfc4 <TIM_OC2_SetConfig+0x100>)
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d00f      	beq.n	800bf70 <TIM_OC2_SetConfig+0xac>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	4a1d      	ldr	r2, [pc, #116]	; (800bfc8 <TIM_OC2_SetConfig+0x104>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d00b      	beq.n	800bf70 <TIM_OC2_SetConfig+0xac>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	4a1c      	ldr	r2, [pc, #112]	; (800bfcc <TIM_OC2_SetConfig+0x108>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d007      	beq.n	800bf70 <TIM_OC2_SetConfig+0xac>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	4a1b      	ldr	r2, [pc, #108]	; (800bfd0 <TIM_OC2_SetConfig+0x10c>)
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d003      	beq.n	800bf70 <TIM_OC2_SetConfig+0xac>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	4a1a      	ldr	r2, [pc, #104]	; (800bfd4 <TIM_OC2_SetConfig+0x110>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d113      	bne.n	800bf98 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bf76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bf7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	695b      	ldr	r3, [r3, #20]
 800bf84:	009b      	lsls	r3, r3, #2
 800bf86:	693a      	ldr	r2, [r7, #16]
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	699b      	ldr	r3, [r3, #24]
 800bf90:	009b      	lsls	r3, r3, #2
 800bf92:	693a      	ldr	r2, [r7, #16]
 800bf94:	4313      	orrs	r3, r2
 800bf96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	693a      	ldr	r2, [r7, #16]
 800bf9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	68fa      	ldr	r2, [r7, #12]
 800bfa2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	685a      	ldr	r2, [r3, #4]
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	697a      	ldr	r2, [r7, #20]
 800bfb0:	621a      	str	r2, [r3, #32]
}
 800bfb2:	bf00      	nop
 800bfb4:	371c      	adds	r7, #28
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbc:	4770      	bx	lr
 800bfbe:	bf00      	nop
 800bfc0:	feff8fff 	.word	0xfeff8fff
 800bfc4:	40010000 	.word	0x40010000
 800bfc8:	40010400 	.word	0x40010400
 800bfcc:	40014000 	.word	0x40014000
 800bfd0:	40014400 	.word	0x40014400
 800bfd4:	40014800 	.word	0x40014800

0800bfd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b087      	sub	sp, #28
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6a1b      	ldr	r3, [r3, #32]
 800bfe6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6a1b      	ldr	r3, [r3, #32]
 800bff2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	685b      	ldr	r3, [r3, #4]
 800bff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	69db      	ldr	r3, [r3, #28]
 800bffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	f023 0303 	bic.w	r3, r3, #3
 800c00e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	68fa      	ldr	r2, [r7, #12]
 800c016:	4313      	orrs	r3, r2
 800c018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	689b      	ldr	r3, [r3, #8]
 800c026:	021b      	lsls	r3, r3, #8
 800c028:	697a      	ldr	r2, [r7, #20]
 800c02a:	4313      	orrs	r3, r2
 800c02c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	4a27      	ldr	r2, [pc, #156]	; (800c0d0 <TIM_OC3_SetConfig+0xf8>)
 800c032:	4293      	cmp	r3, r2
 800c034:	d003      	beq.n	800c03e <TIM_OC3_SetConfig+0x66>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	4a26      	ldr	r2, [pc, #152]	; (800c0d4 <TIM_OC3_SetConfig+0xfc>)
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d10d      	bne.n	800c05a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c044:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	68db      	ldr	r3, [r3, #12]
 800c04a:	021b      	lsls	r3, r3, #8
 800c04c:	697a      	ldr	r2, [r7, #20]
 800c04e:	4313      	orrs	r3, r2
 800c050:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c058:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	4a1c      	ldr	r2, [pc, #112]	; (800c0d0 <TIM_OC3_SetConfig+0xf8>)
 800c05e:	4293      	cmp	r3, r2
 800c060:	d00f      	beq.n	800c082 <TIM_OC3_SetConfig+0xaa>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	4a1b      	ldr	r2, [pc, #108]	; (800c0d4 <TIM_OC3_SetConfig+0xfc>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d00b      	beq.n	800c082 <TIM_OC3_SetConfig+0xaa>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	4a1a      	ldr	r2, [pc, #104]	; (800c0d8 <TIM_OC3_SetConfig+0x100>)
 800c06e:	4293      	cmp	r3, r2
 800c070:	d007      	beq.n	800c082 <TIM_OC3_SetConfig+0xaa>
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	4a19      	ldr	r2, [pc, #100]	; (800c0dc <TIM_OC3_SetConfig+0x104>)
 800c076:	4293      	cmp	r3, r2
 800c078:	d003      	beq.n	800c082 <TIM_OC3_SetConfig+0xaa>
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	4a18      	ldr	r2, [pc, #96]	; (800c0e0 <TIM_OC3_SetConfig+0x108>)
 800c07e:	4293      	cmp	r3, r2
 800c080:	d113      	bne.n	800c0aa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	695b      	ldr	r3, [r3, #20]
 800c096:	011b      	lsls	r3, r3, #4
 800c098:	693a      	ldr	r2, [r7, #16]
 800c09a:	4313      	orrs	r3, r2
 800c09c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	699b      	ldr	r3, [r3, #24]
 800c0a2:	011b      	lsls	r3, r3, #4
 800c0a4:	693a      	ldr	r2, [r7, #16]
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	693a      	ldr	r2, [r7, #16]
 800c0ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	68fa      	ldr	r2, [r7, #12]
 800c0b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	685a      	ldr	r2, [r3, #4]
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	697a      	ldr	r2, [r7, #20]
 800c0c2:	621a      	str	r2, [r3, #32]
}
 800c0c4:	bf00      	nop
 800c0c6:	371c      	adds	r7, #28
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ce:	4770      	bx	lr
 800c0d0:	40010000 	.word	0x40010000
 800c0d4:	40010400 	.word	0x40010400
 800c0d8:	40014000 	.word	0x40014000
 800c0dc:	40014400 	.word	0x40014400
 800c0e0:	40014800 	.word	0x40014800

0800c0e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b087      	sub	sp, #28
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6a1b      	ldr	r3, [r3, #32]
 800c0f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6a1b      	ldr	r3, [r3, #32]
 800c0fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	69db      	ldr	r3, [r3, #28]
 800c10a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c11a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	021b      	lsls	r3, r3, #8
 800c122:	68fa      	ldr	r2, [r7, #12]
 800c124:	4313      	orrs	r3, r2
 800c126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c12e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	689b      	ldr	r3, [r3, #8]
 800c134:	031b      	lsls	r3, r3, #12
 800c136:	693a      	ldr	r2, [r7, #16]
 800c138:	4313      	orrs	r3, r2
 800c13a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	4a18      	ldr	r2, [pc, #96]	; (800c1a0 <TIM_OC4_SetConfig+0xbc>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d00f      	beq.n	800c164 <TIM_OC4_SetConfig+0x80>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	4a17      	ldr	r2, [pc, #92]	; (800c1a4 <TIM_OC4_SetConfig+0xc0>)
 800c148:	4293      	cmp	r3, r2
 800c14a:	d00b      	beq.n	800c164 <TIM_OC4_SetConfig+0x80>
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	4a16      	ldr	r2, [pc, #88]	; (800c1a8 <TIM_OC4_SetConfig+0xc4>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d007      	beq.n	800c164 <TIM_OC4_SetConfig+0x80>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	4a15      	ldr	r2, [pc, #84]	; (800c1ac <TIM_OC4_SetConfig+0xc8>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	d003      	beq.n	800c164 <TIM_OC4_SetConfig+0x80>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	4a14      	ldr	r2, [pc, #80]	; (800c1b0 <TIM_OC4_SetConfig+0xcc>)
 800c160:	4293      	cmp	r3, r2
 800c162:	d109      	bne.n	800c178 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c16a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	695b      	ldr	r3, [r3, #20]
 800c170:	019b      	lsls	r3, r3, #6
 800c172:	697a      	ldr	r2, [r7, #20]
 800c174:	4313      	orrs	r3, r2
 800c176:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	697a      	ldr	r2, [r7, #20]
 800c17c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	68fa      	ldr	r2, [r7, #12]
 800c182:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	685a      	ldr	r2, [r3, #4]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	693a      	ldr	r2, [r7, #16]
 800c190:	621a      	str	r2, [r3, #32]
}
 800c192:	bf00      	nop
 800c194:	371c      	adds	r7, #28
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr
 800c19e:	bf00      	nop
 800c1a0:	40010000 	.word	0x40010000
 800c1a4:	40010400 	.word	0x40010400
 800c1a8:	40014000 	.word	0x40014000
 800c1ac:	40014400 	.word	0x40014400
 800c1b0:	40014800 	.word	0x40014800

0800c1b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b087      	sub	sp, #28
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6a1b      	ldr	r3, [r3, #32]
 800c1c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6a1b      	ldr	r3, [r3, #32]
 800c1ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	68fa      	ldr	r2, [r7, #12]
 800c1ea:	4313      	orrs	r3, r2
 800c1ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c1f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	689b      	ldr	r3, [r3, #8]
 800c1fa:	041b      	lsls	r3, r3, #16
 800c1fc:	693a      	ldr	r2, [r7, #16]
 800c1fe:	4313      	orrs	r3, r2
 800c200:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	4a17      	ldr	r2, [pc, #92]	; (800c264 <TIM_OC5_SetConfig+0xb0>)
 800c206:	4293      	cmp	r3, r2
 800c208:	d00f      	beq.n	800c22a <TIM_OC5_SetConfig+0x76>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	4a16      	ldr	r2, [pc, #88]	; (800c268 <TIM_OC5_SetConfig+0xb4>)
 800c20e:	4293      	cmp	r3, r2
 800c210:	d00b      	beq.n	800c22a <TIM_OC5_SetConfig+0x76>
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	4a15      	ldr	r2, [pc, #84]	; (800c26c <TIM_OC5_SetConfig+0xb8>)
 800c216:	4293      	cmp	r3, r2
 800c218:	d007      	beq.n	800c22a <TIM_OC5_SetConfig+0x76>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	4a14      	ldr	r2, [pc, #80]	; (800c270 <TIM_OC5_SetConfig+0xbc>)
 800c21e:	4293      	cmp	r3, r2
 800c220:	d003      	beq.n	800c22a <TIM_OC5_SetConfig+0x76>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	4a13      	ldr	r2, [pc, #76]	; (800c274 <TIM_OC5_SetConfig+0xc0>)
 800c226:	4293      	cmp	r3, r2
 800c228:	d109      	bne.n	800c23e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c230:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	695b      	ldr	r3, [r3, #20]
 800c236:	021b      	lsls	r3, r3, #8
 800c238:	697a      	ldr	r2, [r7, #20]
 800c23a:	4313      	orrs	r3, r2
 800c23c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	697a      	ldr	r2, [r7, #20]
 800c242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	68fa      	ldr	r2, [r7, #12]
 800c248:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	685a      	ldr	r2, [r3, #4]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	693a      	ldr	r2, [r7, #16]
 800c256:	621a      	str	r2, [r3, #32]
}
 800c258:	bf00      	nop
 800c25a:	371c      	adds	r7, #28
 800c25c:	46bd      	mov	sp, r7
 800c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c262:	4770      	bx	lr
 800c264:	40010000 	.word	0x40010000
 800c268:	40010400 	.word	0x40010400
 800c26c:	40014000 	.word	0x40014000
 800c270:	40014400 	.word	0x40014400
 800c274:	40014800 	.word	0x40014800

0800c278 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c278:	b480      	push	{r7}
 800c27a:	b087      	sub	sp, #28
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6a1b      	ldr	r3, [r3, #32]
 800c286:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6a1b      	ldr	r3, [r3, #32]
 800c292:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	685b      	ldr	r3, [r3, #4]
 800c298:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c29e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c2a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	021b      	lsls	r3, r3, #8
 800c2ae:	68fa      	ldr	r2, [r7, #12]
 800c2b0:	4313      	orrs	r3, r2
 800c2b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c2ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	689b      	ldr	r3, [r3, #8]
 800c2c0:	051b      	lsls	r3, r3, #20
 800c2c2:	693a      	ldr	r2, [r7, #16]
 800c2c4:	4313      	orrs	r3, r2
 800c2c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	4a18      	ldr	r2, [pc, #96]	; (800c32c <TIM_OC6_SetConfig+0xb4>)
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d00f      	beq.n	800c2f0 <TIM_OC6_SetConfig+0x78>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	4a17      	ldr	r2, [pc, #92]	; (800c330 <TIM_OC6_SetConfig+0xb8>)
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d00b      	beq.n	800c2f0 <TIM_OC6_SetConfig+0x78>
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	4a16      	ldr	r2, [pc, #88]	; (800c334 <TIM_OC6_SetConfig+0xbc>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d007      	beq.n	800c2f0 <TIM_OC6_SetConfig+0x78>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	4a15      	ldr	r2, [pc, #84]	; (800c338 <TIM_OC6_SetConfig+0xc0>)
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d003      	beq.n	800c2f0 <TIM_OC6_SetConfig+0x78>
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	4a14      	ldr	r2, [pc, #80]	; (800c33c <TIM_OC6_SetConfig+0xc4>)
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d109      	bne.n	800c304 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c2f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	695b      	ldr	r3, [r3, #20]
 800c2fc:	029b      	lsls	r3, r3, #10
 800c2fe:	697a      	ldr	r2, [r7, #20]
 800c300:	4313      	orrs	r3, r2
 800c302:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	697a      	ldr	r2, [r7, #20]
 800c308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	68fa      	ldr	r2, [r7, #12]
 800c30e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	685a      	ldr	r2, [r3, #4]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	693a      	ldr	r2, [r7, #16]
 800c31c:	621a      	str	r2, [r3, #32]
}
 800c31e:	bf00      	nop
 800c320:	371c      	adds	r7, #28
 800c322:	46bd      	mov	sp, r7
 800c324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c328:	4770      	bx	lr
 800c32a:	bf00      	nop
 800c32c:	40010000 	.word	0x40010000
 800c330:	40010400 	.word	0x40010400
 800c334:	40014000 	.word	0x40014000
 800c338:	40014400 	.word	0x40014400
 800c33c:	40014800 	.word	0x40014800

0800c340 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b086      	sub	sp, #24
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	689b      	ldr	r3, [r3, #8]
 800c350:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c352:	697a      	ldr	r2, [r7, #20]
 800c354:	4b56      	ldr	r3, [pc, #344]	; (800c4b0 <TIM_SlaveTimer_SetConfig+0x170>)
 800c356:	4013      	ands	r3, r2
 800c358:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	697a      	ldr	r2, [r7, #20]
 800c360:	4313      	orrs	r3, r2
 800c362:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800c364:	697a      	ldr	r2, [r7, #20]
 800c366:	4b53      	ldr	r3, [pc, #332]	; (800c4b4 <TIM_SlaveTimer_SetConfig+0x174>)
 800c368:	4013      	ands	r3, r2
 800c36a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	697a      	ldr	r2, [r7, #20]
 800c372:	4313      	orrs	r3, r2
 800c374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	697a      	ldr	r2, [r7, #20]
 800c37c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	685b      	ldr	r3, [r3, #4]
 800c382:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c386:	f000 808c 	beq.w	800c4a2 <TIM_SlaveTimer_SetConfig+0x162>
 800c38a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c38e:	d818      	bhi.n	800c3c2 <TIM_SlaveTimer_SetConfig+0x82>
 800c390:	2b30      	cmp	r3, #48	; 0x30
 800c392:	f000 8086 	beq.w	800c4a2 <TIM_SlaveTimer_SetConfig+0x162>
 800c396:	2b30      	cmp	r3, #48	; 0x30
 800c398:	d807      	bhi.n	800c3aa <TIM_SlaveTimer_SetConfig+0x6a>
 800c39a:	2b10      	cmp	r3, #16
 800c39c:	f000 8081 	beq.w	800c4a2 <TIM_SlaveTimer_SetConfig+0x162>
 800c3a0:	2b20      	cmp	r3, #32
 800c3a2:	d07e      	beq.n	800c4a2 <TIM_SlaveTimer_SetConfig+0x162>
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d07c      	beq.n	800c4a2 <TIM_SlaveTimer_SetConfig+0x162>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800c3a8:	e07c      	b.n	800c4a4 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 800c3aa:	2b50      	cmp	r3, #80	; 0x50
 800c3ac:	d065      	beq.n	800c47a <TIM_SlaveTimer_SetConfig+0x13a>
 800c3ae:	2b50      	cmp	r3, #80	; 0x50
 800c3b0:	d802      	bhi.n	800c3b8 <TIM_SlaveTimer_SetConfig+0x78>
 800c3b2:	2b40      	cmp	r3, #64	; 0x40
 800c3b4:	d038      	beq.n	800c428 <TIM_SlaveTimer_SetConfig+0xe8>
      break;
 800c3b6:	e075      	b.n	800c4a4 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 800c3b8:	2b60      	cmp	r3, #96	; 0x60
 800c3ba:	d068      	beq.n	800c48e <TIM_SlaveTimer_SetConfig+0x14e>
 800c3bc:	2b70      	cmp	r3, #112	; 0x70
 800c3be:	d028      	beq.n	800c412 <TIM_SlaveTimer_SetConfig+0xd2>
      break;
 800c3c0:	e070      	b.n	800c4a4 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 800c3c2:	4a3d      	ldr	r2, [pc, #244]	; (800c4b8 <TIM_SlaveTimer_SetConfig+0x178>)
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d06c      	beq.n	800c4a2 <TIM_SlaveTimer_SetConfig+0x162>
 800c3c8:	4a3b      	ldr	r2, [pc, #236]	; (800c4b8 <TIM_SlaveTimer_SetConfig+0x178>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d810      	bhi.n	800c3f0 <TIM_SlaveTimer_SetConfig+0xb0>
 800c3ce:	4a3b      	ldr	r2, [pc, #236]	; (800c4bc <TIM_SlaveTimer_SetConfig+0x17c>)
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	d066      	beq.n	800c4a2 <TIM_SlaveTimer_SetConfig+0x162>
 800c3d4:	4a39      	ldr	r2, [pc, #228]	; (800c4bc <TIM_SlaveTimer_SetConfig+0x17c>)
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	d803      	bhi.n	800c3e2 <TIM_SlaveTimer_SetConfig+0xa2>
 800c3da:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c3de:	d060      	beq.n	800c4a2 <TIM_SlaveTimer_SetConfig+0x162>
      break;
 800c3e0:	e060      	b.n	800c4a4 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 800c3e2:	4a37      	ldr	r2, [pc, #220]	; (800c4c0 <TIM_SlaveTimer_SetConfig+0x180>)
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	d05c      	beq.n	800c4a2 <TIM_SlaveTimer_SetConfig+0x162>
 800c3e8:	4a36      	ldr	r2, [pc, #216]	; (800c4c4 <TIM_SlaveTimer_SetConfig+0x184>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d059      	beq.n	800c4a2 <TIM_SlaveTimer_SetConfig+0x162>
      break;
 800c3ee:	e059      	b.n	800c4a4 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 800c3f0:	4a35      	ldr	r2, [pc, #212]	; (800c4c8 <TIM_SlaveTimer_SetConfig+0x188>)
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	d055      	beq.n	800c4a2 <TIM_SlaveTimer_SetConfig+0x162>
 800c3f6:	4a34      	ldr	r2, [pc, #208]	; (800c4c8 <TIM_SlaveTimer_SetConfig+0x188>)
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d803      	bhi.n	800c404 <TIM_SlaveTimer_SetConfig+0xc4>
 800c3fc:	4a33      	ldr	r2, [pc, #204]	; (800c4cc <TIM_SlaveTimer_SetConfig+0x18c>)
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d04f      	beq.n	800c4a2 <TIM_SlaveTimer_SetConfig+0x162>
      break;
 800c402:	e04f      	b.n	800c4a4 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 800c404:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c408:	d04b      	beq.n	800c4a2 <TIM_SlaveTimer_SetConfig+0x162>
 800c40a:	4a31      	ldr	r2, [pc, #196]	; (800c4d0 <TIM_SlaveTimer_SetConfig+0x190>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d048      	beq.n	800c4a2 <TIM_SlaveTimer_SetConfig+0x162>
      break;
 800c410:	e048      	b.n	800c4a4 <TIM_SlaveTimer_SetConfig+0x164>
      TIM_ETR_SetConfig(htim->Instance,
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6818      	ldr	r0, [r3, #0]
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	68d9      	ldr	r1, [r3, #12]
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	689a      	ldr	r2, [r3, #8]
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	691b      	ldr	r3, [r3, #16]
 800c422:	f000 f9e0 	bl	800c7e6 <TIM_ETR_SetConfig>
      break;
 800c426:	e03d      	b.n	800c4a4 <TIM_SlaveTimer_SetConfig+0x164>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	2b05      	cmp	r3, #5
 800c42e:	d101      	bne.n	800c434 <TIM_SlaveTimer_SetConfig+0xf4>
        return HAL_ERROR;
 800c430:	2301      	movs	r3, #1
 800c432:	e038      	b.n	800c4a6 <TIM_SlaveTimer_SetConfig+0x166>
      tmpccer = htim->Instance->CCER;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	6a1b      	ldr	r3, [r3, #32]
 800c43a:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	6a1a      	ldr	r2, [r3, #32]
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f022 0201 	bic.w	r2, r2, #1
 800c44a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	699b      	ldr	r3, [r3, #24]
 800c452:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c45a:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	691b      	ldr	r3, [r3, #16]
 800c460:	011b      	lsls	r3, r3, #4
 800c462:	68fa      	ldr	r2, [r7, #12]
 800c464:	4313      	orrs	r3, r2
 800c466:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	68fa      	ldr	r2, [r7, #12]
 800c46e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	693a      	ldr	r2, [r7, #16]
 800c476:	621a      	str	r2, [r3, #32]
      break;
 800c478:	e014      	b.n	800c4a4 <TIM_SlaveTimer_SetConfig+0x164>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6818      	ldr	r0, [r3, #0]
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	6899      	ldr	r1, [r3, #8]
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	691b      	ldr	r3, [r3, #16]
 800c486:	461a      	mov	r2, r3
 800c488:	f000 f898 	bl	800c5bc <TIM_TI1_ConfigInputStage>
      break;
 800c48c:	e00a      	b.n	800c4a4 <TIM_SlaveTimer_SetConfig+0x164>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6818      	ldr	r0, [r3, #0]
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	6899      	ldr	r1, [r3, #8]
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	691b      	ldr	r3, [r3, #16]
 800c49a:	461a      	mov	r2, r3
 800c49c:	f000 f8fa 	bl	800c694 <TIM_TI2_ConfigInputStage>
      break;
 800c4a0:	e000      	b.n	800c4a4 <TIM_SlaveTimer_SetConfig+0x164>
      break;
 800c4a2:	bf00      	nop
  }
  return HAL_OK;
 800c4a4:	2300      	movs	r3, #0
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3718      	adds	r7, #24
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	ffcfff8f 	.word	0xffcfff8f
 800c4b4:	fffefff8 	.word	0xfffefff8
 800c4b8:	00100050 	.word	0x00100050
 800c4bc:	00100020 	.word	0x00100020
 800c4c0:	00100030 	.word	0x00100030
 800c4c4:	00100040 	.word	0x00100040
 800c4c8:	00100070 	.word	0x00100070
 800c4cc:	00100060 	.word	0x00100060
 800c4d0:	00200010 	.word	0x00200010

0800c4d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b087      	sub	sp, #28
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	60f8      	str	r0, [r7, #12]
 800c4dc:	60b9      	str	r1, [r7, #8]
 800c4de:	607a      	str	r2, [r7, #4]
 800c4e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	6a1b      	ldr	r3, [r3, #32]
 800c4e6:	f023 0201 	bic.w	r2, r3, #1
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	699b      	ldr	r3, [r3, #24]
 800c4f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	6a1b      	ldr	r3, [r3, #32]
 800c4f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	4a28      	ldr	r2, [pc, #160]	; (800c5a0 <TIM_TI1_SetConfig+0xcc>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d01b      	beq.n	800c53a <TIM_TI1_SetConfig+0x66>
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c508:	d017      	beq.n	800c53a <TIM_TI1_SetConfig+0x66>
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	4a25      	ldr	r2, [pc, #148]	; (800c5a4 <TIM_TI1_SetConfig+0xd0>)
 800c50e:	4293      	cmp	r3, r2
 800c510:	d013      	beq.n	800c53a <TIM_TI1_SetConfig+0x66>
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	4a24      	ldr	r2, [pc, #144]	; (800c5a8 <TIM_TI1_SetConfig+0xd4>)
 800c516:	4293      	cmp	r3, r2
 800c518:	d00f      	beq.n	800c53a <TIM_TI1_SetConfig+0x66>
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	4a23      	ldr	r2, [pc, #140]	; (800c5ac <TIM_TI1_SetConfig+0xd8>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d00b      	beq.n	800c53a <TIM_TI1_SetConfig+0x66>
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	4a22      	ldr	r2, [pc, #136]	; (800c5b0 <TIM_TI1_SetConfig+0xdc>)
 800c526:	4293      	cmp	r3, r2
 800c528:	d007      	beq.n	800c53a <TIM_TI1_SetConfig+0x66>
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	4a21      	ldr	r2, [pc, #132]	; (800c5b4 <TIM_TI1_SetConfig+0xe0>)
 800c52e:	4293      	cmp	r3, r2
 800c530:	d003      	beq.n	800c53a <TIM_TI1_SetConfig+0x66>
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	4a20      	ldr	r2, [pc, #128]	; (800c5b8 <TIM_TI1_SetConfig+0xe4>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d101      	bne.n	800c53e <TIM_TI1_SetConfig+0x6a>
 800c53a:	2301      	movs	r3, #1
 800c53c:	e000      	b.n	800c540 <TIM_TI1_SetConfig+0x6c>
 800c53e:	2300      	movs	r3, #0
 800c540:	2b00      	cmp	r3, #0
 800c542:	d008      	beq.n	800c556 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	f023 0303 	bic.w	r3, r3, #3
 800c54a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800c54c:	697a      	ldr	r2, [r7, #20]
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	4313      	orrs	r3, r2
 800c552:	617b      	str	r3, [r7, #20]
 800c554:	e003      	b.n	800c55e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	f043 0301 	orr.w	r3, r3, #1
 800c55c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c564:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	011b      	lsls	r3, r3, #4
 800c56a:	b2db      	uxtb	r3, r3
 800c56c:	697a      	ldr	r2, [r7, #20]
 800c56e:	4313      	orrs	r3, r2
 800c570:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	f023 030a 	bic.w	r3, r3, #10
 800c578:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	f003 030a 	and.w	r3, r3, #10
 800c580:	693a      	ldr	r2, [r7, #16]
 800c582:	4313      	orrs	r3, r2
 800c584:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	697a      	ldr	r2, [r7, #20]
 800c58a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	693a      	ldr	r2, [r7, #16]
 800c590:	621a      	str	r2, [r3, #32]
}
 800c592:	bf00      	nop
 800c594:	371c      	adds	r7, #28
 800c596:	46bd      	mov	sp, r7
 800c598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59c:	4770      	bx	lr
 800c59e:	bf00      	nop
 800c5a0:	40010000 	.word	0x40010000
 800c5a4:	40000400 	.word	0x40000400
 800c5a8:	40000800 	.word	0x40000800
 800c5ac:	40000c00 	.word	0x40000c00
 800c5b0:	40010400 	.word	0x40010400
 800c5b4:	40001800 	.word	0x40001800
 800c5b8:	40014000 	.word	0x40014000

0800c5bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b087      	sub	sp, #28
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	60b9      	str	r1, [r7, #8]
 800c5c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	6a1b      	ldr	r3, [r3, #32]
 800c5cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	6a1b      	ldr	r3, [r3, #32]
 800c5d2:	f023 0201 	bic.w	r2, r3, #1
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	699b      	ldr	r3, [r3, #24]
 800c5de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c5e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	011b      	lsls	r3, r3, #4
 800c5ec:	693a      	ldr	r2, [r7, #16]
 800c5ee:	4313      	orrs	r3, r2
 800c5f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	f023 030a 	bic.w	r3, r3, #10
 800c5f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c5fa:	697a      	ldr	r2, [r7, #20]
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	4313      	orrs	r3, r2
 800c600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	693a      	ldr	r2, [r7, #16]
 800c606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	697a      	ldr	r2, [r7, #20]
 800c60c:	621a      	str	r2, [r3, #32]
}
 800c60e:	bf00      	nop
 800c610:	371c      	adds	r7, #28
 800c612:	46bd      	mov	sp, r7
 800c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c618:	4770      	bx	lr

0800c61a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c61a:	b480      	push	{r7}
 800c61c:	b087      	sub	sp, #28
 800c61e:	af00      	add	r7, sp, #0
 800c620:	60f8      	str	r0, [r7, #12]
 800c622:	60b9      	str	r1, [r7, #8]
 800c624:	607a      	str	r2, [r7, #4]
 800c626:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	6a1b      	ldr	r3, [r3, #32]
 800c62c:	f023 0210 	bic.w	r2, r3, #16
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	699b      	ldr	r3, [r3, #24]
 800c638:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	6a1b      	ldr	r3, [r3, #32]
 800c63e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c646:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	021b      	lsls	r3, r3, #8
 800c64c:	697a      	ldr	r2, [r7, #20]
 800c64e:	4313      	orrs	r3, r2
 800c650:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c658:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	031b      	lsls	r3, r3, #12
 800c65e:	b29b      	uxth	r3, r3
 800c660:	697a      	ldr	r2, [r7, #20]
 800c662:	4313      	orrs	r3, r2
 800c664:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c66c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	011b      	lsls	r3, r3, #4
 800c672:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c676:	693a      	ldr	r2, [r7, #16]
 800c678:	4313      	orrs	r3, r2
 800c67a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	697a      	ldr	r2, [r7, #20]
 800c680:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	693a      	ldr	r2, [r7, #16]
 800c686:	621a      	str	r2, [r3, #32]
}
 800c688:	bf00      	nop
 800c68a:	371c      	adds	r7, #28
 800c68c:	46bd      	mov	sp, r7
 800c68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c692:	4770      	bx	lr

0800c694 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c694:	b480      	push	{r7}
 800c696:	b087      	sub	sp, #28
 800c698:	af00      	add	r7, sp, #0
 800c69a:	60f8      	str	r0, [r7, #12]
 800c69c:	60b9      	str	r1, [r7, #8]
 800c69e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	6a1b      	ldr	r3, [r3, #32]
 800c6a4:	f023 0210 	bic.w	r2, r3, #16
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	699b      	ldr	r3, [r3, #24]
 800c6b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	6a1b      	ldr	r3, [r3, #32]
 800c6b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c6be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	031b      	lsls	r3, r3, #12
 800c6c4:	697a      	ldr	r2, [r7, #20]
 800c6c6:	4313      	orrs	r3, r2
 800c6c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c6ca:	693b      	ldr	r3, [r7, #16]
 800c6cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c6d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	011b      	lsls	r3, r3, #4
 800c6d6:	693a      	ldr	r2, [r7, #16]
 800c6d8:	4313      	orrs	r3, r2
 800c6da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	697a      	ldr	r2, [r7, #20]
 800c6e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	693a      	ldr	r2, [r7, #16]
 800c6e6:	621a      	str	r2, [r3, #32]
}
 800c6e8:	bf00      	nop
 800c6ea:	371c      	adds	r7, #28
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f2:	4770      	bx	lr

0800c6f4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b087      	sub	sp, #28
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	60f8      	str	r0, [r7, #12]
 800c6fc:	60b9      	str	r1, [r7, #8]
 800c6fe:	607a      	str	r2, [r7, #4]
 800c700:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	6a1b      	ldr	r3, [r3, #32]
 800c706:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	69db      	ldr	r3, [r3, #28]
 800c712:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	6a1b      	ldr	r3, [r3, #32]
 800c718:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	f023 0303 	bic.w	r3, r3, #3
 800c720:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800c722:	697a      	ldr	r2, [r7, #20]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	4313      	orrs	r3, r2
 800c728:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c730:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	011b      	lsls	r3, r3, #4
 800c736:	b2db      	uxtb	r3, r3
 800c738:	697a      	ldr	r2, [r7, #20]
 800c73a:	4313      	orrs	r3, r2
 800c73c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800c744:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	021b      	lsls	r3, r3, #8
 800c74a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800c74e:	693a      	ldr	r2, [r7, #16]
 800c750:	4313      	orrs	r3, r2
 800c752:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	697a      	ldr	r2, [r7, #20]
 800c758:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	693a      	ldr	r2, [r7, #16]
 800c75e:	621a      	str	r2, [r3, #32]
}
 800c760:	bf00      	nop
 800c762:	371c      	adds	r7, #28
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr

0800c76c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c76c:	b480      	push	{r7}
 800c76e:	b087      	sub	sp, #28
 800c770:	af00      	add	r7, sp, #0
 800c772:	60f8      	str	r0, [r7, #12]
 800c774:	60b9      	str	r1, [r7, #8]
 800c776:	607a      	str	r2, [r7, #4]
 800c778:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	6a1b      	ldr	r3, [r3, #32]
 800c77e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	69db      	ldr	r3, [r3, #28]
 800c78a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	6a1b      	ldr	r3, [r3, #32]
 800c790:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c798:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	021b      	lsls	r3, r3, #8
 800c79e:	697a      	ldr	r2, [r7, #20]
 800c7a0:	4313      	orrs	r3, r2
 800c7a2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c7aa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	031b      	lsls	r3, r3, #12
 800c7b0:	b29b      	uxth	r3, r3
 800c7b2:	697a      	ldr	r2, [r7, #20]
 800c7b4:	4313      	orrs	r3, r2
 800c7b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800c7b8:	693b      	ldr	r3, [r7, #16]
 800c7ba:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800c7be:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	031b      	lsls	r3, r3, #12
 800c7c4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800c7c8:	693a      	ldr	r2, [r7, #16]
 800c7ca:	4313      	orrs	r3, r2
 800c7cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	697a      	ldr	r2, [r7, #20]
 800c7d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	693a      	ldr	r2, [r7, #16]
 800c7d8:	621a      	str	r2, [r3, #32]
}
 800c7da:	bf00      	nop
 800c7dc:	371c      	adds	r7, #28
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e4:	4770      	bx	lr

0800c7e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c7e6:	b480      	push	{r7}
 800c7e8:	b087      	sub	sp, #28
 800c7ea:	af00      	add	r7, sp, #0
 800c7ec:	60f8      	str	r0, [r7, #12]
 800c7ee:	60b9      	str	r1, [r7, #8]
 800c7f0:	607a      	str	r2, [r7, #4]
 800c7f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	689b      	ldr	r3, [r3, #8]
 800c7f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c800:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	021a      	lsls	r2, r3, #8
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	431a      	orrs	r2, r3
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	4313      	orrs	r3, r2
 800c80e:	697a      	ldr	r2, [r7, #20]
 800c810:	4313      	orrs	r3, r2
 800c812:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	697a      	ldr	r2, [r7, #20]
 800c818:	609a      	str	r2, [r3, #8]
}
 800c81a:	bf00      	nop
 800c81c:	371c      	adds	r7, #28
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr
	...

0800c828 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c828:	b480      	push	{r7}
 800c82a:	b085      	sub	sp, #20
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c838:	2b01      	cmp	r3, #1
 800c83a:	d101      	bne.n	800c840 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c83c:	2302      	movs	r3, #2
 800c83e:	e068      	b.n	800c912 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2201      	movs	r2, #1
 800c844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2202      	movs	r2, #2
 800c84c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	685b      	ldr	r3, [r3, #4]
 800c856:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	689b      	ldr	r3, [r3, #8]
 800c85e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	4a2e      	ldr	r2, [pc, #184]	; (800c920 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c866:	4293      	cmp	r3, r2
 800c868:	d004      	beq.n	800c874 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	4a2d      	ldr	r2, [pc, #180]	; (800c924 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c870:	4293      	cmp	r3, r2
 800c872:	d108      	bne.n	800c886 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c87a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	685b      	ldr	r3, [r3, #4]
 800c880:	68fa      	ldr	r2, [r7, #12]
 800c882:	4313      	orrs	r3, r2
 800c884:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c88c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	68fa      	ldr	r2, [r7, #12]
 800c894:	4313      	orrs	r3, r2
 800c896:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	68fa      	ldr	r2, [r7, #12]
 800c89e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4a1e      	ldr	r2, [pc, #120]	; (800c920 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d01d      	beq.n	800c8e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8b2:	d018      	beq.n	800c8e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	4a1b      	ldr	r2, [pc, #108]	; (800c928 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d013      	beq.n	800c8e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4a1a      	ldr	r2, [pc, #104]	; (800c92c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d00e      	beq.n	800c8e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4a18      	ldr	r2, [pc, #96]	; (800c930 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d009      	beq.n	800c8e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	4a13      	ldr	r2, [pc, #76]	; (800c924 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d004      	beq.n	800c8e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4a14      	ldr	r2, [pc, #80]	; (800c934 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d10c      	bne.n	800c900 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c8ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	689b      	ldr	r3, [r3, #8]
 800c8f2:	68ba      	ldr	r2, [r7, #8]
 800c8f4:	4313      	orrs	r3, r2
 800c8f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	68ba      	ldr	r2, [r7, #8]
 800c8fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2201      	movs	r2, #1
 800c904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2200      	movs	r2, #0
 800c90c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c910:	2300      	movs	r3, #0
}
 800c912:	4618      	mov	r0, r3
 800c914:	3714      	adds	r7, #20
 800c916:	46bd      	mov	sp, r7
 800c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91c:	4770      	bx	lr
 800c91e:	bf00      	nop
 800c920:	40010000 	.word	0x40010000
 800c924:	40010400 	.word	0x40010400
 800c928:	40000400 	.word	0x40000400
 800c92c:	40000800 	.word	0x40000800
 800c930:	40000c00 	.word	0x40000c00
 800c934:	40001800 	.word	0x40001800

0800c938 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c938:	b480      	push	{r7}
 800c93a:	b085      	sub	sp, #20
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
 800c940:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c942:	2300      	movs	r3, #0
 800c944:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c94c:	2b01      	cmp	r3, #1
 800c94e:	d101      	bne.n	800c954 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c950:	2302      	movs	r3, #2
 800c952:	e065      	b.n	800ca20 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2201      	movs	r2, #1
 800c958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	68db      	ldr	r3, [r3, #12]
 800c966:	4313      	orrs	r3, r2
 800c968:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	689b      	ldr	r3, [r3, #8]
 800c974:	4313      	orrs	r3, r2
 800c976:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	4313      	orrs	r3, r2
 800c984:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	4313      	orrs	r3, r2
 800c992:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	691b      	ldr	r3, [r3, #16]
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	695b      	ldr	r3, [r3, #20]
 800c9ac:	4313      	orrs	r3, r2
 800c9ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9ba:	4313      	orrs	r3, r2
 800c9bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	699b      	ldr	r3, [r3, #24]
 800c9c8:	041b      	lsls	r3, r3, #16
 800c9ca:	4313      	orrs	r3, r2
 800c9cc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	4a16      	ldr	r2, [pc, #88]	; (800ca2c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	d004      	beq.n	800c9e2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	4a14      	ldr	r2, [pc, #80]	; (800ca30 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d115      	bne.n	800ca0e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ec:	051b      	lsls	r3, r3, #20
 800c9ee:	4313      	orrs	r3, r2
 800c9f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	69db      	ldr	r3, [r3, #28]
 800c9fc:	4313      	orrs	r3, r2
 800c9fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	6a1b      	ldr	r3, [r3, #32]
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	68fa      	ldr	r2, [r7, #12]
 800ca14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2200      	movs	r2, #0
 800ca1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ca1e:	2300      	movs	r3, #0
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3714      	adds	r7, #20
 800ca24:	46bd      	mov	sp, r7
 800ca26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2a:	4770      	bx	lr
 800ca2c:	40010000 	.word	0x40010000
 800ca30:	40010400 	.word	0x40010400

0800ca34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b082      	sub	sp, #8
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d101      	bne.n	800ca46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ca42:	2301      	movs	r3, #1
 800ca44:	e042      	b.n	800cacc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d106      	bne.n	800ca5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2200      	movs	r2, #0
 800ca54:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f7f6 fc95 	bl	8003388 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2224      	movs	r2, #36	; 0x24
 800ca62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f022 0201 	bic.w	r2, r2, #1
 800ca74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f000 f82c 	bl	800cad4 <UART_SetConfig>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	2b01      	cmp	r3, #1
 800ca80:	d101      	bne.n	800ca86 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ca82:	2301      	movs	r3, #1
 800ca84:	e022      	b.n	800cacc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d002      	beq.n	800ca94 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f000 fdd0 	bl	800d634 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	685a      	ldr	r2, [r3, #4]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800caa2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	689a      	ldr	r2, [r3, #8]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cab2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	681a      	ldr	r2, [r3, #0]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f042 0201 	orr.w	r2, r2, #1
 800cac2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f000 fe57 	bl	800d778 <UART_CheckIdleState>
 800caca:	4603      	mov	r3, r0
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3708      	adds	r7, #8
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}

0800cad4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cad4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800cad8:	b08e      	sub	sp, #56	; 0x38
 800cada:	af00      	add	r7, sp, #0
 800cadc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cade:	2300      	movs	r3, #0
 800cae0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	689a      	ldr	r2, [r3, #8]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	691b      	ldr	r3, [r3, #16]
 800caec:	431a      	orrs	r2, r3
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	695b      	ldr	r3, [r3, #20]
 800caf2:	431a      	orrs	r2, r3
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	69db      	ldr	r3, [r3, #28]
 800caf8:	4313      	orrs	r3, r2
 800cafa:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb02:	4313      	orrs	r3, r2
 800cb04:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	681a      	ldr	r2, [r3, #0]
 800cb0c:	4bc1      	ldr	r3, [pc, #772]	; (800ce14 <UART_SetConfig+0x340>)
 800cb0e:	4013      	ands	r3, r2
 800cb10:	687a      	ldr	r2, [r7, #4]
 800cb12:	6812      	ldr	r2, [r2, #0]
 800cb14:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cb16:	430b      	orrs	r3, r1
 800cb18:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	68da      	ldr	r2, [r3, #12]
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	430a      	orrs	r2, r1
 800cb2e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	699b      	ldr	r3, [r3, #24]
 800cb34:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	4ab7      	ldr	r2, [pc, #732]	; (800ce18 <UART_SetConfig+0x344>)
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	d004      	beq.n	800cb4a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6a1b      	ldr	r3, [r3, #32]
 800cb44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb46:	4313      	orrs	r3, r2
 800cb48:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	689a      	ldr	r2, [r3, #8]
 800cb50:	4bb2      	ldr	r3, [pc, #712]	; (800ce1c <UART_SetConfig+0x348>)
 800cb52:	4013      	ands	r3, r2
 800cb54:	687a      	ldr	r2, [r7, #4]
 800cb56:	6812      	ldr	r2, [r2, #0]
 800cb58:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cb5a:	430b      	orrs	r3, r1
 800cb5c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb64:	f023 010f 	bic.w	r1, r3, #15
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	430a      	orrs	r2, r1
 800cb72:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	4aa9      	ldr	r2, [pc, #676]	; (800ce20 <UART_SetConfig+0x34c>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d177      	bne.n	800cc6e <UART_SetConfig+0x19a>
 800cb7e:	4ba9      	ldr	r3, [pc, #676]	; (800ce24 <UART_SetConfig+0x350>)
 800cb80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cb86:	2b28      	cmp	r3, #40	; 0x28
 800cb88:	d86c      	bhi.n	800cc64 <UART_SetConfig+0x190>
 800cb8a:	a201      	add	r2, pc, #4	; (adr r2, 800cb90 <UART_SetConfig+0xbc>)
 800cb8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb90:	0800cc35 	.word	0x0800cc35
 800cb94:	0800cc65 	.word	0x0800cc65
 800cb98:	0800cc65 	.word	0x0800cc65
 800cb9c:	0800cc65 	.word	0x0800cc65
 800cba0:	0800cc65 	.word	0x0800cc65
 800cba4:	0800cc65 	.word	0x0800cc65
 800cba8:	0800cc65 	.word	0x0800cc65
 800cbac:	0800cc65 	.word	0x0800cc65
 800cbb0:	0800cc3d 	.word	0x0800cc3d
 800cbb4:	0800cc65 	.word	0x0800cc65
 800cbb8:	0800cc65 	.word	0x0800cc65
 800cbbc:	0800cc65 	.word	0x0800cc65
 800cbc0:	0800cc65 	.word	0x0800cc65
 800cbc4:	0800cc65 	.word	0x0800cc65
 800cbc8:	0800cc65 	.word	0x0800cc65
 800cbcc:	0800cc65 	.word	0x0800cc65
 800cbd0:	0800cc45 	.word	0x0800cc45
 800cbd4:	0800cc65 	.word	0x0800cc65
 800cbd8:	0800cc65 	.word	0x0800cc65
 800cbdc:	0800cc65 	.word	0x0800cc65
 800cbe0:	0800cc65 	.word	0x0800cc65
 800cbe4:	0800cc65 	.word	0x0800cc65
 800cbe8:	0800cc65 	.word	0x0800cc65
 800cbec:	0800cc65 	.word	0x0800cc65
 800cbf0:	0800cc4d 	.word	0x0800cc4d
 800cbf4:	0800cc65 	.word	0x0800cc65
 800cbf8:	0800cc65 	.word	0x0800cc65
 800cbfc:	0800cc65 	.word	0x0800cc65
 800cc00:	0800cc65 	.word	0x0800cc65
 800cc04:	0800cc65 	.word	0x0800cc65
 800cc08:	0800cc65 	.word	0x0800cc65
 800cc0c:	0800cc65 	.word	0x0800cc65
 800cc10:	0800cc55 	.word	0x0800cc55
 800cc14:	0800cc65 	.word	0x0800cc65
 800cc18:	0800cc65 	.word	0x0800cc65
 800cc1c:	0800cc65 	.word	0x0800cc65
 800cc20:	0800cc65 	.word	0x0800cc65
 800cc24:	0800cc65 	.word	0x0800cc65
 800cc28:	0800cc65 	.word	0x0800cc65
 800cc2c:	0800cc65 	.word	0x0800cc65
 800cc30:	0800cc5d 	.word	0x0800cc5d
 800cc34:	2301      	movs	r3, #1
 800cc36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc3a:	e233      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cc3c:	2304      	movs	r3, #4
 800cc3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc42:	e22f      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cc44:	2308      	movs	r3, #8
 800cc46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc4a:	e22b      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cc4c:	2310      	movs	r3, #16
 800cc4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc52:	e227      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cc54:	2320      	movs	r3, #32
 800cc56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc5a:	e223      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cc5c:	2340      	movs	r3, #64	; 0x40
 800cc5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc62:	e21f      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cc64:	2380      	movs	r3, #128	; 0x80
 800cc66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc6a:	bf00      	nop
 800cc6c:	e21a      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	4a6d      	ldr	r2, [pc, #436]	; (800ce28 <UART_SetConfig+0x354>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d132      	bne.n	800ccde <UART_SetConfig+0x20a>
 800cc78:	4b6a      	ldr	r3, [pc, #424]	; (800ce24 <UART_SetConfig+0x350>)
 800cc7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc7c:	f003 0307 	and.w	r3, r3, #7
 800cc80:	2b05      	cmp	r3, #5
 800cc82:	d827      	bhi.n	800ccd4 <UART_SetConfig+0x200>
 800cc84:	a201      	add	r2, pc, #4	; (adr r2, 800cc8c <UART_SetConfig+0x1b8>)
 800cc86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc8a:	bf00      	nop
 800cc8c:	0800cca5 	.word	0x0800cca5
 800cc90:	0800ccad 	.word	0x0800ccad
 800cc94:	0800ccb5 	.word	0x0800ccb5
 800cc98:	0800ccbd 	.word	0x0800ccbd
 800cc9c:	0800ccc5 	.word	0x0800ccc5
 800cca0:	0800cccd 	.word	0x0800cccd
 800cca4:	2300      	movs	r3, #0
 800cca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccaa:	e1fb      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800ccac:	2304      	movs	r3, #4
 800ccae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccb2:	e1f7      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800ccb4:	2308      	movs	r3, #8
 800ccb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccba:	e1f3      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800ccbc:	2310      	movs	r3, #16
 800ccbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccc2:	e1ef      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800ccc4:	2320      	movs	r3, #32
 800ccc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccca:	e1eb      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cccc:	2340      	movs	r3, #64	; 0x40
 800ccce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccd2:	e1e7      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800ccd4:	2380      	movs	r3, #128	; 0x80
 800ccd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccda:	bf00      	nop
 800ccdc:	e1e2      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	4a52      	ldr	r2, [pc, #328]	; (800ce2c <UART_SetConfig+0x358>)
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d132      	bne.n	800cd4e <UART_SetConfig+0x27a>
 800cce8:	4b4e      	ldr	r3, [pc, #312]	; (800ce24 <UART_SetConfig+0x350>)
 800ccea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccec:	f003 0307 	and.w	r3, r3, #7
 800ccf0:	2b05      	cmp	r3, #5
 800ccf2:	d827      	bhi.n	800cd44 <UART_SetConfig+0x270>
 800ccf4:	a201      	add	r2, pc, #4	; (adr r2, 800ccfc <UART_SetConfig+0x228>)
 800ccf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccfa:	bf00      	nop
 800ccfc:	0800cd15 	.word	0x0800cd15
 800cd00:	0800cd1d 	.word	0x0800cd1d
 800cd04:	0800cd25 	.word	0x0800cd25
 800cd08:	0800cd2d 	.word	0x0800cd2d
 800cd0c:	0800cd35 	.word	0x0800cd35
 800cd10:	0800cd3d 	.word	0x0800cd3d
 800cd14:	2300      	movs	r3, #0
 800cd16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd1a:	e1c3      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cd1c:	2304      	movs	r3, #4
 800cd1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd22:	e1bf      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cd24:	2308      	movs	r3, #8
 800cd26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd2a:	e1bb      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cd2c:	2310      	movs	r3, #16
 800cd2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd32:	e1b7      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cd34:	2320      	movs	r3, #32
 800cd36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd3a:	e1b3      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cd3c:	2340      	movs	r3, #64	; 0x40
 800cd3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd42:	e1af      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cd44:	2380      	movs	r3, #128	; 0x80
 800cd46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd4a:	bf00      	nop
 800cd4c:	e1aa      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	4a37      	ldr	r2, [pc, #220]	; (800ce30 <UART_SetConfig+0x35c>)
 800cd54:	4293      	cmp	r3, r2
 800cd56:	d132      	bne.n	800cdbe <UART_SetConfig+0x2ea>
 800cd58:	4b32      	ldr	r3, [pc, #200]	; (800ce24 <UART_SetConfig+0x350>)
 800cd5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd5c:	f003 0307 	and.w	r3, r3, #7
 800cd60:	2b05      	cmp	r3, #5
 800cd62:	d827      	bhi.n	800cdb4 <UART_SetConfig+0x2e0>
 800cd64:	a201      	add	r2, pc, #4	; (adr r2, 800cd6c <UART_SetConfig+0x298>)
 800cd66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd6a:	bf00      	nop
 800cd6c:	0800cd85 	.word	0x0800cd85
 800cd70:	0800cd8d 	.word	0x0800cd8d
 800cd74:	0800cd95 	.word	0x0800cd95
 800cd78:	0800cd9d 	.word	0x0800cd9d
 800cd7c:	0800cda5 	.word	0x0800cda5
 800cd80:	0800cdad 	.word	0x0800cdad
 800cd84:	2300      	movs	r3, #0
 800cd86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd8a:	e18b      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cd8c:	2304      	movs	r3, #4
 800cd8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd92:	e187      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cd94:	2308      	movs	r3, #8
 800cd96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd9a:	e183      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cd9c:	2310      	movs	r3, #16
 800cd9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cda2:	e17f      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cda4:	2320      	movs	r3, #32
 800cda6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdaa:	e17b      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cdac:	2340      	movs	r3, #64	; 0x40
 800cdae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdb2:	e177      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cdb4:	2380      	movs	r3, #128	; 0x80
 800cdb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdba:	bf00      	nop
 800cdbc:	e172      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	4a1c      	ldr	r2, [pc, #112]	; (800ce34 <UART_SetConfig+0x360>)
 800cdc4:	4293      	cmp	r3, r2
 800cdc6:	d144      	bne.n	800ce52 <UART_SetConfig+0x37e>
 800cdc8:	4b16      	ldr	r3, [pc, #88]	; (800ce24 <UART_SetConfig+0x350>)
 800cdca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdcc:	f003 0307 	and.w	r3, r3, #7
 800cdd0:	2b05      	cmp	r3, #5
 800cdd2:	d839      	bhi.n	800ce48 <UART_SetConfig+0x374>
 800cdd4:	a201      	add	r2, pc, #4	; (adr r2, 800cddc <UART_SetConfig+0x308>)
 800cdd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdda:	bf00      	nop
 800cddc:	0800cdf5 	.word	0x0800cdf5
 800cde0:	0800cdfd 	.word	0x0800cdfd
 800cde4:	0800ce05 	.word	0x0800ce05
 800cde8:	0800ce0d 	.word	0x0800ce0d
 800cdec:	0800ce39 	.word	0x0800ce39
 800cdf0:	0800ce41 	.word	0x0800ce41
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdfa:	e153      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cdfc:	2304      	movs	r3, #4
 800cdfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce02:	e14f      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800ce04:	2308      	movs	r3, #8
 800ce06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce0a:	e14b      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800ce0c:	2310      	movs	r3, #16
 800ce0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce12:	e147      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800ce14:	cfff69f3 	.word	0xcfff69f3
 800ce18:	58000c00 	.word	0x58000c00
 800ce1c:	11fff4ff 	.word	0x11fff4ff
 800ce20:	40011000 	.word	0x40011000
 800ce24:	58024400 	.word	0x58024400
 800ce28:	40004400 	.word	0x40004400
 800ce2c:	40004800 	.word	0x40004800
 800ce30:	40004c00 	.word	0x40004c00
 800ce34:	40005000 	.word	0x40005000
 800ce38:	2320      	movs	r3, #32
 800ce3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce3e:	e131      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800ce40:	2340      	movs	r3, #64	; 0x40
 800ce42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce46:	e12d      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800ce48:	2380      	movs	r3, #128	; 0x80
 800ce4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce4e:	bf00      	nop
 800ce50:	e128      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	4ab6      	ldr	r2, [pc, #728]	; (800d130 <UART_SetConfig+0x65c>)
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	d178      	bne.n	800cf4e <UART_SetConfig+0x47a>
 800ce5c:	4bb5      	ldr	r3, [pc, #724]	; (800d134 <UART_SetConfig+0x660>)
 800ce5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ce64:	2b28      	cmp	r3, #40	; 0x28
 800ce66:	d86d      	bhi.n	800cf44 <UART_SetConfig+0x470>
 800ce68:	a201      	add	r2, pc, #4	; (adr r2, 800ce70 <UART_SetConfig+0x39c>)
 800ce6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce6e:	bf00      	nop
 800ce70:	0800cf15 	.word	0x0800cf15
 800ce74:	0800cf45 	.word	0x0800cf45
 800ce78:	0800cf45 	.word	0x0800cf45
 800ce7c:	0800cf45 	.word	0x0800cf45
 800ce80:	0800cf45 	.word	0x0800cf45
 800ce84:	0800cf45 	.word	0x0800cf45
 800ce88:	0800cf45 	.word	0x0800cf45
 800ce8c:	0800cf45 	.word	0x0800cf45
 800ce90:	0800cf1d 	.word	0x0800cf1d
 800ce94:	0800cf45 	.word	0x0800cf45
 800ce98:	0800cf45 	.word	0x0800cf45
 800ce9c:	0800cf45 	.word	0x0800cf45
 800cea0:	0800cf45 	.word	0x0800cf45
 800cea4:	0800cf45 	.word	0x0800cf45
 800cea8:	0800cf45 	.word	0x0800cf45
 800ceac:	0800cf45 	.word	0x0800cf45
 800ceb0:	0800cf25 	.word	0x0800cf25
 800ceb4:	0800cf45 	.word	0x0800cf45
 800ceb8:	0800cf45 	.word	0x0800cf45
 800cebc:	0800cf45 	.word	0x0800cf45
 800cec0:	0800cf45 	.word	0x0800cf45
 800cec4:	0800cf45 	.word	0x0800cf45
 800cec8:	0800cf45 	.word	0x0800cf45
 800cecc:	0800cf45 	.word	0x0800cf45
 800ced0:	0800cf2d 	.word	0x0800cf2d
 800ced4:	0800cf45 	.word	0x0800cf45
 800ced8:	0800cf45 	.word	0x0800cf45
 800cedc:	0800cf45 	.word	0x0800cf45
 800cee0:	0800cf45 	.word	0x0800cf45
 800cee4:	0800cf45 	.word	0x0800cf45
 800cee8:	0800cf45 	.word	0x0800cf45
 800ceec:	0800cf45 	.word	0x0800cf45
 800cef0:	0800cf35 	.word	0x0800cf35
 800cef4:	0800cf45 	.word	0x0800cf45
 800cef8:	0800cf45 	.word	0x0800cf45
 800cefc:	0800cf45 	.word	0x0800cf45
 800cf00:	0800cf45 	.word	0x0800cf45
 800cf04:	0800cf45 	.word	0x0800cf45
 800cf08:	0800cf45 	.word	0x0800cf45
 800cf0c:	0800cf45 	.word	0x0800cf45
 800cf10:	0800cf3d 	.word	0x0800cf3d
 800cf14:	2301      	movs	r3, #1
 800cf16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf1a:	e0c3      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cf1c:	2304      	movs	r3, #4
 800cf1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf22:	e0bf      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cf24:	2308      	movs	r3, #8
 800cf26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf2a:	e0bb      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cf2c:	2310      	movs	r3, #16
 800cf2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf32:	e0b7      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cf34:	2320      	movs	r3, #32
 800cf36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf3a:	e0b3      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cf3c:	2340      	movs	r3, #64	; 0x40
 800cf3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf42:	e0af      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cf44:	2380      	movs	r3, #128	; 0x80
 800cf46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf4a:	bf00      	nop
 800cf4c:	e0aa      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	4a79      	ldr	r2, [pc, #484]	; (800d138 <UART_SetConfig+0x664>)
 800cf54:	4293      	cmp	r3, r2
 800cf56:	d132      	bne.n	800cfbe <UART_SetConfig+0x4ea>
 800cf58:	4b76      	ldr	r3, [pc, #472]	; (800d134 <UART_SetConfig+0x660>)
 800cf5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf5c:	f003 0307 	and.w	r3, r3, #7
 800cf60:	2b05      	cmp	r3, #5
 800cf62:	d827      	bhi.n	800cfb4 <UART_SetConfig+0x4e0>
 800cf64:	a201      	add	r2, pc, #4	; (adr r2, 800cf6c <UART_SetConfig+0x498>)
 800cf66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf6a:	bf00      	nop
 800cf6c:	0800cf85 	.word	0x0800cf85
 800cf70:	0800cf8d 	.word	0x0800cf8d
 800cf74:	0800cf95 	.word	0x0800cf95
 800cf78:	0800cf9d 	.word	0x0800cf9d
 800cf7c:	0800cfa5 	.word	0x0800cfa5
 800cf80:	0800cfad 	.word	0x0800cfad
 800cf84:	2300      	movs	r3, #0
 800cf86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf8a:	e08b      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cf8c:	2304      	movs	r3, #4
 800cf8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf92:	e087      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cf94:	2308      	movs	r3, #8
 800cf96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf9a:	e083      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cf9c:	2310      	movs	r3, #16
 800cf9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfa2:	e07f      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cfa4:	2320      	movs	r3, #32
 800cfa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfaa:	e07b      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cfac:	2340      	movs	r3, #64	; 0x40
 800cfae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfb2:	e077      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cfb4:	2380      	movs	r3, #128	; 0x80
 800cfb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfba:	bf00      	nop
 800cfbc:	e072      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	4a5e      	ldr	r2, [pc, #376]	; (800d13c <UART_SetConfig+0x668>)
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	d132      	bne.n	800d02e <UART_SetConfig+0x55a>
 800cfc8:	4b5a      	ldr	r3, [pc, #360]	; (800d134 <UART_SetConfig+0x660>)
 800cfca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfcc:	f003 0307 	and.w	r3, r3, #7
 800cfd0:	2b05      	cmp	r3, #5
 800cfd2:	d827      	bhi.n	800d024 <UART_SetConfig+0x550>
 800cfd4:	a201      	add	r2, pc, #4	; (adr r2, 800cfdc <UART_SetConfig+0x508>)
 800cfd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfda:	bf00      	nop
 800cfdc:	0800cff5 	.word	0x0800cff5
 800cfe0:	0800cffd 	.word	0x0800cffd
 800cfe4:	0800d005 	.word	0x0800d005
 800cfe8:	0800d00d 	.word	0x0800d00d
 800cfec:	0800d015 	.word	0x0800d015
 800cff0:	0800d01d 	.word	0x0800d01d
 800cff4:	2300      	movs	r3, #0
 800cff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cffa:	e053      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800cffc:	2304      	movs	r3, #4
 800cffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d002:	e04f      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800d004:	2308      	movs	r3, #8
 800d006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d00a:	e04b      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800d00c:	2310      	movs	r3, #16
 800d00e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d012:	e047      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800d014:	2320      	movs	r3, #32
 800d016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d01a:	e043      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800d01c:	2340      	movs	r3, #64	; 0x40
 800d01e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d022:	e03f      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800d024:	2380      	movs	r3, #128	; 0x80
 800d026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d02a:	bf00      	nop
 800d02c:	e03a      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	4a43      	ldr	r2, [pc, #268]	; (800d140 <UART_SetConfig+0x66c>)
 800d034:	4293      	cmp	r3, r2
 800d036:	d132      	bne.n	800d09e <UART_SetConfig+0x5ca>
 800d038:	4b3e      	ldr	r3, [pc, #248]	; (800d134 <UART_SetConfig+0x660>)
 800d03a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d03c:	f003 0307 	and.w	r3, r3, #7
 800d040:	2b05      	cmp	r3, #5
 800d042:	d827      	bhi.n	800d094 <UART_SetConfig+0x5c0>
 800d044:	a201      	add	r2, pc, #4	; (adr r2, 800d04c <UART_SetConfig+0x578>)
 800d046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d04a:	bf00      	nop
 800d04c:	0800d065 	.word	0x0800d065
 800d050:	0800d06d 	.word	0x0800d06d
 800d054:	0800d075 	.word	0x0800d075
 800d058:	0800d07d 	.word	0x0800d07d
 800d05c:	0800d085 	.word	0x0800d085
 800d060:	0800d08d 	.word	0x0800d08d
 800d064:	2302      	movs	r3, #2
 800d066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d06a:	e01b      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800d06c:	2304      	movs	r3, #4
 800d06e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d072:	e017      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800d074:	2308      	movs	r3, #8
 800d076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d07a:	e013      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800d07c:	2310      	movs	r3, #16
 800d07e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d082:	e00f      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800d084:	2320      	movs	r3, #32
 800d086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d08a:	e00b      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800d08c:	2340      	movs	r3, #64	; 0x40
 800d08e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d092:	e007      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800d094:	2380      	movs	r3, #128	; 0x80
 800d096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d09a:	bf00      	nop
 800d09c:	e002      	b.n	800d0a4 <UART_SetConfig+0x5d0>
 800d09e:	2380      	movs	r3, #128	; 0x80
 800d0a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	4a25      	ldr	r2, [pc, #148]	; (800d140 <UART_SetConfig+0x66c>)
 800d0aa:	4293      	cmp	r3, r2
 800d0ac:	f040 80b8 	bne.w	800d220 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d0b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d0b4:	2b08      	cmp	r3, #8
 800d0b6:	d019      	beq.n	800d0ec <UART_SetConfig+0x618>
 800d0b8:	2b08      	cmp	r3, #8
 800d0ba:	dc04      	bgt.n	800d0c6 <UART_SetConfig+0x5f2>
 800d0bc:	2b02      	cmp	r3, #2
 800d0be:	d009      	beq.n	800d0d4 <UART_SetConfig+0x600>
 800d0c0:	2b04      	cmp	r3, #4
 800d0c2:	d00b      	beq.n	800d0dc <UART_SetConfig+0x608>
 800d0c4:	e042      	b.n	800d14c <UART_SetConfig+0x678>
 800d0c6:	2b20      	cmp	r3, #32
 800d0c8:	d02b      	beq.n	800d122 <UART_SetConfig+0x64e>
 800d0ca:	2b40      	cmp	r3, #64	; 0x40
 800d0cc:	d02c      	beq.n	800d128 <UART_SetConfig+0x654>
 800d0ce:	2b10      	cmp	r3, #16
 800d0d0:	d014      	beq.n	800d0fc <UART_SetConfig+0x628>
 800d0d2:	e03b      	b.n	800d14c <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d0d4:	f7fc faf8 	bl	80096c8 <HAL_RCCEx_GetD3PCLK1Freq>
 800d0d8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d0da:	e03d      	b.n	800d158 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0dc:	f107 0314 	add.w	r3, r7, #20
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f7fc fb07 	bl	80096f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d0e6:	69bb      	ldr	r3, [r7, #24]
 800d0e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0ea:	e035      	b.n	800d158 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d0ec:	f107 0308 	add.w	r3, r7, #8
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f7fc fc4b 	bl	800998c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0fa:	e02d      	b.n	800d158 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d0fc:	4b0d      	ldr	r3, [pc, #52]	; (800d134 <UART_SetConfig+0x660>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f003 0320 	and.w	r3, r3, #32
 800d104:	2b00      	cmp	r3, #0
 800d106:	d009      	beq.n	800d11c <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d108:	4b0a      	ldr	r3, [pc, #40]	; (800d134 <UART_SetConfig+0x660>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	08db      	lsrs	r3, r3, #3
 800d10e:	f003 0303 	and.w	r3, r3, #3
 800d112:	4a0c      	ldr	r2, [pc, #48]	; (800d144 <UART_SetConfig+0x670>)
 800d114:	fa22 f303 	lsr.w	r3, r2, r3
 800d118:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d11a:	e01d      	b.n	800d158 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800d11c:	4b09      	ldr	r3, [pc, #36]	; (800d144 <UART_SetConfig+0x670>)
 800d11e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d120:	e01a      	b.n	800d158 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d122:	4b09      	ldr	r3, [pc, #36]	; (800d148 <UART_SetConfig+0x674>)
 800d124:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d126:	e017      	b.n	800d158 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d128:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d12c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d12e:	e013      	b.n	800d158 <UART_SetConfig+0x684>
 800d130:	40011400 	.word	0x40011400
 800d134:	58024400 	.word	0x58024400
 800d138:	40007800 	.word	0x40007800
 800d13c:	40007c00 	.word	0x40007c00
 800d140:	58000c00 	.word	0x58000c00
 800d144:	03d09000 	.word	0x03d09000
 800d148:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800d14c:	2300      	movs	r3, #0
 800d14e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d150:	2301      	movs	r3, #1
 800d152:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d156:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	f000 824d 	beq.w	800d5fa <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d164:	4aad      	ldr	r2, [pc, #692]	; (800d41c <UART_SetConfig+0x948>)
 800d166:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d16a:	461a      	mov	r2, r3
 800d16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d16e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d172:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	685a      	ldr	r2, [r3, #4]
 800d178:	4613      	mov	r3, r2
 800d17a:	005b      	lsls	r3, r3, #1
 800d17c:	4413      	add	r3, r2
 800d17e:	6a3a      	ldr	r2, [r7, #32]
 800d180:	429a      	cmp	r2, r3
 800d182:	d305      	bcc.n	800d190 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	685b      	ldr	r3, [r3, #4]
 800d188:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d18a:	6a3a      	ldr	r2, [r7, #32]
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d903      	bls.n	800d198 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800d190:	2301      	movs	r3, #1
 800d192:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d196:	e230      	b.n	800d5fa <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d19a:	4618      	mov	r0, r3
 800d19c:	f04f 0100 	mov.w	r1, #0
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1a4:	4a9d      	ldr	r2, [pc, #628]	; (800d41c <UART_SetConfig+0x948>)
 800d1a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d1aa:	b29b      	uxth	r3, r3
 800d1ac:	f04f 0400 	mov.w	r4, #0
 800d1b0:	461a      	mov	r2, r3
 800d1b2:	4623      	mov	r3, r4
 800d1b4:	f7f3 f890 	bl	80002d8 <__aeabi_uldivmod>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	460c      	mov	r4, r1
 800d1bc:	4619      	mov	r1, r3
 800d1be:	4622      	mov	r2, r4
 800d1c0:	f04f 0300 	mov.w	r3, #0
 800d1c4:	f04f 0400 	mov.w	r4, #0
 800d1c8:	0214      	lsls	r4, r2, #8
 800d1ca:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800d1ce:	020b      	lsls	r3, r1, #8
 800d1d0:	687a      	ldr	r2, [r7, #4]
 800d1d2:	6852      	ldr	r2, [r2, #4]
 800d1d4:	0852      	lsrs	r2, r2, #1
 800d1d6:	4611      	mov	r1, r2
 800d1d8:	f04f 0200 	mov.w	r2, #0
 800d1dc:	eb13 0b01 	adds.w	fp, r3, r1
 800d1e0:	eb44 0c02 	adc.w	ip, r4, r2
 800d1e4:	4658      	mov	r0, fp
 800d1e6:	4661      	mov	r1, ip
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	685b      	ldr	r3, [r3, #4]
 800d1ec:	f04f 0400 	mov.w	r4, #0
 800d1f0:	461a      	mov	r2, r3
 800d1f2:	4623      	mov	r3, r4
 800d1f4:	f7f3 f870 	bl	80002d8 <__aeabi_uldivmod>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	460c      	mov	r4, r1
 800d1fc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d200:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d204:	d308      	bcc.n	800d218 <UART_SetConfig+0x744>
 800d206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d208:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d20c:	d204      	bcs.n	800d218 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d214:	60da      	str	r2, [r3, #12]
 800d216:	e1f0      	b.n	800d5fa <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800d218:	2301      	movs	r3, #1
 800d21a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d21e:	e1ec      	b.n	800d5fa <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	69db      	ldr	r3, [r3, #28]
 800d224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d228:	f040 8100 	bne.w	800d42c <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800d22c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d230:	2b40      	cmp	r3, #64	; 0x40
 800d232:	f200 80b7 	bhi.w	800d3a4 <UART_SetConfig+0x8d0>
 800d236:	a201      	add	r2, pc, #4	; (adr r2, 800d23c <UART_SetConfig+0x768>)
 800d238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d23c:	0800d341 	.word	0x0800d341
 800d240:	0800d349 	.word	0x0800d349
 800d244:	0800d3a5 	.word	0x0800d3a5
 800d248:	0800d3a5 	.word	0x0800d3a5
 800d24c:	0800d351 	.word	0x0800d351
 800d250:	0800d3a5 	.word	0x0800d3a5
 800d254:	0800d3a5 	.word	0x0800d3a5
 800d258:	0800d3a5 	.word	0x0800d3a5
 800d25c:	0800d361 	.word	0x0800d361
 800d260:	0800d3a5 	.word	0x0800d3a5
 800d264:	0800d3a5 	.word	0x0800d3a5
 800d268:	0800d3a5 	.word	0x0800d3a5
 800d26c:	0800d3a5 	.word	0x0800d3a5
 800d270:	0800d3a5 	.word	0x0800d3a5
 800d274:	0800d3a5 	.word	0x0800d3a5
 800d278:	0800d3a5 	.word	0x0800d3a5
 800d27c:	0800d371 	.word	0x0800d371
 800d280:	0800d3a5 	.word	0x0800d3a5
 800d284:	0800d3a5 	.word	0x0800d3a5
 800d288:	0800d3a5 	.word	0x0800d3a5
 800d28c:	0800d3a5 	.word	0x0800d3a5
 800d290:	0800d3a5 	.word	0x0800d3a5
 800d294:	0800d3a5 	.word	0x0800d3a5
 800d298:	0800d3a5 	.word	0x0800d3a5
 800d29c:	0800d3a5 	.word	0x0800d3a5
 800d2a0:	0800d3a5 	.word	0x0800d3a5
 800d2a4:	0800d3a5 	.word	0x0800d3a5
 800d2a8:	0800d3a5 	.word	0x0800d3a5
 800d2ac:	0800d3a5 	.word	0x0800d3a5
 800d2b0:	0800d3a5 	.word	0x0800d3a5
 800d2b4:	0800d3a5 	.word	0x0800d3a5
 800d2b8:	0800d3a5 	.word	0x0800d3a5
 800d2bc:	0800d397 	.word	0x0800d397
 800d2c0:	0800d3a5 	.word	0x0800d3a5
 800d2c4:	0800d3a5 	.word	0x0800d3a5
 800d2c8:	0800d3a5 	.word	0x0800d3a5
 800d2cc:	0800d3a5 	.word	0x0800d3a5
 800d2d0:	0800d3a5 	.word	0x0800d3a5
 800d2d4:	0800d3a5 	.word	0x0800d3a5
 800d2d8:	0800d3a5 	.word	0x0800d3a5
 800d2dc:	0800d3a5 	.word	0x0800d3a5
 800d2e0:	0800d3a5 	.word	0x0800d3a5
 800d2e4:	0800d3a5 	.word	0x0800d3a5
 800d2e8:	0800d3a5 	.word	0x0800d3a5
 800d2ec:	0800d3a5 	.word	0x0800d3a5
 800d2f0:	0800d3a5 	.word	0x0800d3a5
 800d2f4:	0800d3a5 	.word	0x0800d3a5
 800d2f8:	0800d3a5 	.word	0x0800d3a5
 800d2fc:	0800d3a5 	.word	0x0800d3a5
 800d300:	0800d3a5 	.word	0x0800d3a5
 800d304:	0800d3a5 	.word	0x0800d3a5
 800d308:	0800d3a5 	.word	0x0800d3a5
 800d30c:	0800d3a5 	.word	0x0800d3a5
 800d310:	0800d3a5 	.word	0x0800d3a5
 800d314:	0800d3a5 	.word	0x0800d3a5
 800d318:	0800d3a5 	.word	0x0800d3a5
 800d31c:	0800d3a5 	.word	0x0800d3a5
 800d320:	0800d3a5 	.word	0x0800d3a5
 800d324:	0800d3a5 	.word	0x0800d3a5
 800d328:	0800d3a5 	.word	0x0800d3a5
 800d32c:	0800d3a5 	.word	0x0800d3a5
 800d330:	0800d3a5 	.word	0x0800d3a5
 800d334:	0800d3a5 	.word	0x0800d3a5
 800d338:	0800d3a5 	.word	0x0800d3a5
 800d33c:	0800d39d 	.word	0x0800d39d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d340:	f7fb f830 	bl	80083a4 <HAL_RCC_GetPCLK1Freq>
 800d344:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d346:	e033      	b.n	800d3b0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d348:	f7fb f842 	bl	80083d0 <HAL_RCC_GetPCLK2Freq>
 800d34c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d34e:	e02f      	b.n	800d3b0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d350:	f107 0314 	add.w	r3, r7, #20
 800d354:	4618      	mov	r0, r3
 800d356:	f7fc f9cd 	bl	80096f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d35a:	69bb      	ldr	r3, [r7, #24]
 800d35c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d35e:	e027      	b.n	800d3b0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d360:	f107 0308 	add.w	r3, r7, #8
 800d364:	4618      	mov	r0, r3
 800d366:	f7fc fb11 	bl	800998c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d36e:	e01f      	b.n	800d3b0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d370:	4b2b      	ldr	r3, [pc, #172]	; (800d420 <UART_SetConfig+0x94c>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	f003 0320 	and.w	r3, r3, #32
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d009      	beq.n	800d390 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d37c:	4b28      	ldr	r3, [pc, #160]	; (800d420 <UART_SetConfig+0x94c>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	08db      	lsrs	r3, r3, #3
 800d382:	f003 0303 	and.w	r3, r3, #3
 800d386:	4a27      	ldr	r2, [pc, #156]	; (800d424 <UART_SetConfig+0x950>)
 800d388:	fa22 f303 	lsr.w	r3, r2, r3
 800d38c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d38e:	e00f      	b.n	800d3b0 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800d390:	4b24      	ldr	r3, [pc, #144]	; (800d424 <UART_SetConfig+0x950>)
 800d392:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d394:	e00c      	b.n	800d3b0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d396:	4b24      	ldr	r3, [pc, #144]	; (800d428 <UART_SetConfig+0x954>)
 800d398:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d39a:	e009      	b.n	800d3b0 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d39c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d3a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d3a2:	e005      	b.n	800d3b0 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d3ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	f000 8121 	beq.w	800d5fa <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3bc:	4a17      	ldr	r2, [pc, #92]	; (800d41c <UART_SetConfig+0x948>)
 800d3be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800d3ca:	005a      	lsls	r2, r3, #1
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	685b      	ldr	r3, [r3, #4]
 800d3d0:	085b      	lsrs	r3, r3, #1
 800d3d2:	441a      	add	r2, r3
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	685b      	ldr	r3, [r3, #4]
 800d3d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3dc:	b29b      	uxth	r3, r3
 800d3de:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3e2:	2b0f      	cmp	r3, #15
 800d3e4:	d916      	bls.n	800d414 <UART_SetConfig+0x940>
 800d3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d3ec:	d212      	bcs.n	800d414 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f0:	b29b      	uxth	r3, r3
 800d3f2:	f023 030f 	bic.w	r3, r3, #15
 800d3f6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3fa:	085b      	lsrs	r3, r3, #1
 800d3fc:	b29b      	uxth	r3, r3
 800d3fe:	f003 0307 	and.w	r3, r3, #7
 800d402:	b29a      	uxth	r2, r3
 800d404:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d406:	4313      	orrs	r3, r2
 800d408:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d410:	60da      	str	r2, [r3, #12]
 800d412:	e0f2      	b.n	800d5fa <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800d414:	2301      	movs	r3, #1
 800d416:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d41a:	e0ee      	b.n	800d5fa <UART_SetConfig+0xb26>
 800d41c:	0800e730 	.word	0x0800e730
 800d420:	58024400 	.word	0x58024400
 800d424:	03d09000 	.word	0x03d09000
 800d428:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800d42c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d430:	2b40      	cmp	r3, #64	; 0x40
 800d432:	f200 80b7 	bhi.w	800d5a4 <UART_SetConfig+0xad0>
 800d436:	a201      	add	r2, pc, #4	; (adr r2, 800d43c <UART_SetConfig+0x968>)
 800d438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d43c:	0800d541 	.word	0x0800d541
 800d440:	0800d549 	.word	0x0800d549
 800d444:	0800d5a5 	.word	0x0800d5a5
 800d448:	0800d5a5 	.word	0x0800d5a5
 800d44c:	0800d551 	.word	0x0800d551
 800d450:	0800d5a5 	.word	0x0800d5a5
 800d454:	0800d5a5 	.word	0x0800d5a5
 800d458:	0800d5a5 	.word	0x0800d5a5
 800d45c:	0800d561 	.word	0x0800d561
 800d460:	0800d5a5 	.word	0x0800d5a5
 800d464:	0800d5a5 	.word	0x0800d5a5
 800d468:	0800d5a5 	.word	0x0800d5a5
 800d46c:	0800d5a5 	.word	0x0800d5a5
 800d470:	0800d5a5 	.word	0x0800d5a5
 800d474:	0800d5a5 	.word	0x0800d5a5
 800d478:	0800d5a5 	.word	0x0800d5a5
 800d47c:	0800d571 	.word	0x0800d571
 800d480:	0800d5a5 	.word	0x0800d5a5
 800d484:	0800d5a5 	.word	0x0800d5a5
 800d488:	0800d5a5 	.word	0x0800d5a5
 800d48c:	0800d5a5 	.word	0x0800d5a5
 800d490:	0800d5a5 	.word	0x0800d5a5
 800d494:	0800d5a5 	.word	0x0800d5a5
 800d498:	0800d5a5 	.word	0x0800d5a5
 800d49c:	0800d5a5 	.word	0x0800d5a5
 800d4a0:	0800d5a5 	.word	0x0800d5a5
 800d4a4:	0800d5a5 	.word	0x0800d5a5
 800d4a8:	0800d5a5 	.word	0x0800d5a5
 800d4ac:	0800d5a5 	.word	0x0800d5a5
 800d4b0:	0800d5a5 	.word	0x0800d5a5
 800d4b4:	0800d5a5 	.word	0x0800d5a5
 800d4b8:	0800d5a5 	.word	0x0800d5a5
 800d4bc:	0800d597 	.word	0x0800d597
 800d4c0:	0800d5a5 	.word	0x0800d5a5
 800d4c4:	0800d5a5 	.word	0x0800d5a5
 800d4c8:	0800d5a5 	.word	0x0800d5a5
 800d4cc:	0800d5a5 	.word	0x0800d5a5
 800d4d0:	0800d5a5 	.word	0x0800d5a5
 800d4d4:	0800d5a5 	.word	0x0800d5a5
 800d4d8:	0800d5a5 	.word	0x0800d5a5
 800d4dc:	0800d5a5 	.word	0x0800d5a5
 800d4e0:	0800d5a5 	.word	0x0800d5a5
 800d4e4:	0800d5a5 	.word	0x0800d5a5
 800d4e8:	0800d5a5 	.word	0x0800d5a5
 800d4ec:	0800d5a5 	.word	0x0800d5a5
 800d4f0:	0800d5a5 	.word	0x0800d5a5
 800d4f4:	0800d5a5 	.word	0x0800d5a5
 800d4f8:	0800d5a5 	.word	0x0800d5a5
 800d4fc:	0800d5a5 	.word	0x0800d5a5
 800d500:	0800d5a5 	.word	0x0800d5a5
 800d504:	0800d5a5 	.word	0x0800d5a5
 800d508:	0800d5a5 	.word	0x0800d5a5
 800d50c:	0800d5a5 	.word	0x0800d5a5
 800d510:	0800d5a5 	.word	0x0800d5a5
 800d514:	0800d5a5 	.word	0x0800d5a5
 800d518:	0800d5a5 	.word	0x0800d5a5
 800d51c:	0800d5a5 	.word	0x0800d5a5
 800d520:	0800d5a5 	.word	0x0800d5a5
 800d524:	0800d5a5 	.word	0x0800d5a5
 800d528:	0800d5a5 	.word	0x0800d5a5
 800d52c:	0800d5a5 	.word	0x0800d5a5
 800d530:	0800d5a5 	.word	0x0800d5a5
 800d534:	0800d5a5 	.word	0x0800d5a5
 800d538:	0800d5a5 	.word	0x0800d5a5
 800d53c:	0800d59d 	.word	0x0800d59d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d540:	f7fa ff30 	bl	80083a4 <HAL_RCC_GetPCLK1Freq>
 800d544:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d546:	e033      	b.n	800d5b0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d548:	f7fa ff42 	bl	80083d0 <HAL_RCC_GetPCLK2Freq>
 800d54c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d54e:	e02f      	b.n	800d5b0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d550:	f107 0314 	add.w	r3, r7, #20
 800d554:	4618      	mov	r0, r3
 800d556:	f7fc f8cd 	bl	80096f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d55a:	69bb      	ldr	r3, [r7, #24]
 800d55c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d55e:	e027      	b.n	800d5b0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d560:	f107 0308 	add.w	r3, r7, #8
 800d564:	4618      	mov	r0, r3
 800d566:	f7fc fa11 	bl	800998c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d56e:	e01f      	b.n	800d5b0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d570:	4b2c      	ldr	r3, [pc, #176]	; (800d624 <UART_SetConfig+0xb50>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	f003 0320 	and.w	r3, r3, #32
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d009      	beq.n	800d590 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d57c:	4b29      	ldr	r3, [pc, #164]	; (800d624 <UART_SetConfig+0xb50>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	08db      	lsrs	r3, r3, #3
 800d582:	f003 0303 	and.w	r3, r3, #3
 800d586:	4a28      	ldr	r2, [pc, #160]	; (800d628 <UART_SetConfig+0xb54>)
 800d588:	fa22 f303 	lsr.w	r3, r2, r3
 800d58c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d58e:	e00f      	b.n	800d5b0 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800d590:	4b25      	ldr	r3, [pc, #148]	; (800d628 <UART_SetConfig+0xb54>)
 800d592:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d594:	e00c      	b.n	800d5b0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d596:	4b25      	ldr	r3, [pc, #148]	; (800d62c <UART_SetConfig+0xb58>)
 800d598:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d59a:	e009      	b.n	800d5b0 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d59c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d5a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d5a2:	e005      	b.n	800d5b0 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d5ae:	bf00      	nop
    }

    if (pclk != 0U)
 800d5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d021      	beq.n	800d5fa <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ba:	4a1d      	ldr	r2, [pc, #116]	; (800d630 <UART_SetConfig+0xb5c>)
 800d5bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5c0:	461a      	mov	r2, r3
 800d5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5c4:	fbb3 f2f2 	udiv	r2, r3, r2
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	685b      	ldr	r3, [r3, #4]
 800d5cc:	085b      	lsrs	r3, r3, #1
 800d5ce:	441a      	add	r2, r3
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	685b      	ldr	r3, [r3, #4]
 800d5d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5d8:	b29b      	uxth	r3, r3
 800d5da:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5de:	2b0f      	cmp	r3, #15
 800d5e0:	d908      	bls.n	800d5f4 <UART_SetConfig+0xb20>
 800d5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5e8:	d204      	bcs.n	800d5f4 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5f0:	60da      	str	r2, [r3, #12]
 800d5f2:	e002      	b.n	800d5fa <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2201      	movs	r2, #1
 800d5fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2201      	movs	r2, #1
 800d606:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2200      	movs	r2, #0
 800d60e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2200      	movs	r2, #0
 800d614:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800d616:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	3738      	adds	r7, #56	; 0x38
 800d61e:	46bd      	mov	sp, r7
 800d620:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800d624:	58024400 	.word	0x58024400
 800d628:	03d09000 	.word	0x03d09000
 800d62c:	003d0900 	.word	0x003d0900
 800d630:	0800e730 	.word	0x0800e730

0800d634 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d634:	b480      	push	{r7}
 800d636:	b083      	sub	sp, #12
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d640:	f003 0301 	and.w	r3, r3, #1
 800d644:	2b00      	cmp	r3, #0
 800d646:	d00a      	beq.n	800d65e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	685b      	ldr	r3, [r3, #4]
 800d64e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	430a      	orrs	r2, r1
 800d65c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d662:	f003 0302 	and.w	r3, r3, #2
 800d666:	2b00      	cmp	r3, #0
 800d668:	d00a      	beq.n	800d680 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	685b      	ldr	r3, [r3, #4]
 800d670:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	430a      	orrs	r2, r1
 800d67e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d684:	f003 0304 	and.w	r3, r3, #4
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d00a      	beq.n	800d6a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	685b      	ldr	r3, [r3, #4]
 800d692:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	430a      	orrs	r2, r1
 800d6a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6a6:	f003 0308 	and.w	r3, r3, #8
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d00a      	beq.n	800d6c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	685b      	ldr	r3, [r3, #4]
 800d6b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	430a      	orrs	r2, r1
 800d6c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6c8:	f003 0310 	and.w	r3, r3, #16
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d00a      	beq.n	800d6e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	689b      	ldr	r3, [r3, #8]
 800d6d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	430a      	orrs	r2, r1
 800d6e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6ea:	f003 0320 	and.w	r3, r3, #32
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d00a      	beq.n	800d708 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	689b      	ldr	r3, [r3, #8]
 800d6f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	430a      	orrs	r2, r1
 800d706:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d70c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d710:	2b00      	cmp	r3, #0
 800d712:	d01a      	beq.n	800d74a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	685b      	ldr	r3, [r3, #4]
 800d71a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	430a      	orrs	r2, r1
 800d728:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d72e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d732:	d10a      	bne.n	800d74a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	685b      	ldr	r3, [r3, #4]
 800d73a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	430a      	orrs	r2, r1
 800d748:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d74e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d752:	2b00      	cmp	r3, #0
 800d754:	d00a      	beq.n	800d76c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	430a      	orrs	r2, r1
 800d76a:	605a      	str	r2, [r3, #4]
  }
}
 800d76c:	bf00      	nop
 800d76e:	370c      	adds	r7, #12
 800d770:	46bd      	mov	sp, r7
 800d772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d776:	4770      	bx	lr

0800d778 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b086      	sub	sp, #24
 800d77c:	af02      	add	r7, sp, #8
 800d77e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2200      	movs	r2, #0
 800d784:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800d788:	f7f6 f80e 	bl	80037a8 <HAL_GetTick>
 800d78c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	f003 0308 	and.w	r3, r3, #8
 800d798:	2b08      	cmp	r3, #8
 800d79a:	d10e      	bne.n	800d7ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d79c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d7a0:	9300      	str	r3, [sp, #0]
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f000 f82c 	bl	800d808 <UART_WaitOnFlagUntilTimeout>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d001      	beq.n	800d7ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d7b6:	2303      	movs	r3, #3
 800d7b8:	e022      	b.n	800d800 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	f003 0304 	and.w	r3, r3, #4
 800d7c4:	2b04      	cmp	r3, #4
 800d7c6:	d10e      	bne.n	800d7e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d7c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d7cc:	9300      	str	r3, [sp, #0]
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f000 f816 	bl	800d808 <UART_WaitOnFlagUntilTimeout>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d001      	beq.n	800d7e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d7e2:	2303      	movs	r3, #3
 800d7e4:	e00c      	b.n	800d800 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2220      	movs	r2, #32
 800d7ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2220      	movs	r2, #32
 800d7f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d7fe:	2300      	movs	r3, #0
}
 800d800:	4618      	mov	r0, r3
 800d802:	3710      	adds	r7, #16
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}

0800d808 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b084      	sub	sp, #16
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	60f8      	str	r0, [r7, #12]
 800d810:	60b9      	str	r1, [r7, #8]
 800d812:	603b      	str	r3, [r7, #0]
 800d814:	4613      	mov	r3, r2
 800d816:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d818:	e062      	b.n	800d8e0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d81a:	69bb      	ldr	r3, [r7, #24]
 800d81c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d820:	d05e      	beq.n	800d8e0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d822:	f7f5 ffc1 	bl	80037a8 <HAL_GetTick>
 800d826:	4602      	mov	r2, r0
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	1ad3      	subs	r3, r2, r3
 800d82c:	69ba      	ldr	r2, [r7, #24]
 800d82e:	429a      	cmp	r2, r3
 800d830:	d302      	bcc.n	800d838 <UART_WaitOnFlagUntilTimeout+0x30>
 800d832:	69bb      	ldr	r3, [r7, #24]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d11d      	bne.n	800d874 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	681a      	ldr	r2, [r3, #0]
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d846:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	689a      	ldr	r2, [r3, #8]
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	f022 0201 	bic.w	r2, r2, #1
 800d856:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	2220      	movs	r2, #32
 800d85c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	2220      	movs	r2, #32
 800d864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	2200      	movs	r2, #0
 800d86c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800d870:	2303      	movs	r3, #3
 800d872:	e045      	b.n	800d900 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	f003 0304 	and.w	r3, r3, #4
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d02e      	beq.n	800d8e0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	69db      	ldr	r3, [r3, #28]
 800d888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d88c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d890:	d126      	bne.n	800d8e0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d89a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	681a      	ldr	r2, [r3, #0]
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d8aa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	689a      	ldr	r2, [r3, #8]
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	f022 0201 	bic.w	r2, r2, #1
 800d8ba:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	2220      	movs	r2, #32
 800d8c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	2220      	movs	r2, #32
 800d8c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	2220      	movs	r2, #32
 800d8d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800d8dc:	2303      	movs	r3, #3
 800d8de:	e00f      	b.n	800d900 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	69da      	ldr	r2, [r3, #28]
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	4013      	ands	r3, r2
 800d8ea:	68ba      	ldr	r2, [r7, #8]
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	bf0c      	ite	eq
 800d8f0:	2301      	moveq	r3, #1
 800d8f2:	2300      	movne	r3, #0
 800d8f4:	b2db      	uxtb	r3, r3
 800d8f6:	461a      	mov	r2, r3
 800d8f8:	79fb      	ldrb	r3, [r7, #7]
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d08d      	beq.n	800d81a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d8fe:	2300      	movs	r3, #0
}
 800d900:	4618      	mov	r0, r3
 800d902:	3710      	adds	r7, #16
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b086      	sub	sp, #24
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	60f8      	str	r0, [r7, #12]
 800d910:	60b9      	str	r1, [r7, #8]
 800d912:	607a      	str	r2, [r7, #4]
 800d914:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d101      	bne.n	800d920 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800d91c:	2301      	movs	r3, #1
 800d91e:	e056      	b.n	800d9ce <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d926:	2b00      	cmp	r3, #0
 800d928:	d106      	bne.n	800d938 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	2200      	movs	r2, #0
 800d92e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800d932:	68f8      	ldr	r0, [r7, #12]
 800d934:	f7f5 fd28 	bl	8003388 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2224      	movs	r2, #36	; 0x24
 800d93c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	681a      	ldr	r2, [r3, #0]
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	f022 0201 	bic.w	r2, r2, #1
 800d94e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d950:	68f8      	ldr	r0, [r7, #12]
 800d952:	f7ff f8bf 	bl	800cad4 <UART_SetConfig>
 800d956:	4603      	mov	r3, r0
 800d958:	2b01      	cmp	r3, #1
 800d95a:	d101      	bne.n	800d960 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 800d95c:	2301      	movs	r3, #1
 800d95e:	e036      	b.n	800d9ce <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d964:	2b00      	cmp	r3, #0
 800d966:	d002      	beq.n	800d96e <HAL_RS485Ex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800d968:	68f8      	ldr	r0, [r7, #12]
 800d96a:	f7ff fe63 	bl	800d634 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	689a      	ldr	r2, [r3, #8]
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d97c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	689b      	ldr	r3, [r3, #8]
 800d984:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	68ba      	ldr	r2, [r7, #8]
 800d98e:	430a      	orrs	r2, r1
 800d990:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	055b      	lsls	r3, r3, #21
 800d996:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	041b      	lsls	r3, r3, #16
 800d99c:	697a      	ldr	r2, [r7, #20]
 800d99e:	4313      	orrs	r3, r2
 800d9a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	681a      	ldr	r2, [r3, #0]
 800d9a8:	4b0b      	ldr	r3, [pc, #44]	; (800d9d8 <HAL_RS485Ex_Init+0xd0>)
 800d9aa:	4013      	ands	r3, r2
 800d9ac:	68fa      	ldr	r2, [r7, #12]
 800d9ae:	6812      	ldr	r2, [r2, #0]
 800d9b0:	6979      	ldr	r1, [r7, #20]
 800d9b2:	430b      	orrs	r3, r1
 800d9b4:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	681a      	ldr	r2, [r3, #0]
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	f042 0201 	orr.w	r2, r2, #1
 800d9c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d9c6:	68f8      	ldr	r0, [r7, #12]
 800d9c8:	f7ff fed6 	bl	800d778 <UART_CheckIdleState>
 800d9cc:	4603      	mov	r3, r0
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3718      	adds	r7, #24
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}
 800d9d6:	bf00      	nop
 800d9d8:	fc00ffff 	.word	0xfc00ffff

0800d9dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b085      	sub	sp, #20
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d9ea:	2b01      	cmp	r3, #1
 800d9ec:	d101      	bne.n	800d9f2 <HAL_UARTEx_DisableFifoMode+0x16>
 800d9ee:	2302      	movs	r3, #2
 800d9f0:	e027      	b.n	800da42 <HAL_UARTEx_DisableFifoMode+0x66>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2201      	movs	r2, #1
 800d9f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2224      	movs	r2, #36	; 0x24
 800d9fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	681a      	ldr	r2, [r3, #0]
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	f022 0201 	bic.w	r2, r2, #1
 800da18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800da20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2200      	movs	r2, #0
 800da26:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	68fa      	ldr	r2, [r7, #12]
 800da2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2220      	movs	r2, #32
 800da34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2200      	movs	r2, #0
 800da3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800da40:	2300      	movs	r3, #0
}
 800da42:	4618      	mov	r0, r3
 800da44:	3714      	adds	r7, #20
 800da46:	46bd      	mov	sp, r7
 800da48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4c:	4770      	bx	lr

0800da4e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800da4e:	b580      	push	{r7, lr}
 800da50:	b084      	sub	sp, #16
 800da52:	af00      	add	r7, sp, #0
 800da54:	6078      	str	r0, [r7, #4]
 800da56:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800da5e:	2b01      	cmp	r3, #1
 800da60:	d101      	bne.n	800da66 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800da62:	2302      	movs	r3, #2
 800da64:	e02d      	b.n	800dac2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2201      	movs	r2, #1
 800da6a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2224      	movs	r2, #36	; 0x24
 800da72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	681a      	ldr	r2, [r3, #0]
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	f022 0201 	bic.w	r2, r2, #1
 800da8c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	689b      	ldr	r3, [r3, #8]
 800da94:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	683a      	ldr	r2, [r7, #0]
 800da9e:	430a      	orrs	r2, r1
 800daa0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f000 f850 	bl	800db48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	68fa      	ldr	r2, [r7, #12]
 800daae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2220      	movs	r2, #32
 800dab4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2200      	movs	r2, #0
 800dabc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800dac0:	2300      	movs	r3, #0
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3710      	adds	r7, #16
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}

0800daca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800daca:	b580      	push	{r7, lr}
 800dacc:	b084      	sub	sp, #16
 800dace:	af00      	add	r7, sp, #0
 800dad0:	6078      	str	r0, [r7, #4]
 800dad2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800dada:	2b01      	cmp	r3, #1
 800dadc:	d101      	bne.n	800dae2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dade:	2302      	movs	r3, #2
 800dae0:	e02d      	b.n	800db3e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2201      	movs	r2, #1
 800dae6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2224      	movs	r2, #36	; 0x24
 800daee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	681a      	ldr	r2, [r3, #0]
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	f022 0201 	bic.w	r2, r2, #1
 800db08:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	689b      	ldr	r3, [r3, #8]
 800db10:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	683a      	ldr	r2, [r7, #0]
 800db1a:	430a      	orrs	r2, r1
 800db1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f000 f812 	bl	800db48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	68fa      	ldr	r2, [r7, #12]
 800db2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2220      	movs	r2, #32
 800db30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2200      	movs	r2, #0
 800db38:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800db3c:	2300      	movs	r3, #0
}
 800db3e:	4618      	mov	r0, r3
 800db40:	3710      	adds	r7, #16
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}
	...

0800db48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800db48:	b480      	push	{r7}
 800db4a:	b089      	sub	sp, #36	; 0x24
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800db50:	4a2f      	ldr	r2, [pc, #188]	; (800dc10 <UARTEx_SetNbDataToProcess+0xc8>)
 800db52:	f107 0314 	add.w	r3, r7, #20
 800db56:	e892 0003 	ldmia.w	r2, {r0, r1}
 800db5a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800db5e:	4a2d      	ldr	r2, [pc, #180]	; (800dc14 <UARTEx_SetNbDataToProcess+0xcc>)
 800db60:	f107 030c 	add.w	r3, r7, #12
 800db64:	e892 0003 	ldmia.w	r2, {r0, r1}
 800db68:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db70:	2b00      	cmp	r3, #0
 800db72:	d108      	bne.n	800db86 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2201      	movs	r2, #1
 800db78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2201      	movs	r2, #1
 800db80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800db84:	e03d      	b.n	800dc02 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800db86:	2310      	movs	r3, #16
 800db88:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800db8a:	2310      	movs	r3, #16
 800db8c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	689b      	ldr	r3, [r3, #8]
 800db94:	0e5b      	lsrs	r3, r3, #25
 800db96:	b2db      	uxtb	r3, r3
 800db98:	f003 0307 	and.w	r3, r3, #7
 800db9c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	689b      	ldr	r3, [r3, #8]
 800dba4:	0f5b      	lsrs	r3, r3, #29
 800dba6:	b2db      	uxtb	r3, r3
 800dba8:	f003 0307 	and.w	r3, r3, #7
 800dbac:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800dbae:	7fbb      	ldrb	r3, [r7, #30]
 800dbb0:	7f3a      	ldrb	r2, [r7, #28]
 800dbb2:	f107 0120 	add.w	r1, r7, #32
 800dbb6:	440a      	add	r2, r1
 800dbb8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800dbbc:	fb02 f303 	mul.w	r3, r2, r3
 800dbc0:	7f3a      	ldrb	r2, [r7, #28]
 800dbc2:	f107 0120 	add.w	r1, r7, #32
 800dbc6:	440a      	add	r2, r1
 800dbc8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800dbcc:	fb93 f3f2 	sdiv	r3, r3, r2
 800dbd0:	b29a      	uxth	r2, r3
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800dbd8:	7ffb      	ldrb	r3, [r7, #31]
 800dbda:	7f7a      	ldrb	r2, [r7, #29]
 800dbdc:	f107 0120 	add.w	r1, r7, #32
 800dbe0:	440a      	add	r2, r1
 800dbe2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800dbe6:	fb02 f303 	mul.w	r3, r2, r3
 800dbea:	7f7a      	ldrb	r2, [r7, #29]
 800dbec:	f107 0120 	add.w	r1, r7, #32
 800dbf0:	440a      	add	r2, r1
 800dbf2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800dbf6:	fb93 f3f2 	sdiv	r3, r3, r2
 800dbfa:	b29a      	uxth	r2, r3
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dc02:	bf00      	nop
 800dc04:	3724      	adds	r7, #36	; 0x24
 800dc06:	46bd      	mov	sp, r7
 800dc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0c:	4770      	bx	lr
 800dc0e:	bf00      	nop
 800dc10:	0800e710 	.word	0x0800e710
 800dc14:	0800e718 	.word	0x0800e718

0800dc18 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800dc18:	b084      	sub	sp, #16
 800dc1a:	b480      	push	{r7}
 800dc1c:	b085      	sub	sp, #20
 800dc1e:	af00      	add	r7, sp, #0
 800dc20:	6078      	str	r0, [r7, #4]
 800dc22:	f107 001c 	add.w	r0, r7, #28
 800dc26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800dc2e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800dc30:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800dc32:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800dc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800dc36:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800dc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800dc3a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800dc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800dc3e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800dc40:	68fa      	ldr	r2, [r7, #12]
 800dc42:	4313      	orrs	r3, r2
 800dc44:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	685a      	ldr	r2, [r3, #4]
 800dc4a:	4b07      	ldr	r3, [pc, #28]	; (800dc68 <SDMMC_Init+0x50>)
 800dc4c:	4013      	ands	r3, r2
 800dc4e:	68fa      	ldr	r2, [r7, #12]
 800dc50:	431a      	orrs	r2, r3
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800dc56:	2300      	movs	r3, #0
}
 800dc58:	4618      	mov	r0, r3
 800dc5a:	3714      	adds	r7, #20
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc62:	b004      	add	sp, #16
 800dc64:	4770      	bx	lr
 800dc66:	bf00      	nop
 800dc68:	ffc02c00 	.word	0xffc02c00

0800dc6c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	b083      	sub	sp, #12
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	370c      	adds	r7, #12
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc84:	4770      	bx	lr

0800dc86 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800dc86:	b480      	push	{r7}
 800dc88:	b083      	sub	sp, #12
 800dc8a:	af00      	add	r7, sp, #0
 800dc8c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f043 0203 	orr.w	r2, r3, #3
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800dc9a:	2300      	movs	r3, #0
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	370c      	adds	r7, #12
 800dca0:	46bd      	mov	sp, r7
 800dca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca6:	4770      	bx	lr

0800dca8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b083      	sub	sp, #12
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	f003 0303 	and.w	r3, r3, #3
}
 800dcb8:	4618      	mov	r0, r3
 800dcba:	370c      	adds	r7, #12
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc2:	4770      	bx	lr

0800dcc4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800dcc4:	b480      	push	{r7}
 800dcc6:	b085      	sub	sp, #20
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
 800dccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	681a      	ldr	r2, [r3, #0]
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800dce2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800dce8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800dcee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800dcf0:	68fa      	ldr	r2, [r7, #12]
 800dcf2:	4313      	orrs	r3, r2
 800dcf4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	68da      	ldr	r2, [r3, #12]
 800dcfa:	4b06      	ldr	r3, [pc, #24]	; (800dd14 <SDMMC_SendCommand+0x50>)
 800dcfc:	4013      	ands	r3, r2
 800dcfe:	68fa      	ldr	r2, [r7, #12]
 800dd00:	431a      	orrs	r2, r3
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800dd06:	2300      	movs	r3, #0
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3714      	adds	r7, #20
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd12:	4770      	bx	lr
 800dd14:	fffee0c0 	.word	0xfffee0c0

0800dd18 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800dd18:	b480      	push	{r7}
 800dd1a:	b083      	sub	sp, #12
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	691b      	ldr	r3, [r3, #16]
 800dd24:	b2db      	uxtb	r3, r3
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	370c      	adds	r7, #12
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd30:	4770      	bx	lr

0800dd32 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800dd32:	b480      	push	{r7}
 800dd34:	b085      	sub	sp, #20
 800dd36:	af00      	add	r7, sp, #0
 800dd38:	6078      	str	r0, [r7, #4]
 800dd3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	3314      	adds	r3, #20
 800dd40:	461a      	mov	r2, r3
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	4413      	add	r3, r2
 800dd46:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	681b      	ldr	r3, [r3, #0]
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	3714      	adds	r7, #20
 800dd50:	46bd      	mov	sp, r7
 800dd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd56:	4770      	bx	lr

0800dd58 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800dd58:	b480      	push	{r7}
 800dd5a:	b085      	sub	sp, #20
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
 800dd60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800dd62:	2300      	movs	r3, #0
 800dd64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	681a      	ldr	r2, [r3, #0]
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	685a      	ldr	r2, [r3, #4]
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800dd7e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800dd84:	431a      	orrs	r2, r3
                       Data->DPSM);
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800dd8a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800dd8c:	68fa      	ldr	r2, [r7, #12]
 800dd8e:	4313      	orrs	r3, r2
 800dd90:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd96:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	431a      	orrs	r2, r3
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800dda2:	2300      	movs	r3, #0

}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3714      	adds	r7, #20
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddae:	4770      	bx	lr

0800ddb0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b088      	sub	sp, #32
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ddbe:	2310      	movs	r3, #16
 800ddc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ddc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ddc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ddcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ddd0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ddd2:	f107 0308 	add.w	r3, r7, #8
 800ddd6:	4619      	mov	r1, r3
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f7ff ff73 	bl	800dcc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ddde:	f241 3288 	movw	r2, #5000	; 0x1388
 800dde2:	2110      	movs	r1, #16
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f000 f9e7 	bl	800e1b8 <SDMMC_GetCmdResp1>
 800ddea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddec:	69fb      	ldr	r3, [r7, #28]
}
 800ddee:	4618      	mov	r0, r3
 800ddf0:	3720      	adds	r7, #32
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}

0800ddf6 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ddf6:	b580      	push	{r7, lr}
 800ddf8:	b08a      	sub	sp, #40	; 0x28
 800ddfa:	af00      	add	r7, sp, #0
 800ddfc:	60f8      	str	r0, [r7, #12]
 800ddfe:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800de06:	2307      	movs	r3, #7
 800de08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800de0e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de10:	2300      	movs	r3, #0
 800de12:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de18:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de1a:	f107 0310 	add.w	r3, r7, #16
 800de1e:	4619      	mov	r1, r3
 800de20:	68f8      	ldr	r0, [r7, #12]
 800de22:	f7ff ff4f 	bl	800dcc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800de26:	f241 3288 	movw	r2, #5000	; 0x1388
 800de2a:	2107      	movs	r1, #7
 800de2c:	68f8      	ldr	r0, [r7, #12]
 800de2e:	f000 f9c3 	bl	800e1b8 <SDMMC_GetCmdResp1>
 800de32:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800de34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800de36:	4618      	mov	r0, r3
 800de38:	3728      	adds	r7, #40	; 0x28
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}

0800de3e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800de3e:	b580      	push	{r7, lr}
 800de40:	b088      	sub	sp, #32
 800de42:	af00      	add	r7, sp, #0
 800de44:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800de46:	2300      	movs	r3, #0
 800de48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800de4a:	2300      	movs	r3, #0
 800de4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800de4e:	2300      	movs	r3, #0
 800de50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de52:	2300      	movs	r3, #0
 800de54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de5c:	f107 0308 	add.w	r3, r7, #8
 800de60:	4619      	mov	r1, r3
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	f7ff ff2e 	bl	800dcc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f000 f977 	bl	800e15c <SDMMC_GetCmdError>
 800de6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de70:	69fb      	ldr	r3, [r7, #28]
}
 800de72:	4618      	mov	r0, r3
 800de74:	3720      	adds	r7, #32
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}

0800de7a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800de7a:	b580      	push	{r7, lr}
 800de7c:	b088      	sub	sp, #32
 800de7e:	af00      	add	r7, sp, #0
 800de80:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800de82:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800de86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800de88:	2308      	movs	r3, #8
 800de8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800de90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de92:	2300      	movs	r3, #0
 800de94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de9c:	f107 0308 	add.w	r3, r7, #8
 800dea0:	4619      	mov	r1, r3
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	f7ff ff0e 	bl	800dcc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f000 fb79 	bl	800e5a0 <SDMMC_GetCmdResp7>
 800deae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800deb0:	69fb      	ldr	r3, [r7, #28]
}
 800deb2:	4618      	mov	r0, r3
 800deb4:	3720      	adds	r7, #32
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bd80      	pop	{r7, pc}

0800deba <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800deba:	b580      	push	{r7, lr}
 800debc:	b088      	sub	sp, #32
 800debe:	af00      	add	r7, sp, #0
 800dec0:	6078      	str	r0, [r7, #4]
 800dec2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800dec8:	2337      	movs	r3, #55	; 0x37
 800deca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800decc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ded0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ded2:	2300      	movs	r3, #0
 800ded4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ded6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800deda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dedc:	f107 0308 	add.w	r3, r7, #8
 800dee0:	4619      	mov	r1, r3
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	f7ff feee 	bl	800dcc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800dee8:	f241 3288 	movw	r2, #5000	; 0x1388
 800deec:	2137      	movs	r1, #55	; 0x37
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f000 f962 	bl	800e1b8 <SDMMC_GetCmdResp1>
 800def4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800def6:	69fb      	ldr	r3, [r7, #28]
}
 800def8:	4618      	mov	r0, r3
 800defa:	3720      	adds	r7, #32
 800defc:	46bd      	mov	sp, r7
 800defe:	bd80      	pop	{r7, pc}

0800df00 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b088      	sub	sp, #32
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800df0e:	2329      	movs	r3, #41	; 0x29
 800df10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800df12:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df18:	2300      	movs	r3, #0
 800df1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800df1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800df20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800df22:	f107 0308 	add.w	r3, r7, #8
 800df26:	4619      	mov	r1, r3
 800df28:	6878      	ldr	r0, [r7, #4]
 800df2a:	f7ff fecb 	bl	800dcc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f000 fa7e 	bl	800e430 <SDMMC_GetCmdResp3>
 800df34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df36:	69fb      	ldr	r3, [r7, #28]
}
 800df38:	4618      	mov	r0, r3
 800df3a:	3720      	adds	r7, #32
 800df3c:	46bd      	mov	sp, r7
 800df3e:	bd80      	pop	{r7, pc}

0800df40 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b088      	sub	sp, #32
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
 800df48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800df4e:	2306      	movs	r3, #6
 800df50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800df52:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df58:	2300      	movs	r3, #0
 800df5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800df5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800df60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800df62:	f107 0308 	add.w	r3, r7, #8
 800df66:	4619      	mov	r1, r3
 800df68:	6878      	ldr	r0, [r7, #4]
 800df6a:	f7ff feab 	bl	800dcc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800df6e:	f241 3288 	movw	r2, #5000	; 0x1388
 800df72:	2106      	movs	r1, #6
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	f000 f91f 	bl	800e1b8 <SDMMC_GetCmdResp1>
 800df7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df7c:	69fb      	ldr	r3, [r7, #28]
}
 800df7e:	4618      	mov	r0, r3
 800df80:	3720      	adds	r7, #32
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}

0800df86 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800df86:	b580      	push	{r7, lr}
 800df88:	b088      	sub	sp, #32
 800df8a:	af00      	add	r7, sp, #0
 800df8c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800df8e:	2300      	movs	r3, #0
 800df90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800df92:	2333      	movs	r3, #51	; 0x33
 800df94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800df96:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df9c:	2300      	movs	r3, #0
 800df9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dfa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dfa4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dfa6:	f107 0308 	add.w	r3, r7, #8
 800dfaa:	4619      	mov	r1, r3
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f7ff fe89 	bl	800dcc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800dfb2:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfb6:	2133      	movs	r1, #51	; 0x33
 800dfb8:	6878      	ldr	r0, [r7, #4]
 800dfba:	f000 f8fd 	bl	800e1b8 <SDMMC_GetCmdResp1>
 800dfbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dfc0:	69fb      	ldr	r3, [r7, #28]
}
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	3720      	adds	r7, #32
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd80      	pop	{r7, pc}

0800dfca <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800dfca:	b580      	push	{r7, lr}
 800dfcc:	b088      	sub	sp, #32
 800dfce:	af00      	add	r7, sp, #0
 800dfd0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800dfd6:	2302      	movs	r3, #2
 800dfd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800dfda:	f44f 7340 	mov.w	r3, #768	; 0x300
 800dfde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dfe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dfe8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dfea:	f107 0308 	add.w	r3, r7, #8
 800dfee:	4619      	mov	r1, r3
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f7ff fe67 	bl	800dcc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f000 f9d0 	bl	800e39c <SDMMC_GetCmdResp2>
 800dffc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dffe:	69fb      	ldr	r3, [r7, #28]
}
 800e000:	4618      	mov	r0, r3
 800e002:	3720      	adds	r7, #32
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}

0800e008 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b088      	sub	sp, #32
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
 800e010:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e016:	2309      	movs	r3, #9
 800e018:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e01a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e01e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e020:	2300      	movs	r3, #0
 800e022:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e024:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e028:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e02a:	f107 0308 	add.w	r3, r7, #8
 800e02e:	4619      	mov	r1, r3
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f7ff fe47 	bl	800dcc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f000 f9b0 	bl	800e39c <SDMMC_GetCmdResp2>
 800e03c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e03e:	69fb      	ldr	r3, [r7, #28]
}
 800e040:	4618      	mov	r0, r3
 800e042:	3720      	adds	r7, #32
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}

0800e048 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b088      	sub	sp, #32
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
 800e050:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e052:	2300      	movs	r3, #0
 800e054:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e056:	2303      	movs	r3, #3
 800e058:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e05a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e05e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e060:	2300      	movs	r3, #0
 800e062:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e068:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e06a:	f107 0308 	add.w	r3, r7, #8
 800e06e:	4619      	mov	r1, r3
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f7ff fe27 	bl	800dcc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e076:	683a      	ldr	r2, [r7, #0]
 800e078:	2103      	movs	r1, #3
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f000 fa18 	bl	800e4b0 <SDMMC_GetCmdResp6>
 800e080:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e082:	69fb      	ldr	r3, [r7, #28]
}
 800e084:	4618      	mov	r0, r3
 800e086:	3720      	adds	r7, #32
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}

0800e08c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b088      	sub	sp, #32
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
 800e094:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e09a:	230d      	movs	r3, #13
 800e09c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e09e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e0a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e0a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e0ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e0ae:	f107 0308 	add.w	r3, r7, #8
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f7ff fe05 	bl	800dcc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800e0ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0be:	210d      	movs	r1, #13
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f000 f879 	bl	800e1b8 <SDMMC_GetCmdResp1>
 800e0c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e0c8:	69fb      	ldr	r3, [r7, #28]
}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	3720      	adds	r7, #32
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}

0800e0d2 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800e0d2:	b580      	push	{r7, lr}
 800e0d4:	b088      	sub	sp, #32
 800e0d6:	af00      	add	r7, sp, #0
 800e0d8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e0da:	2300      	movs	r3, #0
 800e0dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800e0de:	230d      	movs	r3, #13
 800e0e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e0e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e0e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e0ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e0f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e0f2:	f107 0308 	add.w	r3, r7, #8
 800e0f6:	4619      	mov	r1, r3
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f7ff fde3 	bl	800dcc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800e0fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800e102:	210d      	movs	r1, #13
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f000 f857 	bl	800e1b8 <SDMMC_GetCmdResp1>
 800e10a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e10c:	69fb      	ldr	r3, [r7, #28]
}
 800e10e:	4618      	mov	r0, r3
 800e110:	3720      	adds	r7, #32
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}

0800e116 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800e116:	b580      	push	{r7, lr}
 800e118:	b088      	sub	sp, #32
 800e11a:	af00      	add	r7, sp, #0
 800e11c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800e11e:	2300      	movs	r3, #0
 800e120:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800e122:	230b      	movs	r3, #11
 800e124:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e126:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e12a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e12c:	2300      	movs	r3, #0
 800e12e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e130:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e134:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e136:	f107 0308 	add.w	r3, r7, #8
 800e13a:	4619      	mov	r1, r3
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f7ff fdc1 	bl	800dcc4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800e142:	f241 3288 	movw	r2, #5000	; 0x1388
 800e146:	210b      	movs	r1, #11
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f000 f835 	bl	800e1b8 <SDMMC_GetCmdResp1>
 800e14e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e150:	69fb      	ldr	r3, [r7, #28]
}
 800e152:	4618      	mov	r0, r3
 800e154:	3720      	adds	r7, #32
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}
	...

0800e15c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800e15c:	b480      	push	{r7}
 800e15e:	b085      	sub	sp, #20
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e164:	4b11      	ldr	r3, [pc, #68]	; (800e1ac <SDMMC_GetCmdError+0x50>)
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	4a11      	ldr	r2, [pc, #68]	; (800e1b0 <SDMMC_GetCmdError+0x54>)
 800e16a:	fba2 2303 	umull	r2, r3, r2, r3
 800e16e:	0a5b      	lsrs	r3, r3, #9
 800e170:	f241 3288 	movw	r2, #5000	; 0x1388
 800e174:	fb02 f303 	mul.w	r3, r2, r3
 800e178:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	1e5a      	subs	r2, r3, #1
 800e17e:	60fa      	str	r2, [r7, #12]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d102      	bne.n	800e18a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e184:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e188:	e009      	b.n	800e19e <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e18e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e192:	2b00      	cmp	r3, #0
 800e194:	d0f1      	beq.n	800e17a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	4a06      	ldr	r2, [pc, #24]	; (800e1b4 <SDMMC_GetCmdError+0x58>)
 800e19a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800e19c:	2300      	movs	r3, #0
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3714      	adds	r7, #20
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a8:	4770      	bx	lr
 800e1aa:	bf00      	nop
 800e1ac:	20000000 	.word	0x20000000
 800e1b0:	10624dd3 	.word	0x10624dd3
 800e1b4:	002000c5 	.word	0x002000c5

0800e1b8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b088      	sub	sp, #32
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	60f8      	str	r0, [r7, #12]
 800e1c0:	460b      	mov	r3, r1
 800e1c2:	607a      	str	r2, [r7, #4]
 800e1c4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e1c6:	4b70      	ldr	r3, [pc, #448]	; (800e388 <SDMMC_GetCmdResp1+0x1d0>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	4a70      	ldr	r2, [pc, #448]	; (800e38c <SDMMC_GetCmdResp1+0x1d4>)
 800e1cc:	fba2 2303 	umull	r2, r3, r2, r3
 800e1d0:	0a5a      	lsrs	r2, r3, #9
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	fb02 f303 	mul.w	r3, r2, r3
 800e1d8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e1da:	69fb      	ldr	r3, [r7, #28]
 800e1dc:	1e5a      	subs	r2, r3, #1
 800e1de:	61fa      	str	r2, [r7, #28]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d102      	bne.n	800e1ea <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e1e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e1e8:	e0c9      	b.n	800e37e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1ee:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e1f0:	69ba      	ldr	r2, [r7, #24]
 800e1f2:	4b67      	ldr	r3, [pc, #412]	; (800e390 <SDMMC_GetCmdResp1+0x1d8>)
 800e1f4:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d0ef      	beq.n	800e1da <SDMMC_GetCmdResp1+0x22>
 800e1fa:	69bb      	ldr	r3, [r7, #24]
 800e1fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800e200:	2b00      	cmp	r3, #0
 800e202:	d1ea      	bne.n	800e1da <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e208:	f003 0304 	and.w	r3, r3, #4
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d004      	beq.n	800e21a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	2204      	movs	r2, #4
 800e214:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e216:	2304      	movs	r3, #4
 800e218:	e0b1      	b.n	800e37e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e21e:	f003 0301 	and.w	r3, r3, #1
 800e222:	2b00      	cmp	r3, #0
 800e224:	d004      	beq.n	800e230 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	2201      	movs	r2, #1
 800e22a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e22c:	2301      	movs	r3, #1
 800e22e:	e0a6      	b.n	800e37e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	4a58      	ldr	r2, [pc, #352]	; (800e394 <SDMMC_GetCmdResp1+0x1dc>)
 800e234:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e236:	68f8      	ldr	r0, [r7, #12]
 800e238:	f7ff fd6e 	bl	800dd18 <SDMMC_GetCommandResponse>
 800e23c:	4603      	mov	r3, r0
 800e23e:	461a      	mov	r2, r3
 800e240:	7afb      	ldrb	r3, [r7, #11]
 800e242:	4293      	cmp	r3, r2
 800e244:	d001      	beq.n	800e24a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e246:	2301      	movs	r3, #1
 800e248:	e099      	b.n	800e37e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e24a:	2100      	movs	r1, #0
 800e24c:	68f8      	ldr	r0, [r7, #12]
 800e24e:	f7ff fd70 	bl	800dd32 <SDMMC_GetResponse>
 800e252:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e254:	697a      	ldr	r2, [r7, #20]
 800e256:	4b50      	ldr	r3, [pc, #320]	; (800e398 <SDMMC_GetCmdResp1+0x1e0>)
 800e258:	4013      	ands	r3, r2
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d101      	bne.n	800e262 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e25e:	2300      	movs	r3, #0
 800e260:	e08d      	b.n	800e37e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	2b00      	cmp	r3, #0
 800e266:	da02      	bge.n	800e26e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e268:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e26c:	e087      	b.n	800e37e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e274:	2b00      	cmp	r3, #0
 800e276:	d001      	beq.n	800e27c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e278:	2340      	movs	r3, #64	; 0x40
 800e27a:	e080      	b.n	800e37e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e27c:	697b      	ldr	r3, [r7, #20]
 800e27e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e282:	2b00      	cmp	r3, #0
 800e284:	d001      	beq.n	800e28a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e286:	2380      	movs	r3, #128	; 0x80
 800e288:	e079      	b.n	800e37e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e290:	2b00      	cmp	r3, #0
 800e292:	d002      	beq.n	800e29a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e294:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e298:	e071      	b.n	800e37e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e29a:	697b      	ldr	r3, [r7, #20]
 800e29c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d002      	beq.n	800e2aa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e2a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e2a8:	e069      	b.n	800e37e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d002      	beq.n	800e2ba <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e2b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2b8:	e061      	b.n	800e37e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e2ba:	697b      	ldr	r3, [r7, #20]
 800e2bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d002      	beq.n	800e2ca <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e2c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e2c8:	e059      	b.n	800e37e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d002      	beq.n	800e2da <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e2d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e2d8:	e051      	b.n	800e37e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e2da:	697b      	ldr	r3, [r7, #20]
 800e2dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d002      	beq.n	800e2ea <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e2e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e2e8:	e049      	b.n	800e37e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e2ea:	697b      	ldr	r3, [r7, #20]
 800e2ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d002      	beq.n	800e2fa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e2f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e2f8:	e041      	b.n	800e37e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e2fa:	697b      	ldr	r3, [r7, #20]
 800e2fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e300:	2b00      	cmp	r3, #0
 800e302:	d002      	beq.n	800e30a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e304:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e308:	e039      	b.n	800e37e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e30a:	697b      	ldr	r3, [r7, #20]
 800e30c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e310:	2b00      	cmp	r3, #0
 800e312:	d002      	beq.n	800e31a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e314:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e318:	e031      	b.n	800e37e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e31a:	697b      	ldr	r3, [r7, #20]
 800e31c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e320:	2b00      	cmp	r3, #0
 800e322:	d002      	beq.n	800e32a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e324:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e328:	e029      	b.n	800e37e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e32a:	697b      	ldr	r3, [r7, #20]
 800e32c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e330:	2b00      	cmp	r3, #0
 800e332:	d002      	beq.n	800e33a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e334:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e338:	e021      	b.n	800e37e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e33a:	697b      	ldr	r3, [r7, #20]
 800e33c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e340:	2b00      	cmp	r3, #0
 800e342:	d002      	beq.n	800e34a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e344:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e348:	e019      	b.n	800e37e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e34a:	697b      	ldr	r3, [r7, #20]
 800e34c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e350:	2b00      	cmp	r3, #0
 800e352:	d002      	beq.n	800e35a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e354:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e358:	e011      	b.n	800e37e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e360:	2b00      	cmp	r3, #0
 800e362:	d002      	beq.n	800e36a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e364:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e368:	e009      	b.n	800e37e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e36a:	697b      	ldr	r3, [r7, #20]
 800e36c:	f003 0308 	and.w	r3, r3, #8
 800e370:	2b00      	cmp	r3, #0
 800e372:	d002      	beq.n	800e37a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e374:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e378:	e001      	b.n	800e37e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e37a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e37e:	4618      	mov	r0, r3
 800e380:	3720      	adds	r7, #32
 800e382:	46bd      	mov	sp, r7
 800e384:	bd80      	pop	{r7, pc}
 800e386:	bf00      	nop
 800e388:	20000000 	.word	0x20000000
 800e38c:	10624dd3 	.word	0x10624dd3
 800e390:	00200045 	.word	0x00200045
 800e394:	002000c5 	.word	0x002000c5
 800e398:	fdffe008 	.word	0xfdffe008

0800e39c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e39c:	b480      	push	{r7}
 800e39e:	b085      	sub	sp, #20
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e3a4:	4b1f      	ldr	r3, [pc, #124]	; (800e424 <SDMMC_GetCmdResp2+0x88>)
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	4a1f      	ldr	r2, [pc, #124]	; (800e428 <SDMMC_GetCmdResp2+0x8c>)
 800e3aa:	fba2 2303 	umull	r2, r3, r2, r3
 800e3ae:	0a5b      	lsrs	r3, r3, #9
 800e3b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3b4:	fb02 f303 	mul.w	r3, r2, r3
 800e3b8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	1e5a      	subs	r2, r3, #1
 800e3be:	60fa      	str	r2, [r7, #12]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d102      	bne.n	800e3ca <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e3c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e3c8:	e026      	b.n	800e418 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3ce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d0ef      	beq.n	800e3ba <SDMMC_GetCmdResp2+0x1e>
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d1ea      	bne.n	800e3ba <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3e8:	f003 0304 	and.w	r3, r3, #4
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d004      	beq.n	800e3fa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2204      	movs	r2, #4
 800e3f4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e3f6:	2304      	movs	r3, #4
 800e3f8:	e00e      	b.n	800e418 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3fe:	f003 0301 	and.w	r3, r3, #1
 800e402:	2b00      	cmp	r3, #0
 800e404:	d004      	beq.n	800e410 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	2201      	movs	r2, #1
 800e40a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e40c:	2301      	movs	r3, #1
 800e40e:	e003      	b.n	800e418 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	4a06      	ldr	r2, [pc, #24]	; (800e42c <SDMMC_GetCmdResp2+0x90>)
 800e414:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e416:	2300      	movs	r3, #0
}
 800e418:	4618      	mov	r0, r3
 800e41a:	3714      	adds	r7, #20
 800e41c:	46bd      	mov	sp, r7
 800e41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e422:	4770      	bx	lr
 800e424:	20000000 	.word	0x20000000
 800e428:	10624dd3 	.word	0x10624dd3
 800e42c:	002000c5 	.word	0x002000c5

0800e430 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e430:	b480      	push	{r7}
 800e432:	b085      	sub	sp, #20
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e438:	4b1a      	ldr	r3, [pc, #104]	; (800e4a4 <SDMMC_GetCmdResp3+0x74>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	4a1a      	ldr	r2, [pc, #104]	; (800e4a8 <SDMMC_GetCmdResp3+0x78>)
 800e43e:	fba2 2303 	umull	r2, r3, r2, r3
 800e442:	0a5b      	lsrs	r3, r3, #9
 800e444:	f241 3288 	movw	r2, #5000	; 0x1388
 800e448:	fb02 f303 	mul.w	r3, r2, r3
 800e44c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	1e5a      	subs	r2, r3, #1
 800e452:	60fa      	str	r2, [r7, #12]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d102      	bne.n	800e45e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e458:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e45c:	e01b      	b.n	800e496 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e462:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e464:	68bb      	ldr	r3, [r7, #8]
 800e466:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d0ef      	beq.n	800e44e <SDMMC_GetCmdResp3+0x1e>
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e474:	2b00      	cmp	r3, #0
 800e476:	d1ea      	bne.n	800e44e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e47c:	f003 0304 	and.w	r3, r3, #4
 800e480:	2b00      	cmp	r3, #0
 800e482:	d004      	beq.n	800e48e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2204      	movs	r2, #4
 800e488:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e48a:	2304      	movs	r3, #4
 800e48c:	e003      	b.n	800e496 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	4a06      	ldr	r2, [pc, #24]	; (800e4ac <SDMMC_GetCmdResp3+0x7c>)
 800e492:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e494:	2300      	movs	r3, #0
}
 800e496:	4618      	mov	r0, r3
 800e498:	3714      	adds	r7, #20
 800e49a:	46bd      	mov	sp, r7
 800e49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a0:	4770      	bx	lr
 800e4a2:	bf00      	nop
 800e4a4:	20000000 	.word	0x20000000
 800e4a8:	10624dd3 	.word	0x10624dd3
 800e4ac:	002000c5 	.word	0x002000c5

0800e4b0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b088      	sub	sp, #32
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	60f8      	str	r0, [r7, #12]
 800e4b8:	460b      	mov	r3, r1
 800e4ba:	607a      	str	r2, [r7, #4]
 800e4bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e4be:	4b35      	ldr	r3, [pc, #212]	; (800e594 <SDMMC_GetCmdResp6+0xe4>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	4a35      	ldr	r2, [pc, #212]	; (800e598 <SDMMC_GetCmdResp6+0xe8>)
 800e4c4:	fba2 2303 	umull	r2, r3, r2, r3
 800e4c8:	0a5b      	lsrs	r3, r3, #9
 800e4ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800e4ce:	fb02 f303 	mul.w	r3, r2, r3
 800e4d2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e4d4:	69fb      	ldr	r3, [r7, #28]
 800e4d6:	1e5a      	subs	r2, r3, #1
 800e4d8:	61fa      	str	r2, [r7, #28]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d102      	bne.n	800e4e4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e4de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e4e2:	e052      	b.n	800e58a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4e8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e4ea:	69bb      	ldr	r3, [r7, #24]
 800e4ec:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d0ef      	beq.n	800e4d4 <SDMMC_GetCmdResp6+0x24>
 800e4f4:	69bb      	ldr	r3, [r7, #24]
 800e4f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d1ea      	bne.n	800e4d4 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e502:	f003 0304 	and.w	r3, r3, #4
 800e506:	2b00      	cmp	r3, #0
 800e508:	d004      	beq.n	800e514 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	2204      	movs	r2, #4
 800e50e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e510:	2304      	movs	r3, #4
 800e512:	e03a      	b.n	800e58a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e518:	f003 0301 	and.w	r3, r3, #1
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d004      	beq.n	800e52a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	2201      	movs	r2, #1
 800e524:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e526:	2301      	movs	r3, #1
 800e528:	e02f      	b.n	800e58a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e52a:	68f8      	ldr	r0, [r7, #12]
 800e52c:	f7ff fbf4 	bl	800dd18 <SDMMC_GetCommandResponse>
 800e530:	4603      	mov	r3, r0
 800e532:	461a      	mov	r2, r3
 800e534:	7afb      	ldrb	r3, [r7, #11]
 800e536:	4293      	cmp	r3, r2
 800e538:	d001      	beq.n	800e53e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e53a:	2301      	movs	r3, #1
 800e53c:	e025      	b.n	800e58a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	4a16      	ldr	r2, [pc, #88]	; (800e59c <SDMMC_GetCmdResp6+0xec>)
 800e542:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e544:	2100      	movs	r1, #0
 800e546:	68f8      	ldr	r0, [r7, #12]
 800e548:	f7ff fbf3 	bl	800dd32 <SDMMC_GetResponse>
 800e54c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e54e:	697b      	ldr	r3, [r7, #20]
 800e550:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e554:	2b00      	cmp	r3, #0
 800e556:	d106      	bne.n	800e566 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e558:	697b      	ldr	r3, [r7, #20]
 800e55a:	0c1b      	lsrs	r3, r3, #16
 800e55c:	b29a      	uxth	r2, r3
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800e562:	2300      	movs	r3, #0
 800e564:	e011      	b.n	800e58a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e566:	697b      	ldr	r3, [r7, #20]
 800e568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d002      	beq.n	800e576 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e570:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e574:	e009      	b.n	800e58a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e576:	697b      	ldr	r3, [r7, #20]
 800e578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d002      	beq.n	800e586 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e580:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e584:	e001      	b.n	800e58a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e586:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e58a:	4618      	mov	r0, r3
 800e58c:	3720      	adds	r7, #32
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}
 800e592:	bf00      	nop
 800e594:	20000000 	.word	0x20000000
 800e598:	10624dd3 	.word	0x10624dd3
 800e59c:	002000c5 	.word	0x002000c5

0800e5a0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e5a0:	b480      	push	{r7}
 800e5a2:	b085      	sub	sp, #20
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e5a8:	4b22      	ldr	r3, [pc, #136]	; (800e634 <SDMMC_GetCmdResp7+0x94>)
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	4a22      	ldr	r2, [pc, #136]	; (800e638 <SDMMC_GetCmdResp7+0x98>)
 800e5ae:	fba2 2303 	umull	r2, r3, r2, r3
 800e5b2:	0a5b      	lsrs	r3, r3, #9
 800e5b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5b8:	fb02 f303 	mul.w	r3, r2, r3
 800e5bc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	1e5a      	subs	r2, r3, #1
 800e5c2:	60fa      	str	r2, [r7, #12]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d102      	bne.n	800e5ce <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e5c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e5cc:	e02c      	b.n	800e628 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5d2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d0ef      	beq.n	800e5be <SDMMC_GetCmdResp7+0x1e>
 800e5de:	68bb      	ldr	r3, [r7, #8]
 800e5e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d1ea      	bne.n	800e5be <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5ec:	f003 0304 	and.w	r3, r3, #4
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d004      	beq.n	800e5fe <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2204      	movs	r2, #4
 800e5f8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e5fa:	2304      	movs	r3, #4
 800e5fc:	e014      	b.n	800e628 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e602:	f003 0301 	and.w	r3, r3, #1
 800e606:	2b00      	cmp	r3, #0
 800e608:	d004      	beq.n	800e614 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2201      	movs	r2, #1
 800e60e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e610:	2301      	movs	r3, #1
 800e612:	e009      	b.n	800e628 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d002      	beq.n	800e626 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2240      	movs	r2, #64	; 0x40
 800e624:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e626:	2300      	movs	r3, #0

}
 800e628:	4618      	mov	r0, r3
 800e62a:	3714      	adds	r7, #20
 800e62c:	46bd      	mov	sp, r7
 800e62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e632:	4770      	bx	lr
 800e634:	20000000 	.word	0x20000000
 800e638:	10624dd3 	.word	0x10624dd3

0800e63c <__libc_init_array>:
 800e63c:	b570      	push	{r4, r5, r6, lr}
 800e63e:	4e0d      	ldr	r6, [pc, #52]	; (800e674 <__libc_init_array+0x38>)
 800e640:	4c0d      	ldr	r4, [pc, #52]	; (800e678 <__libc_init_array+0x3c>)
 800e642:	1ba4      	subs	r4, r4, r6
 800e644:	10a4      	asrs	r4, r4, #2
 800e646:	2500      	movs	r5, #0
 800e648:	42a5      	cmp	r5, r4
 800e64a:	d109      	bne.n	800e660 <__libc_init_array+0x24>
 800e64c:	4e0b      	ldr	r6, [pc, #44]	; (800e67c <__libc_init_array+0x40>)
 800e64e:	4c0c      	ldr	r4, [pc, #48]	; (800e680 <__libc_init_array+0x44>)
 800e650:	f000 f82c 	bl	800e6ac <_init>
 800e654:	1ba4      	subs	r4, r4, r6
 800e656:	10a4      	asrs	r4, r4, #2
 800e658:	2500      	movs	r5, #0
 800e65a:	42a5      	cmp	r5, r4
 800e65c:	d105      	bne.n	800e66a <__libc_init_array+0x2e>
 800e65e:	bd70      	pop	{r4, r5, r6, pc}
 800e660:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e664:	4798      	blx	r3
 800e666:	3501      	adds	r5, #1
 800e668:	e7ee      	b.n	800e648 <__libc_init_array+0xc>
 800e66a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e66e:	4798      	blx	r3
 800e670:	3501      	adds	r5, #1
 800e672:	e7f2      	b.n	800e65a <__libc_init_array+0x1e>
 800e674:	0800e750 	.word	0x0800e750
 800e678:	0800e750 	.word	0x0800e750
 800e67c:	0800e750 	.word	0x0800e750
 800e680:	0800e754 	.word	0x0800e754

0800e684 <memcpy>:
 800e684:	b510      	push	{r4, lr}
 800e686:	1e43      	subs	r3, r0, #1
 800e688:	440a      	add	r2, r1
 800e68a:	4291      	cmp	r1, r2
 800e68c:	d100      	bne.n	800e690 <memcpy+0xc>
 800e68e:	bd10      	pop	{r4, pc}
 800e690:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e694:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e698:	e7f7      	b.n	800e68a <memcpy+0x6>

0800e69a <memset>:
 800e69a:	4402      	add	r2, r0
 800e69c:	4603      	mov	r3, r0
 800e69e:	4293      	cmp	r3, r2
 800e6a0:	d100      	bne.n	800e6a4 <memset+0xa>
 800e6a2:	4770      	bx	lr
 800e6a4:	f803 1b01 	strb.w	r1, [r3], #1
 800e6a8:	e7f9      	b.n	800e69e <memset+0x4>
	...

0800e6ac <_init>:
 800e6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6ae:	bf00      	nop
 800e6b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6b2:	bc08      	pop	{r3}
 800e6b4:	469e      	mov	lr, r3
 800e6b6:	4770      	bx	lr

0800e6b8 <_fini>:
 800e6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6ba:	bf00      	nop
 800e6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6be:	bc08      	pop	{r3}
 800e6c0:	469e      	mov	lr, r3
 800e6c2:	4770      	bx	lr
